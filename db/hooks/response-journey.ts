/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ResponseJourney } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateResponseJourney(options?: Omit<(UseMutationOptions<(ResponseJourney | undefined), DefaultError, Prisma.ResponseJourneyCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyCreateArgs, DefaultError, ResponseJourney, true>('ResponseJourney', 'POST', `${endpoint}/responseJourney/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyResponseJourney(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ResponseJourneyCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ResponseJourney', 'POST', `${endpoint}/responseJourney/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyResponseJourney<TArgs extends Prisma.ResponseJourneyFindManyArgs, TQueryFnData = Array<Prisma.ResponseJourneyGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findMany`, args, options, fetch);
}

export function useInfiniteFindManyResponseJourney<TArgs extends Prisma.ResponseJourneyFindManyArgs, TQueryFnData = Array<Prisma.ResponseJourneyGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findMany`, args, options, fetch);
}

export function useSuspenseFindManyResponseJourney<TArgs extends Prisma.ResponseJourneyFindManyArgs, TQueryFnData = Array<Prisma.ResponseJourneyGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyResponseJourney<TArgs extends Prisma.ResponseJourneyFindManyArgs, TQueryFnData = Array<Prisma.ResponseJourneyGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findMany`, args, options, fetch);
}

export function useFindUniqueResponseJourney<TArgs extends Prisma.ResponseJourneyFindUniqueArgs, TQueryFnData = Prisma.ResponseJourneyGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueResponseJourney<TArgs extends Prisma.ResponseJourneyFindUniqueArgs, TQueryFnData = Prisma.ResponseJourneyGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findUnique`, args, options, fetch);
}

export function useFindFirstResponseJourney<TArgs extends Prisma.ResponseJourneyFindFirstArgs, TQueryFnData = Prisma.ResponseJourneyGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstResponseJourney<TArgs extends Prisma.ResponseJourneyFindFirstArgs, TQueryFnData = Prisma.ResponseJourneyGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/findFirst`, args, options, fetch);
}

export function useUpdateResponseJourney(options?: Omit<(UseMutationOptions<(ResponseJourney | undefined), DefaultError, Prisma.ResponseJourneyUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyUpdateArgs, DefaultError, ResponseJourney, true>('ResponseJourney', 'PUT', `${endpoint}/responseJourney/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyResponseJourney(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ResponseJourneyUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ResponseJourney', 'PUT', `${endpoint}/responseJourney/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertResponseJourney(options?: Omit<(UseMutationOptions<(ResponseJourney | undefined), DefaultError, Prisma.ResponseJourneyUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyUpsertArgs, DefaultError, ResponseJourney, true>('ResponseJourney', 'POST', `${endpoint}/responseJourney/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteResponseJourney(options?: Omit<(UseMutationOptions<(ResponseJourney | undefined), DefaultError, Prisma.ResponseJourneyDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyDeleteArgs, DefaultError, ResponseJourney, true>('ResponseJourney', 'DELETE', `${endpoint}/responseJourney/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ResponseJourney, Prisma.ResponseJourneyGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyResponseJourney(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ResponseJourneyDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ResponseJourneyDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ResponseJourney', 'DELETE', `${endpoint}/responseJourney/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ResponseJourneyDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ResponseJourneyDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ResponseJourneyDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateResponseJourney<TArgs extends Prisma.ResponseJourneyAggregateArgs, TQueryFnData = Prisma.GetResponseJourneyAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateResponseJourney<TArgs extends Prisma.ResponseJourneyAggregateArgs, TQueryFnData = Prisma.GetResponseJourneyAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/aggregate`, args, options, fetch);
}

export function useGroupByResponseJourney<TArgs extends Prisma.ResponseJourneyGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ResponseJourneyGroupByArgs['orderBy'] } : { orderBy?: Prisma.ResponseJourneyGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ResponseJourneyGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ResponseJourneyGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ResponseJourneyGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ResponseJourneyGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ResponseJourneyGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByResponseJourney<TArgs extends Prisma.ResponseJourneyGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ResponseJourneyGroupByArgs['orderBy'] } : { orderBy?: Prisma.ResponseJourneyGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ResponseJourneyGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ResponseJourneyGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ResponseJourneyGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ResponseJourneyGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ResponseJourneyGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/groupBy`, args, options, fetch);
}

export function useCountResponseJourney<TArgs extends Prisma.ResponseJourneyCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ResponseJourneyCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/count`, args, options, fetch);
}

export function useSuspenseCountResponseJourney<TArgs extends Prisma.ResponseJourneyCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ResponseJourneyCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ResponseJourneyCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ResponseJourney', `${endpoint}/responseJourney/count`, args, options, fetch);
}

export function useCheckResponseJourney<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; workspaceId?: string; description?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ResponseJourney', `${endpoint}/responseJourney/check`, args, options, fetch);
}
