/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, KlaviyoJob } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateKlaviyoJob(options?: Omit<(UseMutationOptions<(KlaviyoJob | undefined), DefaultError, Prisma.KlaviyoJobCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobCreateArgs, DefaultError, KlaviyoJob, true>('KlaviyoJob', 'POST', `${endpoint}/klaviyoJob/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyKlaviyoJob(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.KlaviyoJobCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('KlaviyoJob', 'POST', `${endpoint}/klaviyoJob/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindManyArgs, TQueryFnData = Array<Prisma.KlaviyoJobGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findMany`, args, options, fetch);
}

export function useInfiniteFindManyKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindManyArgs, TQueryFnData = Array<Prisma.KlaviyoJobGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findMany`, args, options, fetch);
}

export function useSuspenseFindManyKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindManyArgs, TQueryFnData = Array<Prisma.KlaviyoJobGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindManyArgs, TQueryFnData = Array<Prisma.KlaviyoJobGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findMany`, args, options, fetch);
}

export function useFindUniqueKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindUniqueArgs, TQueryFnData = Prisma.KlaviyoJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindUniqueArgs, TQueryFnData = Prisma.KlaviyoJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findUnique`, args, options, fetch);
}

export function useFindFirstKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindFirstArgs, TQueryFnData = Prisma.KlaviyoJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstKlaviyoJob<TArgs extends Prisma.KlaviyoJobFindFirstArgs, TQueryFnData = Prisma.KlaviyoJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/findFirst`, args, options, fetch);
}

export function useUpdateKlaviyoJob(options?: Omit<(UseMutationOptions<(KlaviyoJob | undefined), DefaultError, Prisma.KlaviyoJobUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobUpdateArgs, DefaultError, KlaviyoJob, true>('KlaviyoJob', 'PUT', `${endpoint}/klaviyoJob/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyKlaviyoJob(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.KlaviyoJobUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('KlaviyoJob', 'PUT', `${endpoint}/klaviyoJob/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertKlaviyoJob(options?: Omit<(UseMutationOptions<(KlaviyoJob | undefined), DefaultError, Prisma.KlaviyoJobUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobUpsertArgs, DefaultError, KlaviyoJob, true>('KlaviyoJob', 'POST', `${endpoint}/klaviyoJob/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteKlaviyoJob(options?: Omit<(UseMutationOptions<(KlaviyoJob | undefined), DefaultError, Prisma.KlaviyoJobDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobDeleteArgs, DefaultError, KlaviyoJob, true>('KlaviyoJob', 'DELETE', `${endpoint}/klaviyoJob/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KlaviyoJob, Prisma.KlaviyoJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyKlaviyoJob(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.KlaviyoJobDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KlaviyoJobDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('KlaviyoJob', 'DELETE', `${endpoint}/klaviyoJob/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KlaviyoJobDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.KlaviyoJobDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.KlaviyoJobDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateKlaviyoJob<TArgs extends Prisma.KlaviyoJobAggregateArgs, TQueryFnData = Prisma.GetKlaviyoJobAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateKlaviyoJob<TArgs extends Prisma.KlaviyoJobAggregateArgs, TQueryFnData = Prisma.GetKlaviyoJobAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/aggregate`, args, options, fetch);
}

export function useGroupByKlaviyoJob<TArgs extends Prisma.KlaviyoJobGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.KlaviyoJobGroupByArgs['orderBy'] } : { orderBy?: Prisma.KlaviyoJobGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.KlaviyoJobGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.KlaviyoJobGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.KlaviyoJobGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.KlaviyoJobGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.KlaviyoJobGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByKlaviyoJob<TArgs extends Prisma.KlaviyoJobGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.KlaviyoJobGroupByArgs['orderBy'] } : { orderBy?: Prisma.KlaviyoJobGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.KlaviyoJobGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.KlaviyoJobGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.KlaviyoJobGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.KlaviyoJobGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.KlaviyoJobGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/groupBy`, args, options, fetch);
}

export function useCountKlaviyoJob<TArgs extends Prisma.KlaviyoJobCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.KlaviyoJobCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/count`, args, options, fetch);
}

export function useSuspenseCountKlaviyoJob<TArgs extends Prisma.KlaviyoJobCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.KlaviyoJobCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KlaviyoJobCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/count`, args, options, fetch);
}

export function useCheckKlaviyoJob<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; jobId?: string; klaviyoId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('KlaviyoJob', `${endpoint}/klaviyoJob/check`, args, options, fetch);
}
