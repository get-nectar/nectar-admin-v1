/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, BlastTemplate } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateBlastTemplate(options?: Omit<(UseMutationOptions<(BlastTemplate | undefined), DefaultError, Prisma.BlastTemplateCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateCreateArgs, DefaultError, BlastTemplate, true>('BlastTemplate', 'POST', `${endpoint}/blastTemplate/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyBlastTemplate(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BlastTemplateCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('BlastTemplate', 'POST', `${endpoint}/blastTemplate/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyBlastTemplate<TArgs extends Prisma.BlastTemplateFindManyArgs, TQueryFnData = Array<Prisma.BlastTemplateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findMany`, args, options, fetch);
}

export function useInfiniteFindManyBlastTemplate<TArgs extends Prisma.BlastTemplateFindManyArgs, TQueryFnData = Array<Prisma.BlastTemplateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findMany`, args, options, fetch);
}

export function useSuspenseFindManyBlastTemplate<TArgs extends Prisma.BlastTemplateFindManyArgs, TQueryFnData = Array<Prisma.BlastTemplateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyBlastTemplate<TArgs extends Prisma.BlastTemplateFindManyArgs, TQueryFnData = Array<Prisma.BlastTemplateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findMany`, args, options, fetch);
}

export function useFindUniqueBlastTemplate<TArgs extends Prisma.BlastTemplateFindUniqueArgs, TQueryFnData = Prisma.BlastTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueBlastTemplate<TArgs extends Prisma.BlastTemplateFindUniqueArgs, TQueryFnData = Prisma.BlastTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findUnique`, args, options, fetch);
}

export function useFindFirstBlastTemplate<TArgs extends Prisma.BlastTemplateFindFirstArgs, TQueryFnData = Prisma.BlastTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstBlastTemplate<TArgs extends Prisma.BlastTemplateFindFirstArgs, TQueryFnData = Prisma.BlastTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/findFirst`, args, options, fetch);
}

export function useUpdateBlastTemplate(options?: Omit<(UseMutationOptions<(BlastTemplate | undefined), DefaultError, Prisma.BlastTemplateUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateUpdateArgs, DefaultError, BlastTemplate, true>('BlastTemplate', 'PUT', `${endpoint}/blastTemplate/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyBlastTemplate(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BlastTemplateUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('BlastTemplate', 'PUT', `${endpoint}/blastTemplate/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertBlastTemplate(options?: Omit<(UseMutationOptions<(BlastTemplate | undefined), DefaultError, Prisma.BlastTemplateUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateUpsertArgs, DefaultError, BlastTemplate, true>('BlastTemplate', 'POST', `${endpoint}/blastTemplate/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteBlastTemplate(options?: Omit<(UseMutationOptions<(BlastTemplate | undefined), DefaultError, Prisma.BlastTemplateDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateDeleteArgs, DefaultError, BlastTemplate, true>('BlastTemplate', 'DELETE', `${endpoint}/blastTemplate/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastTemplate, Prisma.BlastTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyBlastTemplate(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BlastTemplateDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastTemplateDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('BlastTemplate', 'DELETE', `${endpoint}/blastTemplate/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastTemplateDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastTemplateDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BlastTemplateDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateBlastTemplate<TArgs extends Prisma.BlastTemplateAggregateArgs, TQueryFnData = Prisma.GetBlastTemplateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateBlastTemplate<TArgs extends Prisma.BlastTemplateAggregateArgs, TQueryFnData = Prisma.GetBlastTemplateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/aggregate`, args, options, fetch);
}

export function useGroupByBlastTemplate<TArgs extends Prisma.BlastTemplateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BlastTemplateGroupByArgs['orderBy'] } : { orderBy?: Prisma.BlastTemplateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BlastTemplateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BlastTemplateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastTemplateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastTemplateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BlastTemplateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByBlastTemplate<TArgs extends Prisma.BlastTemplateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BlastTemplateGroupByArgs['orderBy'] } : { orderBy?: Prisma.BlastTemplateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BlastTemplateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BlastTemplateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastTemplateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastTemplateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BlastTemplateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/groupBy`, args, options, fetch);
}

export function useCountBlastTemplate<TArgs extends Prisma.BlastTemplateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BlastTemplateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/count`, args, options, fetch);
}

export function useSuspenseCountBlastTemplate<TArgs extends Prisma.BlastTemplateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BlastTemplateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastTemplateCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastTemplate', `${endpoint}/blastTemplate/count`, args, options, fetch);
}

export function useCheckBlastTemplate<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; categoryId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('BlastTemplate', `${endpoint}/blastTemplate/check`, args, options, fetch);
}
