/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkspaceUserActiveTime } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<(WorkspaceUserActiveTime | undefined), DefaultError, Prisma.WorkspaceUserActiveTimeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeCreateArgs, DefaultError, WorkspaceUserActiveTime, true>('WorkspaceUserActiveTime', 'POST', `${endpoint}/workspaceUserActiveTime/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserActiveTimeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserActiveTime', 'POST', `${endpoint}/workspaceUserActiveTime/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActiveTimeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActiveTimeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActiveTimeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActiveTimeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findMany`, args, options, fetch);
}

export function useFindUniqueWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserActiveTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserActiveTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findUnique`, args, options, fetch);
}

export function useFindFirstWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserActiveTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserActiveTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/findFirst`, args, options, fetch);
}

export function useUpdateWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<(WorkspaceUserActiveTime | undefined), DefaultError, Prisma.WorkspaceUserActiveTimeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeUpdateArgs, DefaultError, WorkspaceUserActiveTime, true>('WorkspaceUserActiveTime', 'PUT', `${endpoint}/workspaceUserActiveTime/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserActiveTimeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserActiveTime', 'PUT', `${endpoint}/workspaceUserActiveTime/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<(WorkspaceUserActiveTime | undefined), DefaultError, Prisma.WorkspaceUserActiveTimeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeUpsertArgs, DefaultError, WorkspaceUserActiveTime, true>('WorkspaceUserActiveTime', 'POST', `${endpoint}/workspaceUserActiveTime/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<(WorkspaceUserActiveTime | undefined), DefaultError, Prisma.WorkspaceUserActiveTimeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeDeleteArgs, DefaultError, WorkspaceUserActiveTime, true>('WorkspaceUserActiveTime', 'DELETE', `${endpoint}/workspaceUserActiveTime/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActiveTime, Prisma.WorkspaceUserActiveTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkspaceUserActiveTime(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserActiveTimeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActiveTimeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserActiveTime', 'DELETE', `${endpoint}/workspaceUserActiveTime/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActiveTimeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActiveTimeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserActiveTimeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserActiveTimeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/aggregate`, args, options, fetch);
}

export function useGroupByWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserActiveTimeGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserActiveTimeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserActiveTimeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserActiveTimeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActiveTimeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActiveTimeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserActiveTimeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserActiveTimeGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserActiveTimeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserActiveTimeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserActiveTimeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActiveTimeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActiveTimeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserActiveTimeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/groupBy`, args, options, fetch);
}

export function useCountWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserActiveTimeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/count`, args, options, fetch);
}

export function useSuspenseCountWorkspaceUserActiveTime<TArgs extends Prisma.WorkspaceUserActiveTimeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserActiveTimeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActiveTimeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/count`, args, options, fetch);
}

export function useCheckWorkspaceUserActiveTime<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceUserId?: string; activeTimeInSeconds?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkspaceUserActiveTime', `${endpoint}/workspaceUserActiveTime/check`, args, options, fetch);
}
