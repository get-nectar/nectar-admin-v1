/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalContentVideoFrame } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<(GlobalContentVideoFrame | undefined), DefaultError, Prisma.GlobalContentVideoFrameCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameCreateArgs, DefaultError, GlobalContentVideoFrame, true>('GlobalContentVideoFrame', 'POST', `${endpoint}/globalContentVideoFrame/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalContentVideoFrameCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalContentVideoFrame', 'POST', `${endpoint}/globalContentVideoFrame/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentVideoFrameGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentVideoFrameGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentVideoFrameGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentVideoFrameGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindUniqueArgs, TQueryFnData = Prisma.GlobalContentVideoFrameGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindUniqueArgs, TQueryFnData = Prisma.GlobalContentVideoFrameGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindFirstArgs, TQueryFnData = Prisma.GlobalContentVideoFrameGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameFindFirstArgs, TQueryFnData = Prisma.GlobalContentVideoFrameGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/findFirst`, args, options, fetch);
}

export function useUpdateGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<(GlobalContentVideoFrame | undefined), DefaultError, Prisma.GlobalContentVideoFrameUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameUpdateArgs, DefaultError, GlobalContentVideoFrame, true>('GlobalContentVideoFrame', 'PUT', `${endpoint}/globalContentVideoFrame/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalContentVideoFrameUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalContentVideoFrame', 'PUT', `${endpoint}/globalContentVideoFrame/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<(GlobalContentVideoFrame | undefined), DefaultError, Prisma.GlobalContentVideoFrameUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameUpsertArgs, DefaultError, GlobalContentVideoFrame, true>('GlobalContentVideoFrame', 'POST', `${endpoint}/globalContentVideoFrame/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<(GlobalContentVideoFrame | undefined), DefaultError, Prisma.GlobalContentVideoFrameDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameDeleteArgs, DefaultError, GlobalContentVideoFrame, true>('GlobalContentVideoFrame', 'DELETE', `${endpoint}/globalContentVideoFrame/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContentVideoFrame, Prisma.GlobalContentVideoFrameGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalContentVideoFrame(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalContentVideoFrameDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentVideoFrameDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalContentVideoFrame', 'DELETE', `${endpoint}/globalContentVideoFrame/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentVideoFrameDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentVideoFrameDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameAggregateArgs, TQueryFnData = Prisma.GetGlobalContentVideoFrameAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameAggregateArgs, TQueryFnData = Prisma.GetGlobalContentVideoFrameAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/aggregate`, args, options, fetch);
}

export function useGroupByGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalContentVideoFrameGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalContentVideoFrameGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalContentVideoFrameGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalContentVideoFrameGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentVideoFrameGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentVideoFrameGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalContentVideoFrameGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalContentVideoFrameGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalContentVideoFrameGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalContentVideoFrameGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalContentVideoFrameGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentVideoFrameGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentVideoFrameGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalContentVideoFrameGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/groupBy`, args, options, fetch);
}

export function useCountGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalContentVideoFrameCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/count`, args, options, fetch);
}

export function useSuspenseCountGlobalContentVideoFrame<TArgs extends Prisma.GlobalContentVideoFrameCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalContentVideoFrameCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentVideoFrameCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/count`, args, options, fetch);
}

export function useCheckGlobalContentVideoFrame<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; sourceUri?: string; height?: number; width?: number; contentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalContentVideoFrame', `${endpoint}/globalContentVideoFrame/check`, args, options, fetch);
}
