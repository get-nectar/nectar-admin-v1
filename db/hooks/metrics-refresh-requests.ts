/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MetricsRefreshRequests } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMetricsRefreshRequests(options?: Omit<(UseMutationOptions<(MetricsRefreshRequests | undefined), DefaultError, Prisma.MetricsRefreshRequestsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsCreateArgs, DefaultError, MetricsRefreshRequests, true>('MetricsRefreshRequests', 'POST', `${endpoint}/metricsRefreshRequests/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMetricsRefreshRequests(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MetricsRefreshRequestsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MetricsRefreshRequests', 'POST', `${endpoint}/metricsRefreshRequests/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindManyArgs, TQueryFnData = Array<Prisma.MetricsRefreshRequestsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindManyArgs, TQueryFnData = Array<Prisma.MetricsRefreshRequestsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindManyArgs, TQueryFnData = Array<Prisma.MetricsRefreshRequestsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindManyArgs, TQueryFnData = Array<Prisma.MetricsRefreshRequestsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findMany`, args, options, fetch);
}

export function useFindUniqueMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindUniqueArgs, TQueryFnData = Prisma.MetricsRefreshRequestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindUniqueArgs, TQueryFnData = Prisma.MetricsRefreshRequestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findUnique`, args, options, fetch);
}

export function useFindFirstMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindFirstArgs, TQueryFnData = Prisma.MetricsRefreshRequestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsFindFirstArgs, TQueryFnData = Prisma.MetricsRefreshRequestsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/findFirst`, args, options, fetch);
}

export function useUpdateMetricsRefreshRequests(options?: Omit<(UseMutationOptions<(MetricsRefreshRequests | undefined), DefaultError, Prisma.MetricsRefreshRequestsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsUpdateArgs, DefaultError, MetricsRefreshRequests, true>('MetricsRefreshRequests', 'PUT', `${endpoint}/metricsRefreshRequests/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMetricsRefreshRequests(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MetricsRefreshRequestsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MetricsRefreshRequests', 'PUT', `${endpoint}/metricsRefreshRequests/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMetricsRefreshRequests(options?: Omit<(UseMutationOptions<(MetricsRefreshRequests | undefined), DefaultError, Prisma.MetricsRefreshRequestsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsUpsertArgs, DefaultError, MetricsRefreshRequests, true>('MetricsRefreshRequests', 'POST', `${endpoint}/metricsRefreshRequests/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMetricsRefreshRequests(options?: Omit<(UseMutationOptions<(MetricsRefreshRequests | undefined), DefaultError, Prisma.MetricsRefreshRequestsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsDeleteArgs, DefaultError, MetricsRefreshRequests, true>('MetricsRefreshRequests', 'DELETE', `${endpoint}/metricsRefreshRequests/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MetricsRefreshRequests, Prisma.MetricsRefreshRequestsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMetricsRefreshRequests(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MetricsRefreshRequestsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MetricsRefreshRequestsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MetricsRefreshRequests', 'DELETE', `${endpoint}/metricsRefreshRequests/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MetricsRefreshRequestsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MetricsRefreshRequestsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsAggregateArgs, TQueryFnData = Prisma.GetMetricsRefreshRequestsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsAggregateArgs, TQueryFnData = Prisma.GetMetricsRefreshRequestsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/aggregate`, args, options, fetch);
}

export function useGroupByMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MetricsRefreshRequestsGroupByArgs['orderBy'] } : { orderBy?: Prisma.MetricsRefreshRequestsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MetricsRefreshRequestsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MetricsRefreshRequestsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MetricsRefreshRequestsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MetricsRefreshRequestsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MetricsRefreshRequestsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MetricsRefreshRequestsGroupByArgs['orderBy'] } : { orderBy?: Prisma.MetricsRefreshRequestsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MetricsRefreshRequestsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MetricsRefreshRequestsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MetricsRefreshRequestsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MetricsRefreshRequestsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MetricsRefreshRequestsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/groupBy`, args, options, fetch);
}

export function useCountMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MetricsRefreshRequestsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/count`, args, options, fetch);
}

export function useSuspenseCountMetricsRefreshRequests<TArgs extends Prisma.MetricsRefreshRequestsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MetricsRefreshRequestsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MetricsRefreshRequestsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/count`, args, options, fetch);
}
import type { MetricsRefreshRequestEntityType } from '@prisma/client';

export function useCheckMetricsRefreshRequests<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; workspaceUserId?: string; entityType?: MetricsRefreshRequestEntityType }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MetricsRefreshRequests', `${endpoint}/metricsRefreshRequests/check`, args, options, fetch);
}
