/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, FacebookModerationConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateFacebookModerationConfig(options?: Omit<(UseMutationOptions<(FacebookModerationConfig | undefined), DefaultError, Prisma.FacebookModerationConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigCreateArgs, DefaultError, FacebookModerationConfig, true>('FacebookModerationConfig', 'POST', `${endpoint}/facebookModerationConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyFacebookModerationConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookModerationConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookModerationConfig', 'POST', `${endpoint}/facebookModerationConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.FacebookModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.FacebookModerationConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.FacebookModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.FacebookModerationConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findMany`, args, options, fetch);
}

export function useFindUniqueFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindUniqueArgs, TQueryFnData = Prisma.FacebookModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindUniqueArgs, TQueryFnData = Prisma.FacebookModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findUnique`, args, options, fetch);
}

export function useFindFirstFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindFirstArgs, TQueryFnData = Prisma.FacebookModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigFindFirstArgs, TQueryFnData = Prisma.FacebookModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/findFirst`, args, options, fetch);
}

export function useUpdateFacebookModerationConfig(options?: Omit<(UseMutationOptions<(FacebookModerationConfig | undefined), DefaultError, Prisma.FacebookModerationConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigUpdateArgs, DefaultError, FacebookModerationConfig, true>('FacebookModerationConfig', 'PUT', `${endpoint}/facebookModerationConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyFacebookModerationConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookModerationConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookModerationConfig', 'PUT', `${endpoint}/facebookModerationConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertFacebookModerationConfig(options?: Omit<(UseMutationOptions<(FacebookModerationConfig | undefined), DefaultError, Prisma.FacebookModerationConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigUpsertArgs, DefaultError, FacebookModerationConfig, true>('FacebookModerationConfig', 'POST', `${endpoint}/facebookModerationConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteFacebookModerationConfig(options?: Omit<(UseMutationOptions<(FacebookModerationConfig | undefined), DefaultError, Prisma.FacebookModerationConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigDeleteArgs, DefaultError, FacebookModerationConfig, true>('FacebookModerationConfig', 'DELETE', `${endpoint}/facebookModerationConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookModerationConfig, Prisma.FacebookModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyFacebookModerationConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookModerationConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookModerationConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookModerationConfig', 'DELETE', `${endpoint}/facebookModerationConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookModerationConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookModerationConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookModerationConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigAggregateArgs, TQueryFnData = Prisma.GetFacebookModerationConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigAggregateArgs, TQueryFnData = Prisma.GetFacebookModerationConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/aggregate`, args, options, fetch);
}

export function useGroupByFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookModerationConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookModerationConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookModerationConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookModerationConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookModerationConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookModerationConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookModerationConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookModerationConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookModerationConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookModerationConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookModerationConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookModerationConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookModerationConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookModerationConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/groupBy`, args, options, fetch);
}

export function useCountFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookModerationConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/count`, args, options, fetch);
}

export function useSuspenseCountFacebookModerationConfig<TArgs extends Prisma.FacebookModerationConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookModerationConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookModerationConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/count`, args, options, fetch);
}

export function useCheckFacebookModerationConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isEnabled?: boolean; isKeywordsPreferenceActive?: boolean; keywords?: string; isAIBasedIntentDetectionPreferenceActive?: boolean; intents?: string; facebookPageAccountId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('FacebookModerationConfig', `${endpoint}/facebookModerationConfig/check`, args, options, fetch);
}
