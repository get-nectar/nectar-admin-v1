/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, SearchQueryTrackerToAccounts } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateSearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<(SearchQueryTrackerToAccounts | undefined), DefaultError, Prisma.SearchQueryTrackerToAccountsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsCreateArgs, DefaultError, SearchQueryTrackerToAccounts, true>('SearchQueryTrackerToAccounts', 'POST', `${endpoint}/searchQueryTrackerToAccounts/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SearchQueryTrackerToAccountsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('SearchQueryTrackerToAccounts', 'POST', `${endpoint}/searchQueryTrackerToAccounts/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findMany`, args, options, fetch);
}

export function useInfiniteFindManySearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findMany`, args, options, fetch);
}

export function useSuspenseFindManySearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManySearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findMany`, args, options, fetch);
}

export function useFindUniqueSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindUniqueArgs, TQueryFnData = Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindUniqueArgs, TQueryFnData = Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findUnique`, args, options, fetch);
}

export function useFindFirstSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindFirstArgs, TQueryFnData = Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsFindFirstArgs, TQueryFnData = Prisma.SearchQueryTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/findFirst`, args, options, fetch);
}

export function useUpdateSearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<(SearchQueryTrackerToAccounts | undefined), DefaultError, Prisma.SearchQueryTrackerToAccountsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsUpdateArgs, DefaultError, SearchQueryTrackerToAccounts, true>('SearchQueryTrackerToAccounts', 'PUT', `${endpoint}/searchQueryTrackerToAccounts/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SearchQueryTrackerToAccountsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('SearchQueryTrackerToAccounts', 'PUT', `${endpoint}/searchQueryTrackerToAccounts/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<(SearchQueryTrackerToAccounts | undefined), DefaultError, Prisma.SearchQueryTrackerToAccountsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsUpsertArgs, DefaultError, SearchQueryTrackerToAccounts, true>('SearchQueryTrackerToAccounts', 'POST', `${endpoint}/searchQueryTrackerToAccounts/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<(SearchQueryTrackerToAccounts | undefined), DefaultError, Prisma.SearchQueryTrackerToAccountsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsDeleteArgs, DefaultError, SearchQueryTrackerToAccounts, true>('SearchQueryTrackerToAccounts', 'DELETE', `${endpoint}/searchQueryTrackerToAccounts/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SearchQueryTrackerToAccounts, Prisma.SearchQueryTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySearchQueryTrackerToAccounts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SearchQueryTrackerToAccountsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SearchQueryTrackerToAccountsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('SearchQueryTrackerToAccounts', 'DELETE', `${endpoint}/searchQueryTrackerToAccounts/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SearchQueryTrackerToAccountsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SearchQueryTrackerToAccountsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsAggregateArgs, TQueryFnData = Prisma.GetSearchQueryTrackerToAccountsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsAggregateArgs, TQueryFnData = Prisma.GetSearchQueryTrackerToAccountsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/aggregate`, args, options, fetch);
}

export function useGroupBySearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SearchQueryTrackerToAccountsGroupByArgs['orderBy'] } : { orderBy?: Prisma.SearchQueryTrackerToAccountsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SearchQueryTrackerToAccountsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SearchQueryTrackerToAccountsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SearchQueryTrackerToAccountsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SearchQueryTrackerToAccountsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SearchQueryTrackerToAccountsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBySearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SearchQueryTrackerToAccountsGroupByArgs['orderBy'] } : { orderBy?: Prisma.SearchQueryTrackerToAccountsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SearchQueryTrackerToAccountsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SearchQueryTrackerToAccountsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SearchQueryTrackerToAccountsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SearchQueryTrackerToAccountsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SearchQueryTrackerToAccountsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/groupBy`, args, options, fetch);
}

export function useCountSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SearchQueryTrackerToAccountsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/count`, args, options, fetch);
}

export function useSuspenseCountSearchQueryTrackerToAccounts<TArgs extends Prisma.SearchQueryTrackerToAccountsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SearchQueryTrackerToAccountsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SearchQueryTrackerToAccountsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/count`, args, options, fetch);
}
import type { SearchQueryTrackerPriority, SearchQueryAccountTrackerStatus, SearchQueryTrackerSource } from '@prisma/client';

export function useCheckSearchQueryTrackerToAccounts<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; searchQueryTrackerId?: string; tiktokAccountId?: string; instagramAccountId?: string; priority?: SearchQueryTrackerPriority; status?: SearchQueryAccountTrackerStatus; source?: SearchQueryTrackerSource }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('SearchQueryTrackerToAccounts', `${endpoint}/searchQueryTrackerToAccounts/check`, args, options, fetch);
}
