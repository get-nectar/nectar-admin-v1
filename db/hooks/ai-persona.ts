/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AiPersona } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAiPersona(options?: Omit<(UseMutationOptions<(AiPersona | undefined), DefaultError, Prisma.AiPersonaCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaCreateArgs, DefaultError, AiPersona, true>('AiPersona', 'POST', `${endpoint}/aiPersona/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAiPersona(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AiPersonaCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AiPersona', 'POST', `${endpoint}/aiPersona/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAiPersona<TArgs extends Prisma.AiPersonaFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAiPersona<TArgs extends Prisma.AiPersonaFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAiPersona<TArgs extends Prisma.AiPersonaFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAiPersona<TArgs extends Prisma.AiPersonaFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findMany`, args, options, fetch);
}

export function useFindUniqueAiPersona<TArgs extends Prisma.AiPersonaFindUniqueArgs, TQueryFnData = Prisma.AiPersonaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAiPersona<TArgs extends Prisma.AiPersonaFindUniqueArgs, TQueryFnData = Prisma.AiPersonaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findUnique`, args, options, fetch);
}

export function useFindFirstAiPersona<TArgs extends Prisma.AiPersonaFindFirstArgs, TQueryFnData = Prisma.AiPersonaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAiPersona<TArgs extends Prisma.AiPersonaFindFirstArgs, TQueryFnData = Prisma.AiPersonaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/findFirst`, args, options, fetch);
}

export function useUpdateAiPersona(options?: Omit<(UseMutationOptions<(AiPersona | undefined), DefaultError, Prisma.AiPersonaUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaUpdateArgs, DefaultError, AiPersona, true>('AiPersona', 'PUT', `${endpoint}/aiPersona/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAiPersona(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AiPersonaUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AiPersona', 'PUT', `${endpoint}/aiPersona/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAiPersona(options?: Omit<(UseMutationOptions<(AiPersona | undefined), DefaultError, Prisma.AiPersonaUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaUpsertArgs, DefaultError, AiPersona, true>('AiPersona', 'POST', `${endpoint}/aiPersona/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAiPersona(options?: Omit<(UseMutationOptions<(AiPersona | undefined), DefaultError, Prisma.AiPersonaDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaDeleteArgs, DefaultError, AiPersona, true>('AiPersona', 'DELETE', `${endpoint}/aiPersona/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersona, Prisma.AiPersonaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAiPersona(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AiPersonaDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AiPersona', 'DELETE', `${endpoint}/aiPersona/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAiPersona<TArgs extends Prisma.AiPersonaAggregateArgs, TQueryFnData = Prisma.GetAiPersonaAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAiPersona<TArgs extends Prisma.AiPersonaAggregateArgs, TQueryFnData = Prisma.GetAiPersonaAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/aggregate`, args, options, fetch);
}

export function useGroupByAiPersona<TArgs extends Prisma.AiPersonaGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AiPersonaGroupByArgs['orderBy'] } : { orderBy?: Prisma.AiPersonaGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AiPersonaGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AiPersonaGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AiPersonaGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAiPersona<TArgs extends Prisma.AiPersonaGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AiPersonaGroupByArgs['orderBy'] } : { orderBy?: Prisma.AiPersonaGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AiPersonaGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AiPersonaGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AiPersonaGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/groupBy`, args, options, fetch);
}

export function useCountAiPersona<TArgs extends Prisma.AiPersonaCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AiPersonaCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/count`, args, options, fetch);
}

export function useSuspenseCountAiPersona<TArgs extends Prisma.AiPersonaCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AiPersonaCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersona', `${endpoint}/aiPersona/count`, args, options, fetch);
}
import type { Gender, EmojiCount } from '@prisma/client';

export function useCheckAiPersona<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; avatar?: string; name?: string; brandSummary?: string; gender?: Gender; age?: number; cityLocation?: string; description?: string; whitelistedEmojis?: string; maxAllowedEmojiCount?: EmojiCount; blockedContent?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AiPersona', `${endpoint}/aiPersona/check`, args, options, fetch);
}
