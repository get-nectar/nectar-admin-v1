/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AiPersonaEscalationSetting } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<(AiPersonaEscalationSetting | undefined), DefaultError, Prisma.AiPersonaEscalationSettingCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingCreateArgs, DefaultError, AiPersonaEscalationSetting, true>('AiPersonaEscalationSetting', 'POST', `${endpoint}/aiPersonaEscalationSetting/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AiPersonaEscalationSettingCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AiPersonaEscalationSetting', 'POST', `${endpoint}/aiPersonaEscalationSetting/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaEscalationSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.AiPersonaEscalationSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findMany`, args, options, fetch);
}

export function useFindUniqueAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindUniqueArgs, TQueryFnData = Prisma.AiPersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindUniqueArgs, TQueryFnData = Prisma.AiPersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findUnique`, args, options, fetch);
}

export function useFindFirstAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindFirstArgs, TQueryFnData = Prisma.AiPersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingFindFirstArgs, TQueryFnData = Prisma.AiPersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/findFirst`, args, options, fetch);
}

export function useUpdateAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<(AiPersonaEscalationSetting | undefined), DefaultError, Prisma.AiPersonaEscalationSettingUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingUpdateArgs, DefaultError, AiPersonaEscalationSetting, true>('AiPersonaEscalationSetting', 'PUT', `${endpoint}/aiPersonaEscalationSetting/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AiPersonaEscalationSettingUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AiPersonaEscalationSetting', 'PUT', `${endpoint}/aiPersonaEscalationSetting/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<(AiPersonaEscalationSetting | undefined), DefaultError, Prisma.AiPersonaEscalationSettingUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingUpsertArgs, DefaultError, AiPersonaEscalationSetting, true>('AiPersonaEscalationSetting', 'POST', `${endpoint}/aiPersonaEscalationSetting/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<(AiPersonaEscalationSetting | undefined), DefaultError, Prisma.AiPersonaEscalationSettingDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingDeleteArgs, DefaultError, AiPersonaEscalationSetting, true>('AiPersonaEscalationSetting', 'DELETE', `${endpoint}/aiPersonaEscalationSetting/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AiPersonaEscalationSetting, Prisma.AiPersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAiPersonaEscalationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AiPersonaEscalationSettingDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AiPersonaEscalationSettingDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AiPersonaEscalationSetting', 'DELETE', `${endpoint}/aiPersonaEscalationSetting/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AiPersonaEscalationSettingDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AiPersonaEscalationSettingDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingAggregateArgs, TQueryFnData = Prisma.GetAiPersonaEscalationSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingAggregateArgs, TQueryFnData = Prisma.GetAiPersonaEscalationSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/aggregate`, args, options, fetch);
}

export function useGroupByAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AiPersonaEscalationSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.AiPersonaEscalationSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AiPersonaEscalationSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AiPersonaEscalationSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaEscalationSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaEscalationSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AiPersonaEscalationSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AiPersonaEscalationSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.AiPersonaEscalationSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AiPersonaEscalationSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AiPersonaEscalationSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaEscalationSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AiPersonaEscalationSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AiPersonaEscalationSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/groupBy`, args, options, fetch);
}

export function useCountAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AiPersonaEscalationSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/count`, args, options, fetch);
}

export function useSuspenseCountAiPersonaEscalationSetting<TArgs extends Prisma.AiPersonaEscalationSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AiPersonaEscalationSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AiPersonaEscalationSettingCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/count`, args, options, fetch);
}
import type { PersonaEscalationOption } from '@prisma/client';

export function useCheckAiPersonaEscalationSetting<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isEnabled?: boolean; personaConfigId?: string; escalationOptions?: PersonaEscalationOption; keywords?: string; instructionsEnabled?: boolean; instructions?: string; assigneeId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AiPersonaEscalationSetting', `${endpoint}/aiPersonaEscalationSetting/check`, args, options, fetch);
}
