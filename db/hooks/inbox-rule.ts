/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InboxRule } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInboxRule(options?: Omit<(UseMutationOptions<(InboxRule | undefined), DefaultError, Prisma.InboxRuleCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleCreateArgs, DefaultError, InboxRule, true>('InboxRule', 'POST', `${endpoint}/inboxRule/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInboxRule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxRuleCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxRule', 'POST', `${endpoint}/inboxRule/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInboxRule<TArgs extends Prisma.InboxRuleFindManyArgs, TQueryFnData = Array<Prisma.InboxRuleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInboxRule<TArgs extends Prisma.InboxRuleFindManyArgs, TQueryFnData = Array<Prisma.InboxRuleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInboxRule<TArgs extends Prisma.InboxRuleFindManyArgs, TQueryFnData = Array<Prisma.InboxRuleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInboxRule<TArgs extends Prisma.InboxRuleFindManyArgs, TQueryFnData = Array<Prisma.InboxRuleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findMany`, args, options, fetch);
}

export function useFindUniqueInboxRule<TArgs extends Prisma.InboxRuleFindUniqueArgs, TQueryFnData = Prisma.InboxRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInboxRule<TArgs extends Prisma.InboxRuleFindUniqueArgs, TQueryFnData = Prisma.InboxRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findUnique`, args, options, fetch);
}

export function useFindFirstInboxRule<TArgs extends Prisma.InboxRuleFindFirstArgs, TQueryFnData = Prisma.InboxRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInboxRule<TArgs extends Prisma.InboxRuleFindFirstArgs, TQueryFnData = Prisma.InboxRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/findFirst`, args, options, fetch);
}

export function useUpdateInboxRule(options?: Omit<(UseMutationOptions<(InboxRule | undefined), DefaultError, Prisma.InboxRuleUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleUpdateArgs, DefaultError, InboxRule, true>('InboxRule', 'PUT', `${endpoint}/inboxRule/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInboxRule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxRuleUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxRule', 'PUT', `${endpoint}/inboxRule/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInboxRule(options?: Omit<(UseMutationOptions<(InboxRule | undefined), DefaultError, Prisma.InboxRuleUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleUpsertArgs, DefaultError, InboxRule, true>('InboxRule', 'POST', `${endpoint}/inboxRule/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInboxRule(options?: Omit<(UseMutationOptions<(InboxRule | undefined), DefaultError, Prisma.InboxRuleDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleDeleteArgs, DefaultError, InboxRule, true>('InboxRule', 'DELETE', `${endpoint}/inboxRule/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxRule, Prisma.InboxRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInboxRule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxRuleDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxRuleDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxRule', 'DELETE', `${endpoint}/inboxRule/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxRuleDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxRuleDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxRuleDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInboxRule<TArgs extends Prisma.InboxRuleAggregateArgs, TQueryFnData = Prisma.GetInboxRuleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxRuleAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInboxRule<TArgs extends Prisma.InboxRuleAggregateArgs, TQueryFnData = Prisma.GetInboxRuleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxRuleAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/aggregate`, args, options, fetch);
}

export function useGroupByInboxRule<TArgs extends Prisma.InboxRuleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxRuleGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxRuleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxRuleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxRuleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxRuleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxRuleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxRuleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInboxRule<TArgs extends Prisma.InboxRuleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxRuleGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxRuleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxRuleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxRuleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxRuleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxRuleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxRuleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/groupBy`, args, options, fetch);
}

export function useCountInboxRule<TArgs extends Prisma.InboxRuleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxRuleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/count`, args, options, fetch);
}

export function useSuspenseCountInboxRule<TArgs extends Prisma.InboxRuleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxRuleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxRuleCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxRule', `${endpoint}/inboxRule/count`, args, options, fetch);
}
import type { TriggerScope, TriggerReplyCondition, InboxRuleStatus } from '@prisma/client';

export function useCheckInboxRule<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; createdById?: string; lastUpdatedById?: string; workspaceId?: string; scope?: TriggerScope; replyCondition?: TriggerReplyCondition; triggerWords?: string; triggerIntents?: string; additionalConditionsUniqueHash?: string; name?: string; status?: InboxRuleStatus; processedMessages?: number; processedComments?: number; facebookPageAccountId?: string; instagramAccountId?: string; previewSessionId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InboxRule', `${endpoint}/inboxRule/check`, args, options, fetch);
}
