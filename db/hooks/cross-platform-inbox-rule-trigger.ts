/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CrossPlatformInboxRuleTrigger } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<(CrossPlatformInboxRuleTrigger | undefined), DefaultError, Prisma.CrossPlatformInboxRuleTriggerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerCreateArgs, DefaultError, CrossPlatformInboxRuleTrigger, true>('CrossPlatformInboxRuleTrigger', 'POST', `${endpoint}/crossPlatformInboxRuleTrigger/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CrossPlatformInboxRuleTriggerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CrossPlatformInboxRuleTrigger', 'POST', `${endpoint}/crossPlatformInboxRuleTrigger/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useFindUniqueCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindUniqueArgs, TQueryFnData = Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindUniqueArgs, TQueryFnData = Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findUnique`, args, options, fetch);
}

export function useFindFirstCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindFirstArgs, TQueryFnData = Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerFindFirstArgs, TQueryFnData = Prisma.CrossPlatformInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/findFirst`, args, options, fetch);
}

export function useUpdateCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<(CrossPlatformInboxRuleTrigger | undefined), DefaultError, Prisma.CrossPlatformInboxRuleTriggerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerUpdateArgs, DefaultError, CrossPlatformInboxRuleTrigger, true>('CrossPlatformInboxRuleTrigger', 'PUT', `${endpoint}/crossPlatformInboxRuleTrigger/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CrossPlatformInboxRuleTriggerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CrossPlatformInboxRuleTrigger', 'PUT', `${endpoint}/crossPlatformInboxRuleTrigger/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<(CrossPlatformInboxRuleTrigger | undefined), DefaultError, Prisma.CrossPlatformInboxRuleTriggerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerUpsertArgs, DefaultError, CrossPlatformInboxRuleTrigger, true>('CrossPlatformInboxRuleTrigger', 'POST', `${endpoint}/crossPlatformInboxRuleTrigger/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<(CrossPlatformInboxRuleTrigger | undefined), DefaultError, Prisma.CrossPlatformInboxRuleTriggerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerDeleteArgs, DefaultError, CrossPlatformInboxRuleTrigger, true>('CrossPlatformInboxRuleTrigger', 'DELETE', `${endpoint}/crossPlatformInboxRuleTrigger/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CrossPlatformInboxRuleTrigger, Prisma.CrossPlatformInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCrossPlatformInboxRuleTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CrossPlatformInboxRuleTriggerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CrossPlatformInboxRuleTriggerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CrossPlatformInboxRuleTrigger', 'DELETE', `${endpoint}/crossPlatformInboxRuleTrigger/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CrossPlatformInboxRuleTriggerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CrossPlatformInboxRuleTriggerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerAggregateArgs, TQueryFnData = Prisma.GetCrossPlatformInboxRuleTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerAggregateArgs, TQueryFnData = Prisma.GetCrossPlatformInboxRuleTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/aggregate`, args, options, fetch);
}

export function useGroupByCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CrossPlatformInboxRuleTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.CrossPlatformInboxRuleTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CrossPlatformInboxRuleTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CrossPlatformInboxRuleTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.CrossPlatformInboxRuleTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CrossPlatformInboxRuleTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CrossPlatformInboxRuleTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/groupBy`, args, options, fetch);
}

export function useCountCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CrossPlatformInboxRuleTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/count`, args, options, fetch);
}

export function useSuspenseCountCrossPlatformInboxRuleTrigger<TArgs extends Prisma.CrossPlatformInboxRuleTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CrossPlatformInboxRuleTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CrossPlatformInboxRuleTriggerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/count`, args, options, fetch);
}
import type { CrossPlatformTriggerEvent } from '@prisma/client';

export function useCheckCrossPlatformInboxRuleTrigger<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; event?: CrossPlatformTriggerEvent; inboxRuleTriggerId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CrossPlatformInboxRuleTrigger', `${endpoint}/crossPlatformInboxRuleTrigger/check`, args, options, fetch);
}
