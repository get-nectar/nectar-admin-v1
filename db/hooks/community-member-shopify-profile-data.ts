/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityMemberShopifyProfileData } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberShopifyProfileData | undefined), DefaultError, Prisma.CommunityMemberShopifyProfileDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataCreateArgs, DefaultError, CommunityMemberShopifyProfileData, true>('CommunityMemberShopifyProfileData', 'POST', `${endpoint}/communityMemberShopifyProfileData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberShopifyProfileDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberShopifyProfileData', 'POST', `${endpoint}/communityMemberShopifyProfileData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberShopifyProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/findFirst`, args, options, fetch);
}

export function useUpdateCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberShopifyProfileData | undefined), DefaultError, Prisma.CommunityMemberShopifyProfileDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataUpdateArgs, DefaultError, CommunityMemberShopifyProfileData, true>('CommunityMemberShopifyProfileData', 'PUT', `${endpoint}/communityMemberShopifyProfileData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberShopifyProfileDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberShopifyProfileData', 'PUT', `${endpoint}/communityMemberShopifyProfileData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberShopifyProfileData | undefined), DefaultError, Prisma.CommunityMemberShopifyProfileDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataUpsertArgs, DefaultError, CommunityMemberShopifyProfileData, true>('CommunityMemberShopifyProfileData', 'POST', `${endpoint}/communityMemberShopifyProfileData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberShopifyProfileData | undefined), DefaultError, Prisma.CommunityMemberShopifyProfileDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataDeleteArgs, DefaultError, CommunityMemberShopifyProfileData, true>('CommunityMemberShopifyProfileData', 'DELETE', `${endpoint}/communityMemberShopifyProfileData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberShopifyProfileData, Prisma.CommunityMemberShopifyProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityMemberShopifyProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberShopifyProfileDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberShopifyProfileDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberShopifyProfileData', 'DELETE', `${endpoint}/communityMemberShopifyProfileData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberShopifyProfileDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberShopifyProfileDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberShopifyProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberShopifyProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/aggregate`, args, options, fetch);
}

export function useGroupByCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberShopifyProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberShopifyProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberShopifyProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberShopifyProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberShopifyProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberShopifyProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberShopifyProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberShopifyProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberShopifyProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberShopifyProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberShopifyProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberShopifyProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberShopifyProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberShopifyProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/groupBy`, args, options, fetch);
}

export function useCountCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberShopifyProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/count`, args, options, fetch);
}

export function useSuspenseCountCommunityMemberShopifyProfileData<TArgs extends Prisma.CommunityMemberShopifyProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberShopifyProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberShopifyProfileDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckCommunityMemberShopifyProfileData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; pixelClientId?: string; shopifyStoreId?: string; shopifyCustomerId?: string; firstName?: string; lastName?: string; email?: string; phone?: string; totalOrderCount?: number; currencyCode?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityMemberShopifyProfileData', `${endpoint}/communityMemberShopifyProfileData/check`, args, options, fetch);
}
