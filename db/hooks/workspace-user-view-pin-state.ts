/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkspaceUserViewPinState } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<(WorkspaceUserViewPinState | undefined), DefaultError, Prisma.WorkspaceUserViewPinStateCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateCreateArgs, DefaultError, WorkspaceUserViewPinState, true>('WorkspaceUserViewPinState', 'POST', `${endpoint}/workspaceUserViewPinState/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserViewPinStateCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserViewPinState', 'POST', `${endpoint}/workspaceUserViewPinState/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserViewPinStateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserViewPinStateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserViewPinStateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserViewPinStateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findMany`, args, options, fetch);
}

export function useFindUniqueWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserViewPinStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserViewPinStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findUnique`, args, options, fetch);
}

export function useFindFirstWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserViewPinStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserViewPinStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/findFirst`, args, options, fetch);
}

export function useUpdateWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<(WorkspaceUserViewPinState | undefined), DefaultError, Prisma.WorkspaceUserViewPinStateUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateUpdateArgs, DefaultError, WorkspaceUserViewPinState, true>('WorkspaceUserViewPinState', 'PUT', `${endpoint}/workspaceUserViewPinState/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserViewPinStateUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserViewPinState', 'PUT', `${endpoint}/workspaceUserViewPinState/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<(WorkspaceUserViewPinState | undefined), DefaultError, Prisma.WorkspaceUserViewPinStateUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateUpsertArgs, DefaultError, WorkspaceUserViewPinState, true>('WorkspaceUserViewPinState', 'POST', `${endpoint}/workspaceUserViewPinState/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<(WorkspaceUserViewPinState | undefined), DefaultError, Prisma.WorkspaceUserViewPinStateDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateDeleteArgs, DefaultError, WorkspaceUserViewPinState, true>('WorkspaceUserViewPinState', 'DELETE', `${endpoint}/workspaceUserViewPinState/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserViewPinState, Prisma.WorkspaceUserViewPinStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkspaceUserViewPinState(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserViewPinStateDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserViewPinStateDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserViewPinState', 'DELETE', `${endpoint}/workspaceUserViewPinState/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserViewPinStateDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserViewPinStateDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserViewPinStateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserViewPinStateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/aggregate`, args, options, fetch);
}

export function useGroupByWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserViewPinStateGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserViewPinStateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserViewPinStateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserViewPinStateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserViewPinStateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserViewPinStateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserViewPinStateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserViewPinStateGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserViewPinStateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserViewPinStateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserViewPinStateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserViewPinStateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserViewPinStateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserViewPinStateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/groupBy`, args, options, fetch);
}

export function useCountWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserViewPinStateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/count`, args, options, fetch);
}

export function useSuspenseCountWorkspaceUserViewPinState<TArgs extends Prisma.WorkspaceUserViewPinStateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserViewPinStateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserViewPinStateCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/count`, args, options, fetch);
}

export function useCheckWorkspaceUserViewPinState<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isPinned?: boolean; viewId?: string; workspaceUserId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkspaceUserViewPinState', `${endpoint}/workspaceUserViewPinState/check`, args, options, fetch);
}
