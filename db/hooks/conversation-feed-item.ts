/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ConversationFeedItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateConversationFeedItem(options?: Omit<(UseMutationOptions<(ConversationFeedItem | undefined), DefaultError, Prisma.ConversationFeedItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemCreateArgs, DefaultError, ConversationFeedItem, true>('ConversationFeedItem', 'POST', `${endpoint}/conversationFeedItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyConversationFeedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationFeedItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationFeedItem', 'POST', `${endpoint}/conversationFeedItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindManyArgs, TQueryFnData = Array<Prisma.ConversationFeedItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindManyArgs, TQueryFnData = Array<Prisma.ConversationFeedItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindManyArgs, TQueryFnData = Array<Prisma.ConversationFeedItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindManyArgs, TQueryFnData = Array<Prisma.ConversationFeedItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findMany`, args, options, fetch);
}

export function useFindUniqueConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindUniqueArgs, TQueryFnData = Prisma.ConversationFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindUniqueArgs, TQueryFnData = Prisma.ConversationFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findUnique`, args, options, fetch);
}

export function useFindFirstConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindFirstArgs, TQueryFnData = Prisma.ConversationFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstConversationFeedItem<TArgs extends Prisma.ConversationFeedItemFindFirstArgs, TQueryFnData = Prisma.ConversationFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/findFirst`, args, options, fetch);
}

export function useUpdateConversationFeedItem(options?: Omit<(UseMutationOptions<(ConversationFeedItem | undefined), DefaultError, Prisma.ConversationFeedItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemUpdateArgs, DefaultError, ConversationFeedItem, true>('ConversationFeedItem', 'PUT', `${endpoint}/conversationFeedItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyConversationFeedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationFeedItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationFeedItem', 'PUT', `${endpoint}/conversationFeedItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertConversationFeedItem(options?: Omit<(UseMutationOptions<(ConversationFeedItem | undefined), DefaultError, Prisma.ConversationFeedItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemUpsertArgs, DefaultError, ConversationFeedItem, true>('ConversationFeedItem', 'POST', `${endpoint}/conversationFeedItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteConversationFeedItem(options?: Omit<(UseMutationOptions<(ConversationFeedItem | undefined), DefaultError, Prisma.ConversationFeedItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemDeleteArgs, DefaultError, ConversationFeedItem, true>('ConversationFeedItem', 'DELETE', `${endpoint}/conversationFeedItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationFeedItem, Prisma.ConversationFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyConversationFeedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationFeedItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationFeedItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationFeedItem', 'DELETE', `${endpoint}/conversationFeedItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationFeedItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationFeedItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationFeedItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateConversationFeedItem<TArgs extends Prisma.ConversationFeedItemAggregateArgs, TQueryFnData = Prisma.GetConversationFeedItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateConversationFeedItem<TArgs extends Prisma.ConversationFeedItemAggregateArgs, TQueryFnData = Prisma.GetConversationFeedItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/aggregate`, args, options, fetch);
}

export function useGroupByConversationFeedItem<TArgs extends Prisma.ConversationFeedItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationFeedItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationFeedItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationFeedItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationFeedItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationFeedItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationFeedItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationFeedItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByConversationFeedItem<TArgs extends Prisma.ConversationFeedItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationFeedItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationFeedItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationFeedItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationFeedItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationFeedItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationFeedItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationFeedItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/groupBy`, args, options, fetch);
}

export function useCountConversationFeedItem<TArgs extends Prisma.ConversationFeedItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationFeedItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/count`, args, options, fetch);
}

export function useSuspenseCountConversationFeedItem<TArgs extends Prisma.ConversationFeedItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationFeedItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationFeedItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/count`, args, options, fetch);
}

export function useCheckConversationFeedItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; conversationId?: string; messageId?: string; noteId?: string; eventActivityId?: string; draftAIGeneratedMessageId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ConversationFeedItem', `${endpoint}/conversationFeedItem/check`, args, options, fetch);
}
