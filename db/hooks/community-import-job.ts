/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityImportJob } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityImportJob(options?: Omit<(UseMutationOptions<(CommunityImportJob | undefined), DefaultError, Prisma.CommunityImportJobCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobCreateArgs, DefaultError, CommunityImportJob, true>('CommunityImportJob', 'POST', `${endpoint}/communityImportJob/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityImportJob(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityImportJobCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityImportJob', 'POST', `${endpoint}/communityImportJob/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindManyArgs, TQueryFnData = Array<Prisma.CommunityImportJobGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindManyArgs, TQueryFnData = Array<Prisma.CommunityImportJobGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindManyArgs, TQueryFnData = Array<Prisma.CommunityImportJobGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindManyArgs, TQueryFnData = Array<Prisma.CommunityImportJobGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindUniqueArgs, TQueryFnData = Prisma.CommunityImportJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindUniqueArgs, TQueryFnData = Prisma.CommunityImportJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindFirstArgs, TQueryFnData = Prisma.CommunityImportJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityImportJob<TArgs extends Prisma.CommunityImportJobFindFirstArgs, TQueryFnData = Prisma.CommunityImportJobGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/findFirst`, args, options, fetch);
}

export function useUpdateCommunityImportJob(options?: Omit<(UseMutationOptions<(CommunityImportJob | undefined), DefaultError, Prisma.CommunityImportJobUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobUpdateArgs, DefaultError, CommunityImportJob, true>('CommunityImportJob', 'PUT', `${endpoint}/communityImportJob/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityImportJob(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityImportJobUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityImportJob', 'PUT', `${endpoint}/communityImportJob/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityImportJob(options?: Omit<(UseMutationOptions<(CommunityImportJob | undefined), DefaultError, Prisma.CommunityImportJobUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobUpsertArgs, DefaultError, CommunityImportJob, true>('CommunityImportJob', 'POST', `${endpoint}/communityImportJob/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityImportJob(options?: Omit<(UseMutationOptions<(CommunityImportJob | undefined), DefaultError, Prisma.CommunityImportJobDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobDeleteArgs, DefaultError, CommunityImportJob, true>('CommunityImportJob', 'DELETE', `${endpoint}/communityImportJob/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityImportJob, Prisma.CommunityImportJobGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityImportJob(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityImportJobDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityImportJobDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityImportJob', 'DELETE', `${endpoint}/communityImportJob/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityImportJobDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityImportJobDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityImportJobDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityImportJob<TArgs extends Prisma.CommunityImportJobAggregateArgs, TQueryFnData = Prisma.GetCommunityImportJobAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityImportJob<TArgs extends Prisma.CommunityImportJobAggregateArgs, TQueryFnData = Prisma.GetCommunityImportJobAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/aggregate`, args, options, fetch);
}

export function useGroupByCommunityImportJob<TArgs extends Prisma.CommunityImportJobGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityImportJobGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityImportJobGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityImportJobGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityImportJobGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityImportJobGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityImportJobGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityImportJobGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityImportJob<TArgs extends Prisma.CommunityImportJobGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityImportJobGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityImportJobGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityImportJobGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityImportJobGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityImportJobGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityImportJobGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityImportJobGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/groupBy`, args, options, fetch);
}

export function useCountCommunityImportJob<TArgs extends Prisma.CommunityImportJobCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityImportJobCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/count`, args, options, fetch);
}

export function useSuspenseCountCommunityImportJob<TArgs extends Prisma.CommunityImportJobCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityImportJobCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityImportJobCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityImportJob', `${endpoint}/communityImportJob/count`, args, options, fetch);
}
import type { CommunityImportJobStatus } from '@prisma/client';

export function useCheckCommunityImportJob<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; uploadedFileUrl?: string; importStatus?: CommunityImportJobStatus; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityImportJob', `${endpoint}/communityImportJob/check`, args, options, fetch);
}
