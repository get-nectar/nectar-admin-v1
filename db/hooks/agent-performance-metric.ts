/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AgentPerformanceMetric } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAgentPerformanceMetric(options?: Omit<(UseMutationOptions<(AgentPerformanceMetric | undefined), DefaultError, Prisma.AgentPerformanceMetricCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricCreateArgs, DefaultError, AgentPerformanceMetric, true>('AgentPerformanceMetric', 'POST', `${endpoint}/agentPerformanceMetric/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAgentPerformanceMetric(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AgentPerformanceMetricCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AgentPerformanceMetric', 'POST', `${endpoint}/agentPerformanceMetric/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindManyArgs, TQueryFnData = Array<Prisma.AgentPerformanceMetricGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindManyArgs, TQueryFnData = Array<Prisma.AgentPerformanceMetricGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindManyArgs, TQueryFnData = Array<Prisma.AgentPerformanceMetricGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindManyArgs, TQueryFnData = Array<Prisma.AgentPerformanceMetricGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findMany`, args, options, fetch);
}

export function useFindUniqueAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindUniqueArgs, TQueryFnData = Prisma.AgentPerformanceMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindUniqueArgs, TQueryFnData = Prisma.AgentPerformanceMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findUnique`, args, options, fetch);
}

export function useFindFirstAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindFirstArgs, TQueryFnData = Prisma.AgentPerformanceMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricFindFirstArgs, TQueryFnData = Prisma.AgentPerformanceMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/findFirst`, args, options, fetch);
}

export function useUpdateAgentPerformanceMetric(options?: Omit<(UseMutationOptions<(AgentPerformanceMetric | undefined), DefaultError, Prisma.AgentPerformanceMetricUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricUpdateArgs, DefaultError, AgentPerformanceMetric, true>('AgentPerformanceMetric', 'PUT', `${endpoint}/agentPerformanceMetric/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAgentPerformanceMetric(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AgentPerformanceMetricUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AgentPerformanceMetric', 'PUT', `${endpoint}/agentPerformanceMetric/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAgentPerformanceMetric(options?: Omit<(UseMutationOptions<(AgentPerformanceMetric | undefined), DefaultError, Prisma.AgentPerformanceMetricUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricUpsertArgs, DefaultError, AgentPerformanceMetric, true>('AgentPerformanceMetric', 'POST', `${endpoint}/agentPerformanceMetric/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAgentPerformanceMetric(options?: Omit<(UseMutationOptions<(AgentPerformanceMetric | undefined), DefaultError, Prisma.AgentPerformanceMetricDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricDeleteArgs, DefaultError, AgentPerformanceMetric, true>('AgentPerformanceMetric', 'DELETE', `${endpoint}/agentPerformanceMetric/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AgentPerformanceMetric, Prisma.AgentPerformanceMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAgentPerformanceMetric(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AgentPerformanceMetricDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AgentPerformanceMetricDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AgentPerformanceMetric', 'DELETE', `${endpoint}/agentPerformanceMetric/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AgentPerformanceMetricDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AgentPerformanceMetricDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricAggregateArgs, TQueryFnData = Prisma.GetAgentPerformanceMetricAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricAggregateArgs, TQueryFnData = Prisma.GetAgentPerformanceMetricAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/aggregate`, args, options, fetch);
}

export function useGroupByAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AgentPerformanceMetricGroupByArgs['orderBy'] } : { orderBy?: Prisma.AgentPerformanceMetricGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AgentPerformanceMetricGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AgentPerformanceMetricGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AgentPerformanceMetricGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AgentPerformanceMetricGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AgentPerformanceMetricGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AgentPerformanceMetricGroupByArgs['orderBy'] } : { orderBy?: Prisma.AgentPerformanceMetricGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AgentPerformanceMetricGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AgentPerformanceMetricGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AgentPerformanceMetricGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AgentPerformanceMetricGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AgentPerformanceMetricGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/groupBy`, args, options, fetch);
}

export function useCountAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AgentPerformanceMetricCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/count`, args, options, fetch);
}

export function useSuspenseCountAgentPerformanceMetric<TArgs extends Prisma.AgentPerformanceMetricCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AgentPerformanceMetricCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AgentPerformanceMetricCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/count`, args, options, fetch);
}
import type { AgentPerformanceMetricType, MetricDisplayFormat, MetricAggregationType, MetricTimePeriod } from '@prisma/client';

export function useCheckAgentPerformanceMetric<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; name?: AgentPerformanceMetricType; displayFormat?: MetricDisplayFormat; aggregationType?: MetricAggregationType; timePeriod?: MetricTimePeriod }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AgentPerformanceMetric', `${endpoint}/agentPerformanceMetric/check`, args, options, fetch);
}
