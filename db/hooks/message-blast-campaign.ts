/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MessageBlastCampaign } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMessageBlastCampaign(options?: Omit<(UseMutationOptions<(MessageBlastCampaign | undefined), DefaultError, Prisma.MessageBlastCampaignCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignCreateArgs, DefaultError, MessageBlastCampaign, true>('MessageBlastCampaign', 'POST', `${endpoint}/messageBlastCampaign/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMessageBlastCampaign(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MessageBlastCampaignCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MessageBlastCampaign', 'POST', `${endpoint}/messageBlastCampaign/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindManyArgs, TQueryFnData = Array<Prisma.MessageBlastCampaignGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindManyArgs, TQueryFnData = Array<Prisma.MessageBlastCampaignGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindManyArgs, TQueryFnData = Array<Prisma.MessageBlastCampaignGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindManyArgs, TQueryFnData = Array<Prisma.MessageBlastCampaignGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findMany`, args, options, fetch);
}

export function useFindUniqueMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindUniqueArgs, TQueryFnData = Prisma.MessageBlastCampaignGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindUniqueArgs, TQueryFnData = Prisma.MessageBlastCampaignGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findUnique`, args, options, fetch);
}

export function useFindFirstMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindFirstArgs, TQueryFnData = Prisma.MessageBlastCampaignGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignFindFirstArgs, TQueryFnData = Prisma.MessageBlastCampaignGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/findFirst`, args, options, fetch);
}

export function useUpdateMessageBlastCampaign(options?: Omit<(UseMutationOptions<(MessageBlastCampaign | undefined), DefaultError, Prisma.MessageBlastCampaignUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignUpdateArgs, DefaultError, MessageBlastCampaign, true>('MessageBlastCampaign', 'PUT', `${endpoint}/messageBlastCampaign/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMessageBlastCampaign(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MessageBlastCampaignUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MessageBlastCampaign', 'PUT', `${endpoint}/messageBlastCampaign/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMessageBlastCampaign(options?: Omit<(UseMutationOptions<(MessageBlastCampaign | undefined), DefaultError, Prisma.MessageBlastCampaignUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignUpsertArgs, DefaultError, MessageBlastCampaign, true>('MessageBlastCampaign', 'POST', `${endpoint}/messageBlastCampaign/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMessageBlastCampaign(options?: Omit<(UseMutationOptions<(MessageBlastCampaign | undefined), DefaultError, Prisma.MessageBlastCampaignDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignDeleteArgs, DefaultError, MessageBlastCampaign, true>('MessageBlastCampaign', 'DELETE', `${endpoint}/messageBlastCampaign/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageBlastCampaign, Prisma.MessageBlastCampaignGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMessageBlastCampaign(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MessageBlastCampaignDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageBlastCampaignDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MessageBlastCampaign', 'DELETE', `${endpoint}/messageBlastCampaign/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageBlastCampaignDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageBlastCampaignDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MessageBlastCampaignDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignAggregateArgs, TQueryFnData = Prisma.GetMessageBlastCampaignAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignAggregateArgs, TQueryFnData = Prisma.GetMessageBlastCampaignAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/aggregate`, args, options, fetch);
}

export function useGroupByMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MessageBlastCampaignGroupByArgs['orderBy'] } : { orderBy?: Prisma.MessageBlastCampaignGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MessageBlastCampaignGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MessageBlastCampaignGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageBlastCampaignGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageBlastCampaignGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MessageBlastCampaignGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MessageBlastCampaignGroupByArgs['orderBy'] } : { orderBy?: Prisma.MessageBlastCampaignGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MessageBlastCampaignGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MessageBlastCampaignGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageBlastCampaignGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageBlastCampaignGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MessageBlastCampaignGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/groupBy`, args, options, fetch);
}

export function useCountMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MessageBlastCampaignCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/count`, args, options, fetch);
}

export function useSuspenseCountMessageBlastCampaign<TArgs extends Prisma.MessageBlastCampaignCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MessageBlastCampaignCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageBlastCampaignCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/count`, args, options, fetch);
}
import type { BlastCampaignType, BlastCampaignStatus } from '@prisma/client';

export function useCheckMessageBlastCampaign<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; latestUpdatedById?: string; type?: BlastCampaignType; instagramAccountId?: string; title?: string; status?: BlastCampaignStatus; messagesOpened?: number; messagesReplied?: number; totalCartAdds?: number; totalCheckoutStarts?: number; totalOrders?: number; totalClicks?: number; uniqueClicks?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MessageBlastCampaign', `${endpoint}/messageBlastCampaign/check`, args, options, fetch);
}
