/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, QuizAnswer } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateQuizAnswer(options?: Omit<(UseMutationOptions<(QuizAnswer | undefined), DefaultError, Prisma.QuizAnswerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerCreateArgs, DefaultError, QuizAnswer, true>('QuizAnswer', 'POST', `${endpoint}/quizAnswer/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyQuizAnswer(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuizAnswerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('QuizAnswer', 'POST', `${endpoint}/quizAnswer/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyQuizAnswer<TArgs extends Prisma.QuizAnswerFindManyArgs, TQueryFnData = Array<Prisma.QuizAnswerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findMany`, args, options, fetch);
}

export function useInfiniteFindManyQuizAnswer<TArgs extends Prisma.QuizAnswerFindManyArgs, TQueryFnData = Array<Prisma.QuizAnswerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findMany`, args, options, fetch);
}

export function useSuspenseFindManyQuizAnswer<TArgs extends Prisma.QuizAnswerFindManyArgs, TQueryFnData = Array<Prisma.QuizAnswerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyQuizAnswer<TArgs extends Prisma.QuizAnswerFindManyArgs, TQueryFnData = Array<Prisma.QuizAnswerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findMany`, args, options, fetch);
}

export function useFindUniqueQuizAnswer<TArgs extends Prisma.QuizAnswerFindUniqueArgs, TQueryFnData = Prisma.QuizAnswerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueQuizAnswer<TArgs extends Prisma.QuizAnswerFindUniqueArgs, TQueryFnData = Prisma.QuizAnswerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findUnique`, args, options, fetch);
}

export function useFindFirstQuizAnswer<TArgs extends Prisma.QuizAnswerFindFirstArgs, TQueryFnData = Prisma.QuizAnswerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstQuizAnswer<TArgs extends Prisma.QuizAnswerFindFirstArgs, TQueryFnData = Prisma.QuizAnswerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/findFirst`, args, options, fetch);
}

export function useUpdateQuizAnswer(options?: Omit<(UseMutationOptions<(QuizAnswer | undefined), DefaultError, Prisma.QuizAnswerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerUpdateArgs, DefaultError, QuizAnswer, true>('QuizAnswer', 'PUT', `${endpoint}/quizAnswer/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyQuizAnswer(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuizAnswerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('QuizAnswer', 'PUT', `${endpoint}/quizAnswer/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertQuizAnswer(options?: Omit<(UseMutationOptions<(QuizAnswer | undefined), DefaultError, Prisma.QuizAnswerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerUpsertArgs, DefaultError, QuizAnswer, true>('QuizAnswer', 'POST', `${endpoint}/quizAnswer/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteQuizAnswer(options?: Omit<(UseMutationOptions<(QuizAnswer | undefined), DefaultError, Prisma.QuizAnswerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerDeleteArgs, DefaultError, QuizAnswer, true>('QuizAnswer', 'DELETE', `${endpoint}/quizAnswer/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizAnswer, Prisma.QuizAnswerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyQuizAnswer(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuizAnswerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizAnswerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('QuizAnswer', 'DELETE', `${endpoint}/quizAnswer/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizAnswerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizAnswerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuizAnswerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateQuizAnswer<TArgs extends Prisma.QuizAnswerAggregateArgs, TQueryFnData = Prisma.GetQuizAnswerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateQuizAnswer<TArgs extends Prisma.QuizAnswerAggregateArgs, TQueryFnData = Prisma.GetQuizAnswerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/aggregate`, args, options, fetch);
}

export function useGroupByQuizAnswer<TArgs extends Prisma.QuizAnswerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.QuizAnswerGroupByArgs['orderBy'] } : { orderBy?: Prisma.QuizAnswerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.QuizAnswerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.QuizAnswerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizAnswerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizAnswerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuizAnswerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByQuizAnswer<TArgs extends Prisma.QuizAnswerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.QuizAnswerGroupByArgs['orderBy'] } : { orderBy?: Prisma.QuizAnswerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.QuizAnswerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.QuizAnswerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizAnswerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizAnswerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuizAnswerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/groupBy`, args, options, fetch);
}

export function useCountQuizAnswer<TArgs extends Prisma.QuizAnswerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.QuizAnswerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/count`, args, options, fetch);
}

export function useSuspenseCountQuizAnswer<TArgs extends Prisma.QuizAnswerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.QuizAnswerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizAnswerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizAnswer', `${endpoint}/quizAnswer/count`, args, options, fetch);
}

export function useCheckQuizAnswer<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; actionBlockId?: string; questionId?: string; questionText?: string; messageId?: string; journeyId?: string; communityMemberId?: string; quizSessionId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('QuizAnswer', `${endpoint}/quizAnswer/check`, args, options, fetch);
}
