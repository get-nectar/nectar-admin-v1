/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, KeywordMention } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateKeywordMention(options?: Omit<(UseMutationOptions<(KeywordMention | undefined), DefaultError, Prisma.KeywordMentionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionCreateArgs, DefaultError, KeywordMention, true>('KeywordMention', 'POST', `${endpoint}/keywordMention/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyKeywordMention(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.KeywordMentionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('KeywordMention', 'POST', `${endpoint}/keywordMention/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyKeywordMention<TArgs extends Prisma.KeywordMentionFindManyArgs, TQueryFnData = Array<Prisma.KeywordMentionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findMany`, args, options, fetch);
}

export function useInfiniteFindManyKeywordMention<TArgs extends Prisma.KeywordMentionFindManyArgs, TQueryFnData = Array<Prisma.KeywordMentionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findMany`, args, options, fetch);
}

export function useSuspenseFindManyKeywordMention<TArgs extends Prisma.KeywordMentionFindManyArgs, TQueryFnData = Array<Prisma.KeywordMentionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyKeywordMention<TArgs extends Prisma.KeywordMentionFindManyArgs, TQueryFnData = Array<Prisma.KeywordMentionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findMany`, args, options, fetch);
}

export function useFindUniqueKeywordMention<TArgs extends Prisma.KeywordMentionFindUniqueArgs, TQueryFnData = Prisma.KeywordMentionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueKeywordMention<TArgs extends Prisma.KeywordMentionFindUniqueArgs, TQueryFnData = Prisma.KeywordMentionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findUnique`, args, options, fetch);
}

export function useFindFirstKeywordMention<TArgs extends Prisma.KeywordMentionFindFirstArgs, TQueryFnData = Prisma.KeywordMentionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstKeywordMention<TArgs extends Prisma.KeywordMentionFindFirstArgs, TQueryFnData = Prisma.KeywordMentionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/findFirst`, args, options, fetch);
}

export function useUpdateKeywordMention(options?: Omit<(UseMutationOptions<(KeywordMention | undefined), DefaultError, Prisma.KeywordMentionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionUpdateArgs, DefaultError, KeywordMention, true>('KeywordMention', 'PUT', `${endpoint}/keywordMention/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyKeywordMention(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.KeywordMentionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('KeywordMention', 'PUT', `${endpoint}/keywordMention/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertKeywordMention(options?: Omit<(UseMutationOptions<(KeywordMention | undefined), DefaultError, Prisma.KeywordMentionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionUpsertArgs, DefaultError, KeywordMention, true>('KeywordMention', 'POST', `${endpoint}/keywordMention/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteKeywordMention(options?: Omit<(UseMutationOptions<(KeywordMention | undefined), DefaultError, Prisma.KeywordMentionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionDeleteArgs, DefaultError, KeywordMention, true>('KeywordMention', 'DELETE', `${endpoint}/keywordMention/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, KeywordMention, Prisma.KeywordMentionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyKeywordMention(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.KeywordMentionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.KeywordMentionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('KeywordMention', 'DELETE', `${endpoint}/keywordMention/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.KeywordMentionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.KeywordMentionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.KeywordMentionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateKeywordMention<TArgs extends Prisma.KeywordMentionAggregateArgs, TQueryFnData = Prisma.GetKeywordMentionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateKeywordMention<TArgs extends Prisma.KeywordMentionAggregateArgs, TQueryFnData = Prisma.GetKeywordMentionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/aggregate`, args, options, fetch);
}

export function useGroupByKeywordMention<TArgs extends Prisma.KeywordMentionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.KeywordMentionGroupByArgs['orderBy'] } : { orderBy?: Prisma.KeywordMentionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.KeywordMentionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.KeywordMentionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.KeywordMentionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.KeywordMentionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.KeywordMentionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByKeywordMention<TArgs extends Prisma.KeywordMentionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.KeywordMentionGroupByArgs['orderBy'] } : { orderBy?: Prisma.KeywordMentionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.KeywordMentionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.KeywordMentionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.KeywordMentionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.KeywordMentionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.KeywordMentionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/groupBy`, args, options, fetch);
}

export function useCountKeywordMention<TArgs extends Prisma.KeywordMentionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.KeywordMentionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/count`, args, options, fetch);
}

export function useSuspenseCountKeywordMention<TArgs extends Prisma.KeywordMentionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.KeywordMentionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.KeywordMentionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('KeywordMention', `${endpoint}/keywordMention/count`, args, options, fetch);
}

export function useCheckKeywordMention<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; llmAnalysisId?: string; keywordId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('KeywordMention', `${endpoint}/keywordMention/check`, args, options, fetch);
}
