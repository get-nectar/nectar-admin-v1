/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, LLMAnalysisMetadata } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(LLMAnalysisMetadata | undefined), DefaultError, Prisma.LLMAnalysisMetadataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataCreateArgs, DefaultError, LLMAnalysisMetadata, true>('LLMAnalysisMetadata', 'POST', `${endpoint}/lLMAnalysisMetadata/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LLMAnalysisMetadataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('LLMAnalysisMetadata', 'POST', `${endpoint}/lLMAnalysisMetadata/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.LLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useInfiniteFindManyLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.LLMAnalysisMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useSuspenseFindManyLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.LLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.LLMAnalysisMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useFindUniqueLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindUniqueArgs, TQueryFnData = Prisma.LLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindUniqueArgs, TQueryFnData = Prisma.LLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findUnique`, args, options, fetch);
}

export function useFindFirstLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindFirstArgs, TQueryFnData = Prisma.LLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataFindFirstArgs, TQueryFnData = Prisma.LLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/findFirst`, args, options, fetch);
}

export function useUpdateLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(LLMAnalysisMetadata | undefined), DefaultError, Prisma.LLMAnalysisMetadataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataUpdateArgs, DefaultError, LLMAnalysisMetadata, true>('LLMAnalysisMetadata', 'PUT', `${endpoint}/lLMAnalysisMetadata/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LLMAnalysisMetadataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('LLMAnalysisMetadata', 'PUT', `${endpoint}/lLMAnalysisMetadata/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(LLMAnalysisMetadata | undefined), DefaultError, Prisma.LLMAnalysisMetadataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataUpsertArgs, DefaultError, LLMAnalysisMetadata, true>('LLMAnalysisMetadata', 'POST', `${endpoint}/lLMAnalysisMetadata/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(LLMAnalysisMetadata | undefined), DefaultError, Prisma.LLMAnalysisMetadataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataDeleteArgs, DefaultError, LLMAnalysisMetadata, true>('LLMAnalysisMetadata', 'DELETE', `${endpoint}/lLMAnalysisMetadata/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LLMAnalysisMetadata, Prisma.LLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LLMAnalysisMetadataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LLMAnalysisMetadataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('LLMAnalysisMetadata', 'DELETE', `${endpoint}/lLMAnalysisMetadata/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LLMAnalysisMetadataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LLMAnalysisMetadataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataAggregateArgs, TQueryFnData = Prisma.GetLLMAnalysisMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataAggregateArgs, TQueryFnData = Prisma.GetLLMAnalysisMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/aggregate`, args, options, fetch);
}

export function useGroupByLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LLMAnalysisMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.LLMAnalysisMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LLMAnalysisMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.LLMAnalysisMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.LLMAnalysisMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.LLMAnalysisMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LLMAnalysisMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LLMAnalysisMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.LLMAnalysisMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LLMAnalysisMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.LLMAnalysisMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.LLMAnalysisMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.LLMAnalysisMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LLMAnalysisMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/groupBy`, args, options, fetch);
}

export function useCountLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LLMAnalysisMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/count`, args, options, fetch);
}

export function useSuspenseCountLLMAnalysisMetadata<TArgs extends Prisma.LLMAnalysisMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LLMAnalysisMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LLMAnalysisMetadataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/count`, args, options, fetch);
}

export function useCheckLLMAnalysisMetadata<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; commentId?: string; messageId?: string; contentId?: string; insightId?: string; insightGroupId?: string; sentimentAnalysisId?: string; generatedSummary?: string; shouldEscalateToHuman?: boolean; languageLocale?: string; isLanguageEnglish?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('LLMAnalysisMetadata', `${endpoint}/lLMAnalysisMetadata/check`, args, options, fetch);
}
