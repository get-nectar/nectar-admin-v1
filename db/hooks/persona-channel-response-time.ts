/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PersonaChannelResponseTime } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePersonaChannelResponseTime(options?: Omit<(UseMutationOptions<(PersonaChannelResponseTime | undefined), DefaultError, Prisma.PersonaChannelResponseTimeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeCreateArgs, DefaultError, PersonaChannelResponseTime, true>('PersonaChannelResponseTime', 'POST', `${endpoint}/personaChannelResponseTime/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPersonaChannelResponseTime(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelResponseTimeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelResponseTime', 'POST', `${endpoint}/personaChannelResponseTime/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelResponseTimeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelResponseTimeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelResponseTimeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelResponseTimeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findMany`, args, options, fetch);
}

export function useFindUniquePersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindUniqueArgs, TQueryFnData = Prisma.PersonaChannelResponseTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindUniqueArgs, TQueryFnData = Prisma.PersonaChannelResponseTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findUnique`, args, options, fetch);
}

export function useFindFirstPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindFirstArgs, TQueryFnData = Prisma.PersonaChannelResponseTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeFindFirstArgs, TQueryFnData = Prisma.PersonaChannelResponseTimeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/findFirst`, args, options, fetch);
}

export function useUpdatePersonaChannelResponseTime(options?: Omit<(UseMutationOptions<(PersonaChannelResponseTime | undefined), DefaultError, Prisma.PersonaChannelResponseTimeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeUpdateArgs, DefaultError, PersonaChannelResponseTime, true>('PersonaChannelResponseTime', 'PUT', `${endpoint}/personaChannelResponseTime/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPersonaChannelResponseTime(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelResponseTimeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelResponseTime', 'PUT', `${endpoint}/personaChannelResponseTime/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPersonaChannelResponseTime(options?: Omit<(UseMutationOptions<(PersonaChannelResponseTime | undefined), DefaultError, Prisma.PersonaChannelResponseTimeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeUpsertArgs, DefaultError, PersonaChannelResponseTime, true>('PersonaChannelResponseTime', 'POST', `${endpoint}/personaChannelResponseTime/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePersonaChannelResponseTime(options?: Omit<(UseMutationOptions<(PersonaChannelResponseTime | undefined), DefaultError, Prisma.PersonaChannelResponseTimeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeDeleteArgs, DefaultError, PersonaChannelResponseTime, true>('PersonaChannelResponseTime', 'DELETE', `${endpoint}/personaChannelResponseTime/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelResponseTime, Prisma.PersonaChannelResponseTimeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPersonaChannelResponseTime(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelResponseTimeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelResponseTimeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelResponseTime', 'DELETE', `${endpoint}/personaChannelResponseTime/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelResponseTimeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelResponseTimeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeAggregateArgs, TQueryFnData = Prisma.GetPersonaChannelResponseTimeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeAggregateArgs, TQueryFnData = Prisma.GetPersonaChannelResponseTimeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/aggregate`, args, options, fetch);
}

export function useGroupByPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaChannelResponseTimeGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaChannelResponseTimeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaChannelResponseTimeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaChannelResponseTimeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelResponseTimeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelResponseTimeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaChannelResponseTimeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaChannelResponseTimeGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaChannelResponseTimeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaChannelResponseTimeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaChannelResponseTimeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelResponseTimeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelResponseTimeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaChannelResponseTimeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/groupBy`, args, options, fetch);
}

export function useCountPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaChannelResponseTimeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/count`, args, options, fetch);
}

export function useSuspenseCountPersonaChannelResponseTime<TArgs extends Prisma.PersonaChannelResponseTimeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaChannelResponseTimeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelResponseTimeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/count`, args, options, fetch);
}
import type { PersonaItemChannel, ResponseDelayTime } from '@prisma/client';

export function useCheckPersonaChannelResponseTime<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; channelSettingId?: string; channelType?: PersonaItemChannel; timeDelay?: ResponseDelayTime }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PersonaChannelResponseTime', `${endpoint}/personaChannelResponseTime/check`, args, options, fetch);
}
