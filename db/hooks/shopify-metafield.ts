/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyMetafield } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyMetafield(options?: Omit<(UseMutationOptions<(ShopifyMetafield | undefined), DefaultError, Prisma.ShopifyMetafieldCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldCreateArgs, DefaultError, ShopifyMetafield, true>('ShopifyMetafield', 'POST', `${endpoint}/shopifyMetafield/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyMetafield(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyMetafieldCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyMetafield', 'POST', `${endpoint}/shopifyMetafield/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindManyArgs, TQueryFnData = Array<Prisma.ShopifyMetafieldGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindManyArgs, TQueryFnData = Array<Prisma.ShopifyMetafieldGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindManyArgs, TQueryFnData = Array<Prisma.ShopifyMetafieldGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindManyArgs, TQueryFnData = Array<Prisma.ShopifyMetafieldGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindUniqueArgs, TQueryFnData = Prisma.ShopifyMetafieldGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindUniqueArgs, TQueryFnData = Prisma.ShopifyMetafieldGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindFirstArgs, TQueryFnData = Prisma.ShopifyMetafieldGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldFindFirstArgs, TQueryFnData = Prisma.ShopifyMetafieldGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/findFirst`, args, options, fetch);
}

export function useUpdateShopifyMetafield(options?: Omit<(UseMutationOptions<(ShopifyMetafield | undefined), DefaultError, Prisma.ShopifyMetafieldUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldUpdateArgs, DefaultError, ShopifyMetafield, true>('ShopifyMetafield', 'PUT', `${endpoint}/shopifyMetafield/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyMetafield(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyMetafieldUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyMetafield', 'PUT', `${endpoint}/shopifyMetafield/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyMetafield(options?: Omit<(UseMutationOptions<(ShopifyMetafield | undefined), DefaultError, Prisma.ShopifyMetafieldUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldUpsertArgs, DefaultError, ShopifyMetafield, true>('ShopifyMetafield', 'POST', `${endpoint}/shopifyMetafield/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyMetafield(options?: Omit<(UseMutationOptions<(ShopifyMetafield | undefined), DefaultError, Prisma.ShopifyMetafieldDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldDeleteArgs, DefaultError, ShopifyMetafield, true>('ShopifyMetafield', 'DELETE', `${endpoint}/shopifyMetafield/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyMetafield, Prisma.ShopifyMetafieldGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyMetafield(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyMetafieldDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyMetafieldDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyMetafield', 'DELETE', `${endpoint}/shopifyMetafield/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyMetafieldDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyMetafieldDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyMetafieldDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldAggregateArgs, TQueryFnData = Prisma.GetShopifyMetafieldAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldAggregateArgs, TQueryFnData = Prisma.GetShopifyMetafieldAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/aggregate`, args, options, fetch);
}

export function useGroupByShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyMetafieldGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyMetafieldGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyMetafieldGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyMetafieldGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyMetafieldGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyMetafieldGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyMetafieldGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyMetafieldGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyMetafieldGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyMetafieldGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyMetafieldGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyMetafieldGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyMetafieldGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyMetafieldGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/groupBy`, args, options, fetch);
}

export function useCountShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyMetafieldCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/count`, args, options, fetch);
}

export function useSuspenseCountShopifyMetafield<TArgs extends Prisma.ShopifyMetafieldCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyMetafieldCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyMetafieldCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/count`, args, options, fetch);
}

export function useCheckShopifyMetafield<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; key?: string; value?: string; description?: string; shopifyResourceId?: string; metafieldId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyMetafield', `${endpoint}/shopifyMetafield/check`, args, options, fetch);
}
