/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokHashtagTracker } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokHashtagTracker(options?: Omit<(UseMutationOptions<(TikTokHashtagTracker | undefined), DefaultError, Prisma.TikTokHashtagTrackerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerCreateArgs, DefaultError, TikTokHashtagTracker, true>('TikTokHashtagTracker', 'POST', `${endpoint}/tikTokHashtagTracker/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokHashtagTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokHashtagTrackerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokHashtagTracker', 'POST', `${endpoint}/tikTokHashtagTracker/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokHashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokHashtagTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokHashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokHashtagTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindUniqueArgs, TQueryFnData = Prisma.TikTokHashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindUniqueArgs, TQueryFnData = Prisma.TikTokHashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindFirstArgs, TQueryFnData = Prisma.TikTokHashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerFindFirstArgs, TQueryFnData = Prisma.TikTokHashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/findFirst`, args, options, fetch);
}

export function useUpdateTikTokHashtagTracker(options?: Omit<(UseMutationOptions<(TikTokHashtagTracker | undefined), DefaultError, Prisma.TikTokHashtagTrackerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerUpdateArgs, DefaultError, TikTokHashtagTracker, true>('TikTokHashtagTracker', 'PUT', `${endpoint}/tikTokHashtagTracker/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokHashtagTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokHashtagTrackerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokHashtagTracker', 'PUT', `${endpoint}/tikTokHashtagTracker/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokHashtagTracker(options?: Omit<(UseMutationOptions<(TikTokHashtagTracker | undefined), DefaultError, Prisma.TikTokHashtagTrackerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerUpsertArgs, DefaultError, TikTokHashtagTracker, true>('TikTokHashtagTracker', 'POST', `${endpoint}/tikTokHashtagTracker/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokHashtagTracker(options?: Omit<(UseMutationOptions<(TikTokHashtagTracker | undefined), DefaultError, Prisma.TikTokHashtagTrackerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerDeleteArgs, DefaultError, TikTokHashtagTracker, true>('TikTokHashtagTracker', 'DELETE', `${endpoint}/tikTokHashtagTracker/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokHashtagTracker, Prisma.TikTokHashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokHashtagTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokHashtagTrackerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokHashtagTrackerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokHashtagTracker', 'DELETE', `${endpoint}/tikTokHashtagTracker/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokHashtagTrackerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokHashtagTrackerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerAggregateArgs, TQueryFnData = Prisma.GetTikTokHashtagTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerAggregateArgs, TQueryFnData = Prisma.GetTikTokHashtagTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/aggregate`, args, options, fetch);
}

export function useGroupByTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokHashtagTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokHashtagTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokHashtagTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokHashtagTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokHashtagTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokHashtagTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokHashtagTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokHashtagTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokHashtagTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokHashtagTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokHashtagTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokHashtagTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokHashtagTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokHashtagTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/groupBy`, args, options, fetch);
}

export function useCountTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokHashtagTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/count`, args, options, fetch);
}

export function useSuspenseCountTikTokHashtagTracker<TArgs extends Prisma.TikTokHashtagTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokHashtagTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokHashtagTrackerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/count`, args, options, fetch);
}
import type { HashtagPriority, TikTokTrackerStatus } from '@prisma/client';

export function useCheckTikTokHashtagTracker<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; hashtag?: string; priority?: HashtagPriority; lastRunId?: string; lastRunStatus?: TikTokTrackerStatus }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokHashtagTracker', `${endpoint}/tikTokHashtagTracker/check`, args, options, fetch);
}
