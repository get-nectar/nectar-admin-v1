/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, HashtagTracker } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateHashtagTracker(options?: Omit<(UseMutationOptions<(HashtagTracker | undefined), DefaultError, Prisma.HashtagTrackerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerCreateArgs, DefaultError, HashtagTracker, true>('HashtagTracker', 'POST', `${endpoint}/hashtagTracker/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyHashtagTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.HashtagTrackerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('HashtagTracker', 'POST', `${endpoint}/hashtagTracker/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyHashtagTracker<TArgs extends Prisma.HashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findMany`, args, options, fetch);
}

export function useInfiniteFindManyHashtagTracker<TArgs extends Prisma.HashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findMany`, args, options, fetch);
}

export function useSuspenseFindManyHashtagTracker<TArgs extends Prisma.HashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyHashtagTracker<TArgs extends Prisma.HashtagTrackerFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findMany`, args, options, fetch);
}

export function useFindUniqueHashtagTracker<TArgs extends Prisma.HashtagTrackerFindUniqueArgs, TQueryFnData = Prisma.HashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueHashtagTracker<TArgs extends Prisma.HashtagTrackerFindUniqueArgs, TQueryFnData = Prisma.HashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findUnique`, args, options, fetch);
}

export function useFindFirstHashtagTracker<TArgs extends Prisma.HashtagTrackerFindFirstArgs, TQueryFnData = Prisma.HashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstHashtagTracker<TArgs extends Prisma.HashtagTrackerFindFirstArgs, TQueryFnData = Prisma.HashtagTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/findFirst`, args, options, fetch);
}

export function useUpdateHashtagTracker(options?: Omit<(UseMutationOptions<(HashtagTracker | undefined), DefaultError, Prisma.HashtagTrackerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerUpdateArgs, DefaultError, HashtagTracker, true>('HashtagTracker', 'PUT', `${endpoint}/hashtagTracker/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyHashtagTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.HashtagTrackerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('HashtagTracker', 'PUT', `${endpoint}/hashtagTracker/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertHashtagTracker(options?: Omit<(UseMutationOptions<(HashtagTracker | undefined), DefaultError, Prisma.HashtagTrackerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerUpsertArgs, DefaultError, HashtagTracker, true>('HashtagTracker', 'POST', `${endpoint}/hashtagTracker/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteHashtagTracker(options?: Omit<(UseMutationOptions<(HashtagTracker | undefined), DefaultError, Prisma.HashtagTrackerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerDeleteArgs, DefaultError, HashtagTracker, true>('HashtagTracker', 'DELETE', `${endpoint}/hashtagTracker/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTracker, Prisma.HashtagTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyHashtagTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.HashtagTrackerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('HashtagTracker', 'DELETE', `${endpoint}/hashtagTracker/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateHashtagTracker<TArgs extends Prisma.HashtagTrackerAggregateArgs, TQueryFnData = Prisma.GetHashtagTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateHashtagTracker<TArgs extends Prisma.HashtagTrackerAggregateArgs, TQueryFnData = Prisma.GetHashtagTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/aggregate`, args, options, fetch);
}

export function useGroupByHashtagTracker<TArgs extends Prisma.HashtagTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.HashtagTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.HashtagTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.HashtagTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.HashtagTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.HashtagTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByHashtagTracker<TArgs extends Prisma.HashtagTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.HashtagTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.HashtagTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.HashtagTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.HashtagTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.HashtagTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/groupBy`, args, options, fetch);
}

export function useCountHashtagTracker<TArgs extends Prisma.HashtagTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.HashtagTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/count`, args, options, fetch);
}

export function useSuspenseCountHashtagTracker<TArgs extends Prisma.HashtagTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.HashtagTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTracker', `${endpoint}/hashtagTracker/count`, args, options, fetch);
}
import type { Platform, HashtagPriority, HashtagTrackerStatus } from '@prisma/client';

export function useCheckHashtagTracker<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; hashtagId?: string; hashtag?: string; platform?: Platform; priority?: HashtagPriority; lastRunId?: string; lastRunStatus?: HashtagTrackerStatus; isActiveOnBrand?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('HashtagTracker', `${endpoint}/hashtagTracker/check`, args, options, fetch);
}
