/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ContentCollaboration } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateContentCollaboration(options?: Omit<(UseMutationOptions<(ContentCollaboration | undefined), DefaultError, Prisma.ContentCollaborationCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationCreateArgs, DefaultError, ContentCollaboration, true>('ContentCollaboration', 'POST', `${endpoint}/contentCollaboration/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyContentCollaboration(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentCollaborationCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentCollaboration', 'POST', `${endpoint}/contentCollaboration/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyContentCollaboration<TArgs extends Prisma.ContentCollaborationFindManyArgs, TQueryFnData = Array<Prisma.ContentCollaborationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findMany`, args, options, fetch);
}

export function useInfiniteFindManyContentCollaboration<TArgs extends Prisma.ContentCollaborationFindManyArgs, TQueryFnData = Array<Prisma.ContentCollaborationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findMany`, args, options, fetch);
}

export function useSuspenseFindManyContentCollaboration<TArgs extends Prisma.ContentCollaborationFindManyArgs, TQueryFnData = Array<Prisma.ContentCollaborationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyContentCollaboration<TArgs extends Prisma.ContentCollaborationFindManyArgs, TQueryFnData = Array<Prisma.ContentCollaborationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findMany`, args, options, fetch);
}

export function useFindUniqueContentCollaboration<TArgs extends Prisma.ContentCollaborationFindUniqueArgs, TQueryFnData = Prisma.ContentCollaborationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueContentCollaboration<TArgs extends Prisma.ContentCollaborationFindUniqueArgs, TQueryFnData = Prisma.ContentCollaborationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findUnique`, args, options, fetch);
}

export function useFindFirstContentCollaboration<TArgs extends Prisma.ContentCollaborationFindFirstArgs, TQueryFnData = Prisma.ContentCollaborationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstContentCollaboration<TArgs extends Prisma.ContentCollaborationFindFirstArgs, TQueryFnData = Prisma.ContentCollaborationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/findFirst`, args, options, fetch);
}

export function useUpdateContentCollaboration(options?: Omit<(UseMutationOptions<(ContentCollaboration | undefined), DefaultError, Prisma.ContentCollaborationUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationUpdateArgs, DefaultError, ContentCollaboration, true>('ContentCollaboration', 'PUT', `${endpoint}/contentCollaboration/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyContentCollaboration(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentCollaborationUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentCollaboration', 'PUT', `${endpoint}/contentCollaboration/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertContentCollaboration(options?: Omit<(UseMutationOptions<(ContentCollaboration | undefined), DefaultError, Prisma.ContentCollaborationUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationUpsertArgs, DefaultError, ContentCollaboration, true>('ContentCollaboration', 'POST', `${endpoint}/contentCollaboration/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteContentCollaboration(options?: Omit<(UseMutationOptions<(ContentCollaboration | undefined), DefaultError, Prisma.ContentCollaborationDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationDeleteArgs, DefaultError, ContentCollaboration, true>('ContentCollaboration', 'DELETE', `${endpoint}/contentCollaboration/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentCollaboration, Prisma.ContentCollaborationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyContentCollaboration(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentCollaborationDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentCollaborationDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentCollaboration', 'DELETE', `${endpoint}/contentCollaboration/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentCollaborationDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentCollaborationDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentCollaborationDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateContentCollaboration<TArgs extends Prisma.ContentCollaborationAggregateArgs, TQueryFnData = Prisma.GetContentCollaborationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateContentCollaboration<TArgs extends Prisma.ContentCollaborationAggregateArgs, TQueryFnData = Prisma.GetContentCollaborationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/aggregate`, args, options, fetch);
}

export function useGroupByContentCollaboration<TArgs extends Prisma.ContentCollaborationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentCollaborationGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentCollaborationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentCollaborationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentCollaborationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentCollaborationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentCollaborationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentCollaborationGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByContentCollaboration<TArgs extends Prisma.ContentCollaborationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentCollaborationGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentCollaborationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentCollaborationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentCollaborationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentCollaborationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentCollaborationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentCollaborationGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/groupBy`, args, options, fetch);
}

export function useCountContentCollaboration<TArgs extends Prisma.ContentCollaborationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentCollaborationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/count`, args, options, fetch);
}

export function useSuspenseCountContentCollaboration<TArgs extends Prisma.ContentCollaborationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentCollaborationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentCollaborationCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/count`, args, options, fetch);
}

export function useCheckContentCollaboration<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; username?: string; communityMemberId?: string; contentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ContentCollaboration', `${endpoint}/contentCollaboration/check`, args, options, fetch);
}
