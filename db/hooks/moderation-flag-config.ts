/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ModerationFlagConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateModerationFlagConfig(options?: Omit<(UseMutationOptions<(ModerationFlagConfig | undefined), DefaultError, Prisma.ModerationFlagConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigCreateArgs, DefaultError, ModerationFlagConfig, true>('ModerationFlagConfig', 'POST', `${endpoint}/moderationFlagConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyModerationFlagConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationFlagConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationFlagConfig', 'POST', `${endpoint}/moderationFlagConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationFlagConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationFlagConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationFlagConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationFlagConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findMany`, args, options, fetch);
}

export function useFindUniqueModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindUniqueArgs, TQueryFnData = Prisma.ModerationFlagConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindUniqueArgs, TQueryFnData = Prisma.ModerationFlagConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findUnique`, args, options, fetch);
}

export function useFindFirstModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindFirstArgs, TQueryFnData = Prisma.ModerationFlagConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigFindFirstArgs, TQueryFnData = Prisma.ModerationFlagConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/findFirst`, args, options, fetch);
}

export function useUpdateModerationFlagConfig(options?: Omit<(UseMutationOptions<(ModerationFlagConfig | undefined), DefaultError, Prisma.ModerationFlagConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigUpdateArgs, DefaultError, ModerationFlagConfig, true>('ModerationFlagConfig', 'PUT', `${endpoint}/moderationFlagConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyModerationFlagConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationFlagConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationFlagConfig', 'PUT', `${endpoint}/moderationFlagConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertModerationFlagConfig(options?: Omit<(UseMutationOptions<(ModerationFlagConfig | undefined), DefaultError, Prisma.ModerationFlagConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigUpsertArgs, DefaultError, ModerationFlagConfig, true>('ModerationFlagConfig', 'POST', `${endpoint}/moderationFlagConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteModerationFlagConfig(options?: Omit<(UseMutationOptions<(ModerationFlagConfig | undefined), DefaultError, Prisma.ModerationFlagConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigDeleteArgs, DefaultError, ModerationFlagConfig, true>('ModerationFlagConfig', 'DELETE', `${endpoint}/moderationFlagConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationFlagConfig, Prisma.ModerationFlagConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyModerationFlagConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationFlagConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationFlagConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationFlagConfig', 'DELETE', `${endpoint}/moderationFlagConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationFlagConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationFlagConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationFlagConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigAggregateArgs, TQueryFnData = Prisma.GetModerationFlagConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigAggregateArgs, TQueryFnData = Prisma.GetModerationFlagConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/aggregate`, args, options, fetch);
}

export function useGroupByModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationFlagConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationFlagConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationFlagConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationFlagConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationFlagConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationFlagConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationFlagConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationFlagConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationFlagConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationFlagConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationFlagConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationFlagConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationFlagConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationFlagConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/groupBy`, args, options, fetch);
}

export function useCountModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationFlagConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/count`, args, options, fetch);
}

export function useSuspenseCountModerationFlagConfig<TArgs extends Prisma.ModerationFlagConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationFlagConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationFlagConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/count`, args, options, fetch);
}
import type { ModerationFlagType } from '@prisma/client';

export function useCheckModerationFlagConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isEnabled?: boolean; type?: ModerationFlagType; isAutomated?: boolean; moderationRuleId?: string; instagramModerationConfigId?: string; facebookModerationConfigId?: string; tiktokModerationConfigId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ModerationFlagConfig', `${endpoint}/moderationFlagConfig/check`, args, options, fetch);
}
