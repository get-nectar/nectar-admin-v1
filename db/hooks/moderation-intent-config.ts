/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ModerationIntentConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateModerationIntentConfig(options?: Omit<(UseMutationOptions<(ModerationIntentConfig | undefined), DefaultError, Prisma.ModerationIntentConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigCreateArgs, DefaultError, ModerationIntentConfig, true>('ModerationIntentConfig', 'POST', `${endpoint}/moderationIntentConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyModerationIntentConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationIntentConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationIntentConfig', 'POST', `${endpoint}/moderationIntentConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationIntentConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationIntentConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationIntentConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationIntentConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findMany`, args, options, fetch);
}

export function useFindUniqueModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindUniqueArgs, TQueryFnData = Prisma.ModerationIntentConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindUniqueArgs, TQueryFnData = Prisma.ModerationIntentConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findUnique`, args, options, fetch);
}

export function useFindFirstModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindFirstArgs, TQueryFnData = Prisma.ModerationIntentConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigFindFirstArgs, TQueryFnData = Prisma.ModerationIntentConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/findFirst`, args, options, fetch);
}

export function useUpdateModerationIntentConfig(options?: Omit<(UseMutationOptions<(ModerationIntentConfig | undefined), DefaultError, Prisma.ModerationIntentConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigUpdateArgs, DefaultError, ModerationIntentConfig, true>('ModerationIntentConfig', 'PUT', `${endpoint}/moderationIntentConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyModerationIntentConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationIntentConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationIntentConfig', 'PUT', `${endpoint}/moderationIntentConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertModerationIntentConfig(options?: Omit<(UseMutationOptions<(ModerationIntentConfig | undefined), DefaultError, Prisma.ModerationIntentConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigUpsertArgs, DefaultError, ModerationIntentConfig, true>('ModerationIntentConfig', 'POST', `${endpoint}/moderationIntentConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteModerationIntentConfig(options?: Omit<(UseMutationOptions<(ModerationIntentConfig | undefined), DefaultError, Prisma.ModerationIntentConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigDeleteArgs, DefaultError, ModerationIntentConfig, true>('ModerationIntentConfig', 'DELETE', `${endpoint}/moderationIntentConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationIntentConfig, Prisma.ModerationIntentConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyModerationIntentConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationIntentConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationIntentConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationIntentConfig', 'DELETE', `${endpoint}/moderationIntentConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationIntentConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationIntentConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationIntentConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigAggregateArgs, TQueryFnData = Prisma.GetModerationIntentConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigAggregateArgs, TQueryFnData = Prisma.GetModerationIntentConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/aggregate`, args, options, fetch);
}

export function useGroupByModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationIntentConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationIntentConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationIntentConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationIntentConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationIntentConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationIntentConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationIntentConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationIntentConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationIntentConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationIntentConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationIntentConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationIntentConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationIntentConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationIntentConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/groupBy`, args, options, fetch);
}

export function useCountModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationIntentConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/count`, args, options, fetch);
}

export function useSuspenseCountModerationIntentConfig<TArgs extends Prisma.ModerationIntentConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationIntentConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationIntentConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/count`, args, options, fetch);
}

export function useCheckModerationIntentConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; intent?: string; titleId?: string; isAutomated?: boolean; moderationRuleId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ModerationIntentConfig', `${endpoint}/moderationIntentConfig/check`, args, options, fetch);
}
