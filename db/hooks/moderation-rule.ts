/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ModerationRule } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateModerationRule(options?: Omit<(UseMutationOptions<(ModerationRule | undefined), DefaultError, Prisma.ModerationRuleCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleCreateArgs, DefaultError, ModerationRule, true>('ModerationRule', 'POST', `${endpoint}/moderationRule/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyModerationRule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationRuleCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationRule', 'POST', `${endpoint}/moderationRule/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyModerationRule<TArgs extends Prisma.ModerationRuleFindManyArgs, TQueryFnData = Array<Prisma.ModerationRuleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findMany`, args, options, fetch);
}

export function useInfiniteFindManyModerationRule<TArgs extends Prisma.ModerationRuleFindManyArgs, TQueryFnData = Array<Prisma.ModerationRuleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findMany`, args, options, fetch);
}

export function useSuspenseFindManyModerationRule<TArgs extends Prisma.ModerationRuleFindManyArgs, TQueryFnData = Array<Prisma.ModerationRuleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyModerationRule<TArgs extends Prisma.ModerationRuleFindManyArgs, TQueryFnData = Array<Prisma.ModerationRuleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findMany`, args, options, fetch);
}

export function useFindUniqueModerationRule<TArgs extends Prisma.ModerationRuleFindUniqueArgs, TQueryFnData = Prisma.ModerationRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueModerationRule<TArgs extends Prisma.ModerationRuleFindUniqueArgs, TQueryFnData = Prisma.ModerationRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findUnique`, args, options, fetch);
}

export function useFindFirstModerationRule<TArgs extends Prisma.ModerationRuleFindFirstArgs, TQueryFnData = Prisma.ModerationRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstModerationRule<TArgs extends Prisma.ModerationRuleFindFirstArgs, TQueryFnData = Prisma.ModerationRuleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/findFirst`, args, options, fetch);
}

export function useUpdateModerationRule(options?: Omit<(UseMutationOptions<(ModerationRule | undefined), DefaultError, Prisma.ModerationRuleUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleUpdateArgs, DefaultError, ModerationRule, true>('ModerationRule', 'PUT', `${endpoint}/moderationRule/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyModerationRule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationRuleUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationRule', 'PUT', `${endpoint}/moderationRule/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertModerationRule(options?: Omit<(UseMutationOptions<(ModerationRule | undefined), DefaultError, Prisma.ModerationRuleUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleUpsertArgs, DefaultError, ModerationRule, true>('ModerationRule', 'POST', `${endpoint}/moderationRule/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteModerationRule(options?: Omit<(UseMutationOptions<(ModerationRule | undefined), DefaultError, Prisma.ModerationRuleDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleDeleteArgs, DefaultError, ModerationRule, true>('ModerationRule', 'DELETE', `${endpoint}/moderationRule/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationRule, Prisma.ModerationRuleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyModerationRule(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationRuleDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationRuleDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationRule', 'DELETE', `${endpoint}/moderationRule/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationRuleDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationRuleDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationRuleDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateModerationRule<TArgs extends Prisma.ModerationRuleAggregateArgs, TQueryFnData = Prisma.GetModerationRuleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateModerationRule<TArgs extends Prisma.ModerationRuleAggregateArgs, TQueryFnData = Prisma.GetModerationRuleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/aggregate`, args, options, fetch);
}

export function useGroupByModerationRule<TArgs extends Prisma.ModerationRuleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationRuleGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationRuleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationRuleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationRuleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationRuleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationRuleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationRuleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByModerationRule<TArgs extends Prisma.ModerationRuleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationRuleGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationRuleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationRuleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationRuleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationRuleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationRuleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationRuleGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/groupBy`, args, options, fetch);
}

export function useCountModerationRule<TArgs extends Prisma.ModerationRuleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationRuleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/count`, args, options, fetch);
}

export function useSuspenseCountModerationRule<TArgs extends Prisma.ModerationRuleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationRuleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationRuleCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationRule', `${endpoint}/moderationRule/count`, args, options, fetch);
}
import type { ModerationRuleSurface } from '@prisma/client';

export function useCheckModerationRule<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; surface?: ModerationRuleSurface; isKeywordsPreferenceActive?: boolean; keywords?: string; isIntentDetectionPreferenceActive?: boolean; intents?: string; instagramModerationConfigId?: string; facebookModerationConfigId?: string; tiktokModerationConfigId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ModerationRule', `${endpoint}/moderationRule/check`, args, options, fetch);
}
