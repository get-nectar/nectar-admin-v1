/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyOrder } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyOrder(options?: Omit<(UseMutationOptions<(ShopifyOrder | undefined), DefaultError, Prisma.ShopifyOrderCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderCreateArgs, DefaultError, ShopifyOrder, true>('ShopifyOrder', 'POST', `${endpoint}/shopifyOrder/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyOrder(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyOrderCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyOrder', 'POST', `${endpoint}/shopifyOrder/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyOrder<TArgs extends Prisma.ShopifyOrderFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyOrder<TArgs extends Prisma.ShopifyOrderFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyOrder<TArgs extends Prisma.ShopifyOrderFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyOrder<TArgs extends Prisma.ShopifyOrderFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyOrder<TArgs extends Prisma.ShopifyOrderFindUniqueArgs, TQueryFnData = Prisma.ShopifyOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyOrder<TArgs extends Prisma.ShopifyOrderFindUniqueArgs, TQueryFnData = Prisma.ShopifyOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyOrder<TArgs extends Prisma.ShopifyOrderFindFirstArgs, TQueryFnData = Prisma.ShopifyOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyOrder<TArgs extends Prisma.ShopifyOrderFindFirstArgs, TQueryFnData = Prisma.ShopifyOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/findFirst`, args, options, fetch);
}

export function useUpdateShopifyOrder(options?: Omit<(UseMutationOptions<(ShopifyOrder | undefined), DefaultError, Prisma.ShopifyOrderUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderUpdateArgs, DefaultError, ShopifyOrder, true>('ShopifyOrder', 'PUT', `${endpoint}/shopifyOrder/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyOrder(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyOrderUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyOrder', 'PUT', `${endpoint}/shopifyOrder/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyOrder(options?: Omit<(UseMutationOptions<(ShopifyOrder | undefined), DefaultError, Prisma.ShopifyOrderUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderUpsertArgs, DefaultError, ShopifyOrder, true>('ShopifyOrder', 'POST', `${endpoint}/shopifyOrder/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyOrder(options?: Omit<(UseMutationOptions<(ShopifyOrder | undefined), DefaultError, Prisma.ShopifyOrderDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderDeleteArgs, DefaultError, ShopifyOrder, true>('ShopifyOrder', 'DELETE', `${endpoint}/shopifyOrder/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrder, Prisma.ShopifyOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyOrder(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyOrderDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyOrder', 'DELETE', `${endpoint}/shopifyOrder/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyOrder<TArgs extends Prisma.ShopifyOrderAggregateArgs, TQueryFnData = Prisma.GetShopifyOrderAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyOrder<TArgs extends Prisma.ShopifyOrderAggregateArgs, TQueryFnData = Prisma.GetShopifyOrderAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/aggregate`, args, options, fetch);
}

export function useGroupByShopifyOrder<TArgs extends Prisma.ShopifyOrderGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyOrderGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyOrderGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyOrderGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyOrderGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyOrderGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyOrder<TArgs extends Prisma.ShopifyOrderGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyOrderGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyOrderGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyOrderGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyOrderGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyOrderGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/groupBy`, args, options, fetch);
}

export function useCountShopifyOrder<TArgs extends Prisma.ShopifyOrderCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyOrderCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/count`, args, options, fetch);
}

export function useSuspenseCountShopifyOrder<TArgs extends Prisma.ShopifyOrderCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyOrderCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckShopifyOrder<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; customerId?: string; shopifyOrderId?: string; orderNumber?: string; cancelReason?: string; currencyCode?: CurrencyCode; isPaid?: boolean; fulfillmentStatus?: string; orderStatusUrl?: string; adminShopifyUrl?: string; shippingAddressId?: string; shippingCurrencyCode?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyOrder', `${endpoint}/shopifyOrder/check`, args, options, fetch);
}
