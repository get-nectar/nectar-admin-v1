/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PersonaTone } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePersonaTone(options?: Omit<(UseMutationOptions<(PersonaTone | undefined), DefaultError, Prisma.PersonaToneCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneCreateArgs, DefaultError, PersonaTone, true>('PersonaTone', 'POST', `${endpoint}/personaTone/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPersonaTone(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaToneCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaTone', 'POST', `${endpoint}/personaTone/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPersonaTone<TArgs extends Prisma.PersonaToneFindManyArgs, TQueryFnData = Array<Prisma.PersonaToneGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPersonaTone<TArgs extends Prisma.PersonaToneFindManyArgs, TQueryFnData = Array<Prisma.PersonaToneGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPersonaTone<TArgs extends Prisma.PersonaToneFindManyArgs, TQueryFnData = Array<Prisma.PersonaToneGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPersonaTone<TArgs extends Prisma.PersonaToneFindManyArgs, TQueryFnData = Array<Prisma.PersonaToneGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findMany`, args, options, fetch);
}

export function useFindUniquePersonaTone<TArgs extends Prisma.PersonaToneFindUniqueArgs, TQueryFnData = Prisma.PersonaToneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePersonaTone<TArgs extends Prisma.PersonaToneFindUniqueArgs, TQueryFnData = Prisma.PersonaToneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findUnique`, args, options, fetch);
}

export function useFindFirstPersonaTone<TArgs extends Prisma.PersonaToneFindFirstArgs, TQueryFnData = Prisma.PersonaToneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPersonaTone<TArgs extends Prisma.PersonaToneFindFirstArgs, TQueryFnData = Prisma.PersonaToneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/findFirst`, args, options, fetch);
}

export function useUpdatePersonaTone(options?: Omit<(UseMutationOptions<(PersonaTone | undefined), DefaultError, Prisma.PersonaToneUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneUpdateArgs, DefaultError, PersonaTone, true>('PersonaTone', 'PUT', `${endpoint}/personaTone/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPersonaTone(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaToneUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaTone', 'PUT', `${endpoint}/personaTone/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPersonaTone(options?: Omit<(UseMutationOptions<(PersonaTone | undefined), DefaultError, Prisma.PersonaToneUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneUpsertArgs, DefaultError, PersonaTone, true>('PersonaTone', 'POST', `${endpoint}/personaTone/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePersonaTone(options?: Omit<(UseMutationOptions<(PersonaTone | undefined), DefaultError, Prisma.PersonaToneDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneDeleteArgs, DefaultError, PersonaTone, true>('PersonaTone', 'DELETE', `${endpoint}/personaTone/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaTone, Prisma.PersonaToneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPersonaTone(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaToneDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaToneDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaTone', 'DELETE', `${endpoint}/personaTone/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaToneDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaToneDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaToneDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePersonaTone<TArgs extends Prisma.PersonaToneAggregateArgs, TQueryFnData = Prisma.GetPersonaToneAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaToneAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePersonaTone<TArgs extends Prisma.PersonaToneAggregateArgs, TQueryFnData = Prisma.GetPersonaToneAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaToneAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/aggregate`, args, options, fetch);
}

export function useGroupByPersonaTone<TArgs extends Prisma.PersonaToneGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaToneGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaToneGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaToneGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaToneGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaToneGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaToneGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaToneGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPersonaTone<TArgs extends Prisma.PersonaToneGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaToneGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaToneGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaToneGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaToneGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaToneGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaToneGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaToneGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/groupBy`, args, options, fetch);
}

export function useCountPersonaTone<TArgs extends Prisma.PersonaToneCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaToneCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/count`, args, options, fetch);
}

export function useSuspenseCountPersonaTone<TArgs extends Prisma.PersonaToneCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaToneCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaToneCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaTone', `${endpoint}/personaTone/count`, args, options, fetch);
}
import type { PersonaItemChannel, PersonaToneType } from '@prisma/client';

export function useCheckPersonaTone<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; personaId?: string; channelType?: PersonaItemChannel; toneType?: PersonaToneType; toneLevel?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PersonaTone', `${endpoint}/personaTone/check`, args, options, fetch);
}
