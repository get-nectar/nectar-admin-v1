/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyAbandonedCartLineItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCartLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCartLineItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemCreateArgs, DefaultError, ShopifyAbandonedCartLineItem, true>('ShopifyAbandonedCartLineItem', 'POST', `${endpoint}/shopifyAbandonedCartLineItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCartLineItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCartLineItem', 'POST', `${endpoint}/shopifyAbandonedCartLineItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCartLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/findFirst`, args, options, fetch);
}

export function useUpdateShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCartLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCartLineItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemUpdateArgs, DefaultError, ShopifyAbandonedCartLineItem, true>('ShopifyAbandonedCartLineItem', 'PUT', `${endpoint}/shopifyAbandonedCartLineItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCartLineItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCartLineItem', 'PUT', `${endpoint}/shopifyAbandonedCartLineItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCartLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCartLineItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemUpsertArgs, DefaultError, ShopifyAbandonedCartLineItem, true>('ShopifyAbandonedCartLineItem', 'POST', `${endpoint}/shopifyAbandonedCartLineItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCartLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCartLineItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemDeleteArgs, DefaultError, ShopifyAbandonedCartLineItem, true>('ShopifyAbandonedCartLineItem', 'DELETE', `${endpoint}/shopifyAbandonedCartLineItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCartLineItem, Prisma.ShopifyAbandonedCartLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyAbandonedCartLineItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCartLineItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartLineItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCartLineItem', 'DELETE', `${endpoint}/shopifyAbandonedCartLineItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartLineItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartLineItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCartLineItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCartLineItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/aggregate`, args, options, fetch);
}

export function useGroupByShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCartLineItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCartLineItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCartLineItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCartLineItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartLineItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartLineItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCartLineItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCartLineItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCartLineItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCartLineItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCartLineItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartLineItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartLineItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCartLineItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/groupBy`, args, options, fetch);
}

export function useCountShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCartLineItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/count`, args, options, fetch);
}

export function useSuspenseCountShopifyAbandonedCartLineItem<TArgs extends Prisma.ShopifyAbandonedCartLineItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCartLineItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartLineItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckShopifyAbandonedCartLineItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; cartId?: string; productId?: string; title?: string; quantity?: number; price?: string; currency?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyAbandonedCartLineItem', `${endpoint}/shopifyAbandonedCartLineItem/check`, args, options, fetch);
}
