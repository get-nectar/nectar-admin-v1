/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalContent } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalContent(options?: Omit<(UseMutationOptions<(GlobalContent | undefined), DefaultError, Prisma.GlobalContentCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentCreateArgs, DefaultError, GlobalContent, true>('GlobalContent', 'POST', `${endpoint}/globalContent/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalContent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalContentCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalContent', 'POST', `${endpoint}/globalContent/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalContent<TArgs extends Prisma.GlobalContentFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalContent<TArgs extends Prisma.GlobalContentFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalContent<TArgs extends Prisma.GlobalContentFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalContent<TArgs extends Prisma.GlobalContentFindManyArgs, TQueryFnData = Array<Prisma.GlobalContentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalContent<TArgs extends Prisma.GlobalContentFindUniqueArgs, TQueryFnData = Prisma.GlobalContentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalContent<TArgs extends Prisma.GlobalContentFindUniqueArgs, TQueryFnData = Prisma.GlobalContentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalContent<TArgs extends Prisma.GlobalContentFindFirstArgs, TQueryFnData = Prisma.GlobalContentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalContent<TArgs extends Prisma.GlobalContentFindFirstArgs, TQueryFnData = Prisma.GlobalContentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/findFirst`, args, options, fetch);
}

export function useUpdateGlobalContent(options?: Omit<(UseMutationOptions<(GlobalContent | undefined), DefaultError, Prisma.GlobalContentUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentUpdateArgs, DefaultError, GlobalContent, true>('GlobalContent', 'PUT', `${endpoint}/globalContent/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalContent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalContentUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalContent', 'PUT', `${endpoint}/globalContent/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalContent(options?: Omit<(UseMutationOptions<(GlobalContent | undefined), DefaultError, Prisma.GlobalContentUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentUpsertArgs, DefaultError, GlobalContent, true>('GlobalContent', 'POST', `${endpoint}/globalContent/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalContent(options?: Omit<(UseMutationOptions<(GlobalContent | undefined), DefaultError, Prisma.GlobalContentDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentDeleteArgs, DefaultError, GlobalContent, true>('GlobalContent', 'DELETE', `${endpoint}/globalContent/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalContent, Prisma.GlobalContentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalContent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalContentDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalContentDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalContent', 'DELETE', `${endpoint}/globalContent/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalContentDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalContentDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalContentDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalContent<TArgs extends Prisma.GlobalContentAggregateArgs, TQueryFnData = Prisma.GetGlobalContentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalContent<TArgs extends Prisma.GlobalContentAggregateArgs, TQueryFnData = Prisma.GetGlobalContentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalContentAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/aggregate`, args, options, fetch);
}

export function useGroupByGlobalContent<TArgs extends Prisma.GlobalContentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalContentGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalContentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalContentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalContentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalContentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalContent<TArgs extends Prisma.GlobalContentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalContentGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalContentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalContentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalContentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalContentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalContentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/groupBy`, args, options, fetch);
}

export function useCountGlobalContent<TArgs extends Prisma.GlobalContentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalContentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/count`, args, options, fetch);
}

export function useSuspenseCountGlobalContent<TArgs extends Prisma.GlobalContentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalContentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalContentCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalContent', `${endpoint}/globalContent/count`, args, options, fetch);
}
import type { Platform, ContentType, ContentSource, ContentAnalysisStatus } from '@prisma/client';

export function useCheckGlobalContent<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; platform?: Platform; authorId?: string; platformContentId?: string; contentType?: ContentType; sourceType?: ContentSource; caption?: string; permalink?: string; analysisStatus?: ContentAnalysisStatus; keywords?: string; isDeleted?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalContent', `${endpoint}/globalContent/check`, args, options, fetch);
}
