/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityMemberFacebookProfileData } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookProfileData | undefined), DefaultError, Prisma.CommunityMemberFacebookProfileDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataCreateArgs, DefaultError, CommunityMemberFacebookProfileData, true>('CommunityMemberFacebookProfileData', 'POST', `${endpoint}/communityMemberFacebookProfileData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberFacebookProfileDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberFacebookProfileData', 'POST', `${endpoint}/communityMemberFacebookProfileData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberFacebookProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/findFirst`, args, options, fetch);
}

export function useUpdateCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookProfileData | undefined), DefaultError, Prisma.CommunityMemberFacebookProfileDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataUpdateArgs, DefaultError, CommunityMemberFacebookProfileData, true>('CommunityMemberFacebookProfileData', 'PUT', `${endpoint}/communityMemberFacebookProfileData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberFacebookProfileDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberFacebookProfileData', 'PUT', `${endpoint}/communityMemberFacebookProfileData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookProfileData | undefined), DefaultError, Prisma.CommunityMemberFacebookProfileDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataUpsertArgs, DefaultError, CommunityMemberFacebookProfileData, true>('CommunityMemberFacebookProfileData', 'POST', `${endpoint}/communityMemberFacebookProfileData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookProfileData | undefined), DefaultError, Prisma.CommunityMemberFacebookProfileDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataDeleteArgs, DefaultError, CommunityMemberFacebookProfileData, true>('CommunityMemberFacebookProfileData', 'DELETE', `${endpoint}/communityMemberFacebookProfileData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookProfileData, Prisma.CommunityMemberFacebookProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityMemberFacebookProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberFacebookProfileDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookProfileDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberFacebookProfileData', 'DELETE', `${endpoint}/communityMemberFacebookProfileData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookProfileDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookProfileDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberFacebookProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberFacebookProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/aggregate`, args, options, fetch);
}

export function useGroupByCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberFacebookProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberFacebookProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberFacebookProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberFacebookProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberFacebookProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberFacebookProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberFacebookProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberFacebookProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberFacebookProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberFacebookProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/groupBy`, args, options, fetch);
}

export function useCountCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberFacebookProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/count`, args, options, fetch);
}

export function useSuspenseCountCommunityMemberFacebookProfileData<TArgs extends Prisma.CommunityMemberFacebookProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberFacebookProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookProfileDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/count`, args, options, fetch);
}

export function useCheckCommunityMemberFacebookProfileData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; name?: string; facebookAppScopedId?: string; isVerified?: boolean; profilePictureUri?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityMemberFacebookProfileData', `${endpoint}/communityMemberFacebookProfileData/check`, args, options, fetch);
}
