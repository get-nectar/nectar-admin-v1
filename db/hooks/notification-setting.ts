/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, NotificationSetting } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateNotificationSetting(options?: Omit<(UseMutationOptions<(NotificationSetting | undefined), DefaultError, Prisma.NotificationSettingCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingCreateArgs, DefaultError, NotificationSetting, true>('NotificationSetting', 'POST', `${endpoint}/notificationSetting/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyNotificationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.NotificationSettingCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('NotificationSetting', 'POST', `${endpoint}/notificationSetting/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyNotificationSetting<TArgs extends Prisma.NotificationSettingFindManyArgs, TQueryFnData = Array<Prisma.NotificationSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findMany`, args, options, fetch);
}

export function useInfiniteFindManyNotificationSetting<TArgs extends Prisma.NotificationSettingFindManyArgs, TQueryFnData = Array<Prisma.NotificationSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findMany`, args, options, fetch);
}

export function useSuspenseFindManyNotificationSetting<TArgs extends Prisma.NotificationSettingFindManyArgs, TQueryFnData = Array<Prisma.NotificationSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyNotificationSetting<TArgs extends Prisma.NotificationSettingFindManyArgs, TQueryFnData = Array<Prisma.NotificationSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findMany`, args, options, fetch);
}

export function useFindUniqueNotificationSetting<TArgs extends Prisma.NotificationSettingFindUniqueArgs, TQueryFnData = Prisma.NotificationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueNotificationSetting<TArgs extends Prisma.NotificationSettingFindUniqueArgs, TQueryFnData = Prisma.NotificationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findUnique`, args, options, fetch);
}

export function useFindFirstNotificationSetting<TArgs extends Prisma.NotificationSettingFindFirstArgs, TQueryFnData = Prisma.NotificationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstNotificationSetting<TArgs extends Prisma.NotificationSettingFindFirstArgs, TQueryFnData = Prisma.NotificationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/findFirst`, args, options, fetch);
}

export function useUpdateNotificationSetting(options?: Omit<(UseMutationOptions<(NotificationSetting | undefined), DefaultError, Prisma.NotificationSettingUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingUpdateArgs, DefaultError, NotificationSetting, true>('NotificationSetting', 'PUT', `${endpoint}/notificationSetting/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyNotificationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.NotificationSettingUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('NotificationSetting', 'PUT', `${endpoint}/notificationSetting/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertNotificationSetting(options?: Omit<(UseMutationOptions<(NotificationSetting | undefined), DefaultError, Prisma.NotificationSettingUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingUpsertArgs, DefaultError, NotificationSetting, true>('NotificationSetting', 'POST', `${endpoint}/notificationSetting/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteNotificationSetting(options?: Omit<(UseMutationOptions<(NotificationSetting | undefined), DefaultError, Prisma.NotificationSettingDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingDeleteArgs, DefaultError, NotificationSetting, true>('NotificationSetting', 'DELETE', `${endpoint}/notificationSetting/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NotificationSetting, Prisma.NotificationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyNotificationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.NotificationSettingDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NotificationSettingDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('NotificationSetting', 'DELETE', `${endpoint}/notificationSetting/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NotificationSettingDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.NotificationSettingDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.NotificationSettingDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateNotificationSetting<TArgs extends Prisma.NotificationSettingAggregateArgs, TQueryFnData = Prisma.GetNotificationSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateNotificationSetting<TArgs extends Prisma.NotificationSettingAggregateArgs, TQueryFnData = Prisma.GetNotificationSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/aggregate`, args, options, fetch);
}

export function useGroupByNotificationSetting<TArgs extends Prisma.NotificationSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.NotificationSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.NotificationSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.NotificationSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.NotificationSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.NotificationSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.NotificationSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.NotificationSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByNotificationSetting<TArgs extends Prisma.NotificationSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.NotificationSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.NotificationSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.NotificationSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.NotificationSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.NotificationSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.NotificationSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.NotificationSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/groupBy`, args, options, fetch);
}

export function useCountNotificationSetting<TArgs extends Prisma.NotificationSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.NotificationSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/count`, args, options, fetch);
}

export function useSuspenseCountNotificationSetting<TArgs extends Prisma.NotificationSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.NotificationSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NotificationSettingCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NotificationSetting', `${endpoint}/notificationSetting/count`, args, options, fetch);
}
import type { NotificationSubscriptionType } from '@prisma/client';

export function useCheckNotificationSetting<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; workspaceUserId?: string; sendEmailNotification?: boolean; sendSlackNotification?: boolean; notificationType?: NotificationSubscriptionType }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('NotificationSetting', `${endpoint}/notificationSetting/check`, args, options, fetch);
}
