/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, FacebookInboxRuleTrigger } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<(FacebookInboxRuleTrigger | undefined), DefaultError, Prisma.FacebookInboxRuleTriggerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerCreateArgs, DefaultError, FacebookInboxRuleTrigger, true>('FacebookInboxRuleTrigger', 'POST', `${endpoint}/facebookInboxRuleTrigger/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookInboxRuleTriggerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookInboxRuleTrigger', 'POST', `${endpoint}/facebookInboxRuleTrigger/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useInfiniteFindManyFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookInboxRuleTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useSuspenseFindManyFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookInboxRuleTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findMany`, args, options, fetch);
}

export function useFindUniqueFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindUniqueArgs, TQueryFnData = Prisma.FacebookInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindUniqueArgs, TQueryFnData = Prisma.FacebookInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findUnique`, args, options, fetch);
}

export function useFindFirstFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindFirstArgs, TQueryFnData = Prisma.FacebookInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerFindFirstArgs, TQueryFnData = Prisma.FacebookInboxRuleTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/findFirst`, args, options, fetch);
}

export function useUpdateFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<(FacebookInboxRuleTrigger | undefined), DefaultError, Prisma.FacebookInboxRuleTriggerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerUpdateArgs, DefaultError, FacebookInboxRuleTrigger, true>('FacebookInboxRuleTrigger', 'PUT', `${endpoint}/facebookInboxRuleTrigger/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookInboxRuleTriggerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookInboxRuleTrigger', 'PUT', `${endpoint}/facebookInboxRuleTrigger/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<(FacebookInboxRuleTrigger | undefined), DefaultError, Prisma.FacebookInboxRuleTriggerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerUpsertArgs, DefaultError, FacebookInboxRuleTrigger, true>('FacebookInboxRuleTrigger', 'POST', `${endpoint}/facebookInboxRuleTrigger/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<(FacebookInboxRuleTrigger | undefined), DefaultError, Prisma.FacebookInboxRuleTriggerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerDeleteArgs, DefaultError, FacebookInboxRuleTrigger, true>('FacebookInboxRuleTrigger', 'DELETE', `${endpoint}/facebookInboxRuleTrigger/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookInboxRuleTrigger, Prisma.FacebookInboxRuleTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyFacebookInboxRuleTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookInboxRuleTriggerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookInboxRuleTriggerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookInboxRuleTrigger', 'DELETE', `${endpoint}/facebookInboxRuleTrigger/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookInboxRuleTriggerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookInboxRuleTriggerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerAggregateArgs, TQueryFnData = Prisma.GetFacebookInboxRuleTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerAggregateArgs, TQueryFnData = Prisma.GetFacebookInboxRuleTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/aggregate`, args, options, fetch);
}

export function useGroupByFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookInboxRuleTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookInboxRuleTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookInboxRuleTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookInboxRuleTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookInboxRuleTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookInboxRuleTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookInboxRuleTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookInboxRuleTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookInboxRuleTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookInboxRuleTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookInboxRuleTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookInboxRuleTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookInboxRuleTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookInboxRuleTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/groupBy`, args, options, fetch);
}

export function useCountFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookInboxRuleTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/count`, args, options, fetch);
}

export function useSuspenseCountFacebookInboxRuleTrigger<TArgs extends Prisma.FacebookInboxRuleTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookInboxRuleTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookInboxRuleTriggerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/count`, args, options, fetch);
}
import type { FacebookTriggerEvent } from '@prisma/client';

export function useCheckFacebookInboxRuleTrigger<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; inboxRuleTriggerId?: string; event?: FacebookTriggerEvent }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('FacebookInboxRuleTrigger', `${endpoint}/facebookInboxRuleTrigger/check`, args, options, fetch);
}
