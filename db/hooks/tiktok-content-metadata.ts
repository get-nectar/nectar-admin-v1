/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TiktokContentMetadata } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTiktokContentMetadata(options?: Omit<(UseMutationOptions<(TiktokContentMetadata | undefined), DefaultError, Prisma.TiktokContentMetadataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataCreateArgs, DefaultError, TiktokContentMetadata, true>('TiktokContentMetadata', 'POST', `${endpoint}/tiktokContentMetadata/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTiktokContentMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TiktokContentMetadataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TiktokContentMetadata', 'POST', `${endpoint}/tiktokContentMetadata/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindManyArgs, TQueryFnData = Array<Prisma.TiktokContentMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindManyArgs, TQueryFnData = Array<Prisma.TiktokContentMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindManyArgs, TQueryFnData = Array<Prisma.TiktokContentMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindManyArgs, TQueryFnData = Array<Prisma.TiktokContentMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findMany`, args, options, fetch);
}

export function useFindUniqueTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindUniqueArgs, TQueryFnData = Prisma.TiktokContentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindUniqueArgs, TQueryFnData = Prisma.TiktokContentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findUnique`, args, options, fetch);
}

export function useFindFirstTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindFirstArgs, TQueryFnData = Prisma.TiktokContentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataFindFirstArgs, TQueryFnData = Prisma.TiktokContentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/findFirst`, args, options, fetch);
}

export function useUpdateTiktokContentMetadata(options?: Omit<(UseMutationOptions<(TiktokContentMetadata | undefined), DefaultError, Prisma.TiktokContentMetadataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataUpdateArgs, DefaultError, TiktokContentMetadata, true>('TiktokContentMetadata', 'PUT', `${endpoint}/tiktokContentMetadata/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTiktokContentMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TiktokContentMetadataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TiktokContentMetadata', 'PUT', `${endpoint}/tiktokContentMetadata/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTiktokContentMetadata(options?: Omit<(UseMutationOptions<(TiktokContentMetadata | undefined), DefaultError, Prisma.TiktokContentMetadataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataUpsertArgs, DefaultError, TiktokContentMetadata, true>('TiktokContentMetadata', 'POST', `${endpoint}/tiktokContentMetadata/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTiktokContentMetadata(options?: Omit<(UseMutationOptions<(TiktokContentMetadata | undefined), DefaultError, Prisma.TiktokContentMetadataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataDeleteArgs, DefaultError, TiktokContentMetadata, true>('TiktokContentMetadata', 'DELETE', `${endpoint}/tiktokContentMetadata/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokContentMetadata, Prisma.TiktokContentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTiktokContentMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TiktokContentMetadataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokContentMetadataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TiktokContentMetadata', 'DELETE', `${endpoint}/tiktokContentMetadata/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokContentMetadataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokContentMetadataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TiktokContentMetadataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataAggregateArgs, TQueryFnData = Prisma.GetTiktokContentMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataAggregateArgs, TQueryFnData = Prisma.GetTiktokContentMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/aggregate`, args, options, fetch);
}

export function useGroupByTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TiktokContentMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.TiktokContentMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TiktokContentMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TiktokContentMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokContentMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokContentMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TiktokContentMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TiktokContentMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.TiktokContentMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TiktokContentMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TiktokContentMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokContentMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokContentMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TiktokContentMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/groupBy`, args, options, fetch);
}

export function useCountTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TiktokContentMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/count`, args, options, fetch);
}

export function useSuspenseCountTiktokContentMetadata<TArgs extends Prisma.TiktokContentMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TiktokContentMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokContentMetadataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/count`, args, options, fetch);
}
import type { TiktokIdentityType } from '@prisma/client';

export function useCheckTiktokContentMetadata<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; tiktokAdId?: string; tiktokIdentityId?: string; tiktokIdentityType?: TiktokIdentityType; contentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TiktokContentMetadata', `${endpoint}/tiktokContentMetadata/check`, args, options, fetch);
}
