/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokSearchQueryTracker } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<(TikTokSearchQueryTracker | undefined), DefaultError, Prisma.TikTokSearchQueryTrackerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerCreateArgs, DefaultError, TikTokSearchQueryTracker, true>('TikTokSearchQueryTracker', 'POST', `${endpoint}/tikTokSearchQueryTracker/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokSearchQueryTrackerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokSearchQueryTracker', 'POST', `${endpoint}/tikTokSearchQueryTracker/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokSearchQueryTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokSearchQueryTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokSearchQueryTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindManyArgs, TQueryFnData = Array<Prisma.TikTokSearchQueryTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindUniqueArgs, TQueryFnData = Prisma.TikTokSearchQueryTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindUniqueArgs, TQueryFnData = Prisma.TikTokSearchQueryTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindFirstArgs, TQueryFnData = Prisma.TikTokSearchQueryTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerFindFirstArgs, TQueryFnData = Prisma.TikTokSearchQueryTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/findFirst`, args, options, fetch);
}

export function useUpdateTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<(TikTokSearchQueryTracker | undefined), DefaultError, Prisma.TikTokSearchQueryTrackerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerUpdateArgs, DefaultError, TikTokSearchQueryTracker, true>('TikTokSearchQueryTracker', 'PUT', `${endpoint}/tikTokSearchQueryTracker/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokSearchQueryTrackerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokSearchQueryTracker', 'PUT', `${endpoint}/tikTokSearchQueryTracker/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<(TikTokSearchQueryTracker | undefined), DefaultError, Prisma.TikTokSearchQueryTrackerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerUpsertArgs, DefaultError, TikTokSearchQueryTracker, true>('TikTokSearchQueryTracker', 'POST', `${endpoint}/tikTokSearchQueryTracker/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<(TikTokSearchQueryTracker | undefined), DefaultError, Prisma.TikTokSearchQueryTrackerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerDeleteArgs, DefaultError, TikTokSearchQueryTracker, true>('TikTokSearchQueryTracker', 'DELETE', `${endpoint}/tikTokSearchQueryTracker/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokSearchQueryTracker, Prisma.TikTokSearchQueryTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokSearchQueryTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokSearchQueryTrackerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokSearchQueryTrackerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokSearchQueryTracker', 'DELETE', `${endpoint}/tikTokSearchQueryTracker/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokSearchQueryTrackerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokSearchQueryTrackerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerAggregateArgs, TQueryFnData = Prisma.GetTikTokSearchQueryTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerAggregateArgs, TQueryFnData = Prisma.GetTikTokSearchQueryTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/aggregate`, args, options, fetch);
}

export function useGroupByTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokSearchQueryTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokSearchQueryTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokSearchQueryTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokSearchQueryTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokSearchQueryTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokSearchQueryTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokSearchQueryTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokSearchQueryTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokSearchQueryTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokSearchQueryTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokSearchQueryTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokSearchQueryTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokSearchQueryTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokSearchQueryTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/groupBy`, args, options, fetch);
}

export function useCountTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokSearchQueryTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/count`, args, options, fetch);
}

export function useSuspenseCountTikTokSearchQueryTracker<TArgs extends Prisma.TikTokSearchQueryTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokSearchQueryTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokSearchQueryTrackerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/count`, args, options, fetch);
}
import type { SearchQueryPriority, TikTokTrackerStatus } from '@prisma/client';

export function useCheckTikTokSearchQueryTracker<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; searchQuery?: string; priority?: SearchQueryPriority; lastRunId?: string; lastRunStatus?: TikTokTrackerStatus; isActiveOnBrand?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokSearchQueryTracker', `${endpoint}/tikTokSearchQueryTracker/check`, args, options, fetch);
}
