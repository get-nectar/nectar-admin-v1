/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokOrderReturnProduct } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<(TikTokOrderReturnProduct | undefined), DefaultError, Prisma.TikTokOrderReturnProductCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductCreateArgs, DefaultError, TikTokOrderReturnProduct, true>('TikTokOrderReturnProduct', 'POST', `${endpoint}/tikTokOrderReturnProduct/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderReturnProductCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrderReturnProduct', 'POST', `${endpoint}/tikTokOrderReturnProduct/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnProductGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnProductGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnProductGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnProductGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindUniqueArgs, TQueryFnData = Prisma.TikTokOrderReturnProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindUniqueArgs, TQueryFnData = Prisma.TikTokOrderReturnProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindFirstArgs, TQueryFnData = Prisma.TikTokOrderReturnProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductFindFirstArgs, TQueryFnData = Prisma.TikTokOrderReturnProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/findFirst`, args, options, fetch);
}

export function useUpdateTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<(TikTokOrderReturnProduct | undefined), DefaultError, Prisma.TikTokOrderReturnProductUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductUpdateArgs, DefaultError, TikTokOrderReturnProduct, true>('TikTokOrderReturnProduct', 'PUT', `${endpoint}/tikTokOrderReturnProduct/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderReturnProductUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrderReturnProduct', 'PUT', `${endpoint}/tikTokOrderReturnProduct/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<(TikTokOrderReturnProduct | undefined), DefaultError, Prisma.TikTokOrderReturnProductUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductUpsertArgs, DefaultError, TikTokOrderReturnProduct, true>('TikTokOrderReturnProduct', 'POST', `${endpoint}/tikTokOrderReturnProduct/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<(TikTokOrderReturnProduct | undefined), DefaultError, Prisma.TikTokOrderReturnProductDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductDeleteArgs, DefaultError, TikTokOrderReturnProduct, true>('TikTokOrderReturnProduct', 'DELETE', `${endpoint}/tikTokOrderReturnProduct/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturnProduct, Prisma.TikTokOrderReturnProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokOrderReturnProduct(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderReturnProductDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnProductDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrderReturnProduct', 'DELETE', `${endpoint}/tikTokOrderReturnProduct/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnProductDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnProductDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductAggregateArgs, TQueryFnData = Prisma.GetTikTokOrderReturnProductAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductAggregateArgs, TQueryFnData = Prisma.GetTikTokOrderReturnProductAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/aggregate`, args, options, fetch);
}

export function useGroupByTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokOrderReturnProductGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokOrderReturnProductGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokOrderReturnProductGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokOrderReturnProductGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnProductGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnProductGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokOrderReturnProductGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokOrderReturnProductGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokOrderReturnProductGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokOrderReturnProductGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokOrderReturnProductGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnProductGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnProductGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokOrderReturnProductGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/groupBy`, args, options, fetch);
}

export function useCountTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokOrderReturnProductCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/count`, args, options, fetch);
}

export function useSuspenseCountTikTokOrderReturnProduct<TArgs extends Prisma.TikTokOrderReturnProductCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokOrderReturnProductCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnProductCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/count`, args, options, fetch);
}

export function useCheckTikTokOrderReturnProduct<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; returnId?: string; orderProductId?: string; refundTotal?: string; refundSubtotal?: string; refundShippingFee?: string; refundTax?: string; retailDeliveryFee?: string; buyerServiceFee?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokOrderReturnProduct', `${endpoint}/tikTokOrderReturnProduct/check`, args, options, fetch);
}
