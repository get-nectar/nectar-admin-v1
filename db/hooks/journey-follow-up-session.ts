/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, JourneyFollowUpSession } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateJourneyFollowUpSession(options?: Omit<(UseMutationOptions<(JourneyFollowUpSession | undefined), DefaultError, Prisma.JourneyFollowUpSessionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionCreateArgs, DefaultError, JourneyFollowUpSession, true>('JourneyFollowUpSession', 'POST', `${endpoint}/journeyFollowUpSession/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyJourneyFollowUpSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyFollowUpSessionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyFollowUpSession', 'POST', `${endpoint}/journeyFollowUpSession/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindManyArgs, TQueryFnData = Array<Prisma.JourneyFollowUpSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findMany`, args, options, fetch);
}

export function useInfiniteFindManyJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindManyArgs, TQueryFnData = Array<Prisma.JourneyFollowUpSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findMany`, args, options, fetch);
}

export function useSuspenseFindManyJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindManyArgs, TQueryFnData = Array<Prisma.JourneyFollowUpSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindManyArgs, TQueryFnData = Array<Prisma.JourneyFollowUpSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findMany`, args, options, fetch);
}

export function useFindUniqueJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindUniqueArgs, TQueryFnData = Prisma.JourneyFollowUpSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindUniqueArgs, TQueryFnData = Prisma.JourneyFollowUpSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findUnique`, args, options, fetch);
}

export function useFindFirstJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindFirstArgs, TQueryFnData = Prisma.JourneyFollowUpSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionFindFirstArgs, TQueryFnData = Prisma.JourneyFollowUpSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/findFirst`, args, options, fetch);
}

export function useUpdateJourneyFollowUpSession(options?: Omit<(UseMutationOptions<(JourneyFollowUpSession | undefined), DefaultError, Prisma.JourneyFollowUpSessionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionUpdateArgs, DefaultError, JourneyFollowUpSession, true>('JourneyFollowUpSession', 'PUT', `${endpoint}/journeyFollowUpSession/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyJourneyFollowUpSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyFollowUpSessionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyFollowUpSession', 'PUT', `${endpoint}/journeyFollowUpSession/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertJourneyFollowUpSession(options?: Omit<(UseMutationOptions<(JourneyFollowUpSession | undefined), DefaultError, Prisma.JourneyFollowUpSessionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionUpsertArgs, DefaultError, JourneyFollowUpSession, true>('JourneyFollowUpSession', 'POST', `${endpoint}/journeyFollowUpSession/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteJourneyFollowUpSession(options?: Omit<(UseMutationOptions<(JourneyFollowUpSession | undefined), DefaultError, Prisma.JourneyFollowUpSessionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionDeleteArgs, DefaultError, JourneyFollowUpSession, true>('JourneyFollowUpSession', 'DELETE', `${endpoint}/journeyFollowUpSession/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyFollowUpSession, Prisma.JourneyFollowUpSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyJourneyFollowUpSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyFollowUpSessionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyFollowUpSessionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyFollowUpSession', 'DELETE', `${endpoint}/journeyFollowUpSession/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyFollowUpSessionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyFollowUpSessionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionAggregateArgs, TQueryFnData = Prisma.GetJourneyFollowUpSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionAggregateArgs, TQueryFnData = Prisma.GetJourneyFollowUpSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/aggregate`, args, options, fetch);
}

export function useGroupByJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneyFollowUpSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneyFollowUpSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneyFollowUpSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneyFollowUpSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyFollowUpSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyFollowUpSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneyFollowUpSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneyFollowUpSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneyFollowUpSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneyFollowUpSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneyFollowUpSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyFollowUpSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyFollowUpSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneyFollowUpSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/groupBy`, args, options, fetch);
}

export function useCountJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneyFollowUpSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/count`, args, options, fetch);
}

export function useSuspenseCountJourneyFollowUpSession<TArgs extends Prisma.JourneyFollowUpSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneyFollowUpSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyFollowUpSessionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/count`, args, options, fetch);
}
import type { JourneyFollowUpAudience, JourneyFollowUpStatus } from '@prisma/client';

export function useCheckJourneyFollowUpSession<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; followUpType?: JourneyFollowUpAudience; status?: JourneyFollowUpStatus; blockId?: string; journeySessionId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('JourneyFollowUpSession', `${endpoint}/journeyFollowUpSession/check`, args, options, fetch);
}
