/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ThirdPartyApp } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateThirdPartyApp(options?: Omit<(UseMutationOptions<(ThirdPartyApp | undefined), DefaultError, Prisma.ThirdPartyAppCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppCreateArgs, DefaultError, ThirdPartyApp, true>('ThirdPartyApp', 'POST', `${endpoint}/thirdPartyApp/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyThirdPartyApp(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ThirdPartyAppCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ThirdPartyApp', 'POST', `${endpoint}/thirdPartyApp/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findMany`, args, options, fetch);
}

export function useInfiniteFindManyThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findMany`, args, options, fetch);
}

export function useSuspenseFindManyThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findMany`, args, options, fetch);
}

export function useFindUniqueThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindUniqueArgs, TQueryFnData = Prisma.ThirdPartyAppGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindUniqueArgs, TQueryFnData = Prisma.ThirdPartyAppGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findUnique`, args, options, fetch);
}

export function useFindFirstThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindFirstArgs, TQueryFnData = Prisma.ThirdPartyAppGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstThirdPartyApp<TArgs extends Prisma.ThirdPartyAppFindFirstArgs, TQueryFnData = Prisma.ThirdPartyAppGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/findFirst`, args, options, fetch);
}

export function useUpdateThirdPartyApp(options?: Omit<(UseMutationOptions<(ThirdPartyApp | undefined), DefaultError, Prisma.ThirdPartyAppUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppUpdateArgs, DefaultError, ThirdPartyApp, true>('ThirdPartyApp', 'PUT', `${endpoint}/thirdPartyApp/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyThirdPartyApp(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ThirdPartyAppUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ThirdPartyApp', 'PUT', `${endpoint}/thirdPartyApp/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertThirdPartyApp(options?: Omit<(UseMutationOptions<(ThirdPartyApp | undefined), DefaultError, Prisma.ThirdPartyAppUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppUpsertArgs, DefaultError, ThirdPartyApp, true>('ThirdPartyApp', 'POST', `${endpoint}/thirdPartyApp/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteThirdPartyApp(options?: Omit<(UseMutationOptions<(ThirdPartyApp | undefined), DefaultError, Prisma.ThirdPartyAppDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppDeleteArgs, DefaultError, ThirdPartyApp, true>('ThirdPartyApp', 'DELETE', `${endpoint}/thirdPartyApp/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyApp, Prisma.ThirdPartyAppGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyThirdPartyApp(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ThirdPartyAppDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ThirdPartyApp', 'DELETE', `${endpoint}/thirdPartyApp/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateThirdPartyApp<TArgs extends Prisma.ThirdPartyAppAggregateArgs, TQueryFnData = Prisma.GetThirdPartyAppAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateThirdPartyApp<TArgs extends Prisma.ThirdPartyAppAggregateArgs, TQueryFnData = Prisma.GetThirdPartyAppAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/aggregate`, args, options, fetch);
}

export function useGroupByThirdPartyApp<TArgs extends Prisma.ThirdPartyAppGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ThirdPartyAppGroupByArgs['orderBy'] } : { orderBy?: Prisma.ThirdPartyAppGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ThirdPartyAppGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ThirdPartyAppGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ThirdPartyAppGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByThirdPartyApp<TArgs extends Prisma.ThirdPartyAppGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ThirdPartyAppGroupByArgs['orderBy'] } : { orderBy?: Prisma.ThirdPartyAppGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ThirdPartyAppGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ThirdPartyAppGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ThirdPartyAppGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/groupBy`, args, options, fetch);
}

export function useCountThirdPartyApp<TArgs extends Prisma.ThirdPartyAppCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ThirdPartyAppCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/count`, args, options, fetch);
}

export function useSuspenseCountThirdPartyApp<TArgs extends Prisma.ThirdPartyAppCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ThirdPartyAppCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/count`, args, options, fetch);
}
import type { ThirdPartyAppAccessScope } from '@prisma/client';

export function useCheckThirdPartyApp<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; iconUri?: string; clientSecret?: string; redirectUris?: string; appScopes?: ThirdPartyAppAccessScope; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ThirdPartyApp', `${endpoint}/thirdPartyApp/check`, args, options, fetch);
}
