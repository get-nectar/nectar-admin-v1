/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommentOwner } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommentOwner(options?: Omit<(UseMutationOptions<(CommentOwner | undefined), DefaultError, Prisma.CommentOwnerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerCreateArgs, DefaultError, CommentOwner, true>('CommentOwner', 'POST', `${endpoint}/commentOwner/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommentOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommentOwnerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommentOwner', 'POST', `${endpoint}/commentOwner/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommentOwner<TArgs extends Prisma.CommentOwnerFindManyArgs, TQueryFnData = Array<Prisma.CommentOwnerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommentOwner<TArgs extends Prisma.CommentOwnerFindManyArgs, TQueryFnData = Array<Prisma.CommentOwnerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommentOwner<TArgs extends Prisma.CommentOwnerFindManyArgs, TQueryFnData = Array<Prisma.CommentOwnerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommentOwner<TArgs extends Prisma.CommentOwnerFindManyArgs, TQueryFnData = Array<Prisma.CommentOwnerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findMany`, args, options, fetch);
}

export function useFindUniqueCommentOwner<TArgs extends Prisma.CommentOwnerFindUniqueArgs, TQueryFnData = Prisma.CommentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommentOwner<TArgs extends Prisma.CommentOwnerFindUniqueArgs, TQueryFnData = Prisma.CommentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findUnique`, args, options, fetch);
}

export function useFindFirstCommentOwner<TArgs extends Prisma.CommentOwnerFindFirstArgs, TQueryFnData = Prisma.CommentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommentOwner<TArgs extends Prisma.CommentOwnerFindFirstArgs, TQueryFnData = Prisma.CommentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/findFirst`, args, options, fetch);
}

export function useUpdateCommentOwner(options?: Omit<(UseMutationOptions<(CommentOwner | undefined), DefaultError, Prisma.CommentOwnerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerUpdateArgs, DefaultError, CommentOwner, true>('CommentOwner', 'PUT', `${endpoint}/commentOwner/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommentOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommentOwnerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommentOwner', 'PUT', `${endpoint}/commentOwner/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommentOwner(options?: Omit<(UseMutationOptions<(CommentOwner | undefined), DefaultError, Prisma.CommentOwnerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerUpsertArgs, DefaultError, CommentOwner, true>('CommentOwner', 'POST', `${endpoint}/commentOwner/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommentOwner(options?: Omit<(UseMutationOptions<(CommentOwner | undefined), DefaultError, Prisma.CommentOwnerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerDeleteArgs, DefaultError, CommentOwner, true>('CommentOwner', 'DELETE', `${endpoint}/commentOwner/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentOwner, Prisma.CommentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommentOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommentOwnerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentOwnerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommentOwner', 'DELETE', `${endpoint}/commentOwner/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentOwnerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentOwnerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommentOwnerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommentOwner<TArgs extends Prisma.CommentOwnerAggregateArgs, TQueryFnData = Prisma.GetCommentOwnerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommentOwner<TArgs extends Prisma.CommentOwnerAggregateArgs, TQueryFnData = Prisma.GetCommentOwnerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/aggregate`, args, options, fetch);
}

export function useGroupByCommentOwner<TArgs extends Prisma.CommentOwnerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommentOwnerGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommentOwnerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommentOwnerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommentOwnerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentOwnerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentOwnerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommentOwnerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommentOwner<TArgs extends Prisma.CommentOwnerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommentOwnerGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommentOwnerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommentOwnerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommentOwnerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentOwnerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentOwnerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommentOwnerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/groupBy`, args, options, fetch);
}

export function useCountCommentOwner<TArgs extends Prisma.CommentOwnerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommentOwnerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/count`, args, options, fetch);
}

export function useSuspenseCountCommentOwner<TArgs extends Prisma.CommentOwnerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommentOwnerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentOwnerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentOwner', `${endpoint}/commentOwner/count`, args, options, fetch);
}
import type { Platform } from '@prisma/client';

export function useCheckCommentOwner<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; platform?: Platform; instagramAccountId?: string; communityMemberId?: string; limitedCommunityMemberId?: string; facebookAccountId?: string; tiktokAccountId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommentOwner', `${endpoint}/commentOwner/check`, args, options, fetch);
}
