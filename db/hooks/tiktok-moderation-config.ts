/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TiktokModerationConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTiktokModerationConfig(options?: Omit<(UseMutationOptions<(TiktokModerationConfig | undefined), DefaultError, Prisma.TiktokModerationConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigCreateArgs, DefaultError, TiktokModerationConfig, true>('TiktokModerationConfig', 'POST', `${endpoint}/tiktokModerationConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTiktokModerationConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TiktokModerationConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TiktokModerationConfig', 'POST', `${endpoint}/tiktokModerationConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.TiktokModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.TiktokModerationConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.TiktokModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindManyArgs, TQueryFnData = Array<Prisma.TiktokModerationConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findMany`, args, options, fetch);
}

export function useFindUniqueTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindUniqueArgs, TQueryFnData = Prisma.TiktokModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindUniqueArgs, TQueryFnData = Prisma.TiktokModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findUnique`, args, options, fetch);
}

export function useFindFirstTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindFirstArgs, TQueryFnData = Prisma.TiktokModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigFindFirstArgs, TQueryFnData = Prisma.TiktokModerationConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/findFirst`, args, options, fetch);
}

export function useUpdateTiktokModerationConfig(options?: Omit<(UseMutationOptions<(TiktokModerationConfig | undefined), DefaultError, Prisma.TiktokModerationConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigUpdateArgs, DefaultError, TiktokModerationConfig, true>('TiktokModerationConfig', 'PUT', `${endpoint}/tiktokModerationConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTiktokModerationConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TiktokModerationConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TiktokModerationConfig', 'PUT', `${endpoint}/tiktokModerationConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTiktokModerationConfig(options?: Omit<(UseMutationOptions<(TiktokModerationConfig | undefined), DefaultError, Prisma.TiktokModerationConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigUpsertArgs, DefaultError, TiktokModerationConfig, true>('TiktokModerationConfig', 'POST', `${endpoint}/tiktokModerationConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTiktokModerationConfig(options?: Omit<(UseMutationOptions<(TiktokModerationConfig | undefined), DefaultError, Prisma.TiktokModerationConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigDeleteArgs, DefaultError, TiktokModerationConfig, true>('TiktokModerationConfig', 'DELETE', `${endpoint}/tiktokModerationConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TiktokModerationConfig, Prisma.TiktokModerationConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTiktokModerationConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TiktokModerationConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TiktokModerationConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TiktokModerationConfig', 'DELETE', `${endpoint}/tiktokModerationConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TiktokModerationConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TiktokModerationConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TiktokModerationConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigAggregateArgs, TQueryFnData = Prisma.GetTiktokModerationConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigAggregateArgs, TQueryFnData = Prisma.GetTiktokModerationConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/aggregate`, args, options, fetch);
}

export function useGroupByTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TiktokModerationConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.TiktokModerationConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TiktokModerationConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TiktokModerationConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokModerationConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokModerationConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TiktokModerationConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TiktokModerationConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.TiktokModerationConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TiktokModerationConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TiktokModerationConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokModerationConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TiktokModerationConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TiktokModerationConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/groupBy`, args, options, fetch);
}

export function useCountTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TiktokModerationConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/count`, args, options, fetch);
}

export function useSuspenseCountTiktokModerationConfig<TArgs extends Prisma.TiktokModerationConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TiktokModerationConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TiktokModerationConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/count`, args, options, fetch);
}

export function useCheckTiktokModerationConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isEnabled?: boolean; isKeywordsPreferenceActive?: boolean; keywords?: string; isAIBasedIntentDetectionPreferenceActive?: boolean; intents?: string; tiktokAccountId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TiktokModerationConfig', `${endpoint}/tiktokModerationConfig/check`, args, options, fetch);
}
