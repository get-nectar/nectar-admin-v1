/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InsightClusterPendingItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInsightClusterPendingItem(options?: Omit<(UseMutationOptions<(InsightClusterPendingItem | undefined), DefaultError, Prisma.InsightClusterPendingItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemCreateArgs, DefaultError, InsightClusterPendingItem, true>('InsightClusterPendingItem', 'POST', `${endpoint}/insightClusterPendingItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInsightClusterPendingItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InsightClusterPendingItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InsightClusterPendingItem', 'POST', `${endpoint}/insightClusterPendingItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindManyArgs, TQueryFnData = Array<Prisma.InsightClusterPendingItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindManyArgs, TQueryFnData = Array<Prisma.InsightClusterPendingItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindManyArgs, TQueryFnData = Array<Prisma.InsightClusterPendingItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindManyArgs, TQueryFnData = Array<Prisma.InsightClusterPendingItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findMany`, args, options, fetch);
}

export function useFindUniqueInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindUniqueArgs, TQueryFnData = Prisma.InsightClusterPendingItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindUniqueArgs, TQueryFnData = Prisma.InsightClusterPendingItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findUnique`, args, options, fetch);
}

export function useFindFirstInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindFirstArgs, TQueryFnData = Prisma.InsightClusterPendingItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemFindFirstArgs, TQueryFnData = Prisma.InsightClusterPendingItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/findFirst`, args, options, fetch);
}

export function useUpdateInsightClusterPendingItem(options?: Omit<(UseMutationOptions<(InsightClusterPendingItem | undefined), DefaultError, Prisma.InsightClusterPendingItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemUpdateArgs, DefaultError, InsightClusterPendingItem, true>('InsightClusterPendingItem', 'PUT', `${endpoint}/insightClusterPendingItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInsightClusterPendingItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InsightClusterPendingItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InsightClusterPendingItem', 'PUT', `${endpoint}/insightClusterPendingItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInsightClusterPendingItem(options?: Omit<(UseMutationOptions<(InsightClusterPendingItem | undefined), DefaultError, Prisma.InsightClusterPendingItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemUpsertArgs, DefaultError, InsightClusterPendingItem, true>('InsightClusterPendingItem', 'POST', `${endpoint}/insightClusterPendingItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInsightClusterPendingItem(options?: Omit<(UseMutationOptions<(InsightClusterPendingItem | undefined), DefaultError, Prisma.InsightClusterPendingItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemDeleteArgs, DefaultError, InsightClusterPendingItem, true>('InsightClusterPendingItem', 'DELETE', `${endpoint}/insightClusterPendingItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightClusterPendingItem, Prisma.InsightClusterPendingItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInsightClusterPendingItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InsightClusterPendingItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightClusterPendingItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InsightClusterPendingItem', 'DELETE', `${endpoint}/insightClusterPendingItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightClusterPendingItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InsightClusterPendingItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemAggregateArgs, TQueryFnData = Prisma.GetInsightClusterPendingItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemAggregateArgs, TQueryFnData = Prisma.GetInsightClusterPendingItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/aggregate`, args, options, fetch);
}

export function useGroupByInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InsightClusterPendingItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.InsightClusterPendingItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InsightClusterPendingItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InsightClusterPendingItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightClusterPendingItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightClusterPendingItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InsightClusterPendingItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InsightClusterPendingItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.InsightClusterPendingItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InsightClusterPendingItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InsightClusterPendingItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightClusterPendingItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightClusterPendingItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InsightClusterPendingItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/groupBy`, args, options, fetch);
}

export function useCountInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InsightClusterPendingItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/count`, args, options, fetch);
}

export function useSuspenseCountInsightClusterPendingItem<TArgs extends Prisma.InsightClusterPendingItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InsightClusterPendingItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightClusterPendingItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/count`, args, options, fetch);
}
import type { ClusteringStatus } from '@prisma/client';

export function useCheckInsightClusterPendingItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; commentId?: string; messageId?: string; contentId?: string; status?: ClusteringStatus }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InsightClusterPendingItem', `${endpoint}/insightClusterPendingItem/check`, args, options, fetch);
}
