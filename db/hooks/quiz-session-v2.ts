/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, QuizSessionV2 } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateQuizSessionV2(options?: Omit<(UseMutationOptions<(QuizSessionV2 | undefined), DefaultError, Prisma.QuizSessionV2CreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2CreateArgs, DefaultError, QuizSessionV2, true>('QuizSessionV2', 'POST', `${endpoint}/quizSessionV2/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2CreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2CreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2CreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyQuizSessionV2(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuizSessionV2CreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2CreateManyArgs, DefaultError, Prisma.BatchPayload, false>('QuizSessionV2', 'POST', `${endpoint}/quizSessionV2/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2CreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2CreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2CreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindManyArgs, TQueryFnData = Array<Prisma.QuizSessionV2GetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findMany`, args, options, fetch);
}

export function useInfiniteFindManyQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindManyArgs, TQueryFnData = Array<Prisma.QuizSessionV2GetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findMany`, args, options, fetch);
}

export function useSuspenseFindManyQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindManyArgs, TQueryFnData = Array<Prisma.QuizSessionV2GetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindManyArgs, TQueryFnData = Array<Prisma.QuizSessionV2GetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findMany`, args, options, fetch);
}

export function useFindUniqueQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindUniqueArgs, TQueryFnData = Prisma.QuizSessionV2GetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindUniqueArgs, TQueryFnData = Prisma.QuizSessionV2GetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findUnique`, args, options, fetch);
}

export function useFindFirstQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindFirstArgs, TQueryFnData = Prisma.QuizSessionV2GetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstQuizSessionV2<TArgs extends Prisma.QuizSessionV2FindFirstArgs, TQueryFnData = Prisma.QuizSessionV2GetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2FindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/findFirst`, args, options, fetch);
}

export function useUpdateQuizSessionV2(options?: Omit<(UseMutationOptions<(QuizSessionV2 | undefined), DefaultError, Prisma.QuizSessionV2UpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2UpdateArgs, DefaultError, QuizSessionV2, true>('QuizSessionV2', 'PUT', `${endpoint}/quizSessionV2/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2UpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2UpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2UpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyQuizSessionV2(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuizSessionV2UpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2UpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('QuizSessionV2', 'PUT', `${endpoint}/quizSessionV2/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2UpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2UpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2UpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertQuizSessionV2(options?: Omit<(UseMutationOptions<(QuizSessionV2 | undefined), DefaultError, Prisma.QuizSessionV2UpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2UpsertArgs, DefaultError, QuizSessionV2, true>('QuizSessionV2', 'POST', `${endpoint}/quizSessionV2/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2UpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2UpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2UpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteQuizSessionV2(options?: Omit<(UseMutationOptions<(QuizSessionV2 | undefined), DefaultError, Prisma.QuizSessionV2DeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2DeleteArgs, DefaultError, QuizSessionV2, true>('QuizSessionV2', 'DELETE', `${endpoint}/quizSessionV2/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2DeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2DeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2DeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuizSessionV2, Prisma.QuizSessionV2GetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyQuizSessionV2(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuizSessionV2DeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuizSessionV2DeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('QuizSessionV2', 'DELETE', `${endpoint}/quizSessionV2/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuizSessionV2DeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuizSessionV2DeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuizSessionV2DeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateQuizSessionV2<TArgs extends Prisma.QuizSessionV2AggregateArgs, TQueryFnData = Prisma.GetQuizSessionV2AggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2AggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateQuizSessionV2<TArgs extends Prisma.QuizSessionV2AggregateArgs, TQueryFnData = Prisma.GetQuizSessionV2AggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2AggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/aggregate`, args, options, fetch);
}

export function useGroupByQuizSessionV2<TArgs extends Prisma.QuizSessionV2GroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.QuizSessionV2GroupByArgs['orderBy'] } : { orderBy?: Prisma.QuizSessionV2GroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.QuizSessionV2GroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.QuizSessionV2GroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizSessionV2GroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizSessionV2GroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuizSessionV2GroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByQuizSessionV2<TArgs extends Prisma.QuizSessionV2GroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.QuizSessionV2GroupByArgs['orderBy'] } : { orderBy?: Prisma.QuizSessionV2GroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.QuizSessionV2GroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.QuizSessionV2GroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizSessionV2GroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.QuizSessionV2GroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuizSessionV2GroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/groupBy`, args, options, fetch);
}

export function useCountQuizSessionV2<TArgs extends Prisma.QuizSessionV2CountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.QuizSessionV2CountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2CountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/count`, args, options, fetch);
}

export function useSuspenseCountQuizSessionV2<TArgs extends Prisma.QuizSessionV2CountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.QuizSessionV2CountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.QuizSessionV2CountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/count`, args, options, fetch);
}
import type { QuizSessionStatus, QuizMessageState, QuizReminderStatus } from '@prisma/client';

export function useCheckQuizSessionV2<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; askedQuestionIds?: string; lastQuestionAskedId?: string; status?: QuizSessionStatus; currentMessageState?: QuizMessageState; reminderStatus?: QuizReminderStatus; journeyId?: string; journeySessionId?: string; conversationId?: string; communityMemberId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('QuizSessionV2', `${endpoint}/quizSessionV2/check`, args, options, fetch);
}
