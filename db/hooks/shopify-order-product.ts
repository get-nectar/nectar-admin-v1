/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyOrderProduct } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyOrderProduct(options?: Omit<(UseMutationOptions<(ShopifyOrderProduct | undefined), DefaultError, Prisma.ShopifyOrderProductCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductCreateArgs, DefaultError, ShopifyOrderProduct, true>('ShopifyOrderProduct', 'POST', `${endpoint}/shopifyOrderProduct/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyOrderProduct(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyOrderProductCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyOrderProduct', 'POST', `${endpoint}/shopifyOrderProduct/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderProductGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderProductGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderProductGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindManyArgs, TQueryFnData = Array<Prisma.ShopifyOrderProductGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindUniqueArgs, TQueryFnData = Prisma.ShopifyOrderProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindUniqueArgs, TQueryFnData = Prisma.ShopifyOrderProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindFirstArgs, TQueryFnData = Prisma.ShopifyOrderProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductFindFirstArgs, TQueryFnData = Prisma.ShopifyOrderProductGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/findFirst`, args, options, fetch);
}

export function useUpdateShopifyOrderProduct(options?: Omit<(UseMutationOptions<(ShopifyOrderProduct | undefined), DefaultError, Prisma.ShopifyOrderProductUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductUpdateArgs, DefaultError, ShopifyOrderProduct, true>('ShopifyOrderProduct', 'PUT', `${endpoint}/shopifyOrderProduct/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyOrderProduct(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyOrderProductUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyOrderProduct', 'PUT', `${endpoint}/shopifyOrderProduct/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyOrderProduct(options?: Omit<(UseMutationOptions<(ShopifyOrderProduct | undefined), DefaultError, Prisma.ShopifyOrderProductUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductUpsertArgs, DefaultError, ShopifyOrderProduct, true>('ShopifyOrderProduct', 'POST', `${endpoint}/shopifyOrderProduct/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyOrderProduct(options?: Omit<(UseMutationOptions<(ShopifyOrderProduct | undefined), DefaultError, Prisma.ShopifyOrderProductDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductDeleteArgs, DefaultError, ShopifyOrderProduct, true>('ShopifyOrderProduct', 'DELETE', `${endpoint}/shopifyOrderProduct/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyOrderProduct, Prisma.ShopifyOrderProductGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyOrderProduct(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyOrderProductDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyOrderProductDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyOrderProduct', 'DELETE', `${endpoint}/shopifyOrderProduct/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyOrderProductDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyOrderProductDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyOrderProductDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductAggregateArgs, TQueryFnData = Prisma.GetShopifyOrderProductAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductAggregateArgs, TQueryFnData = Prisma.GetShopifyOrderProductAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/aggregate`, args, options, fetch);
}

export function useGroupByShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyOrderProductGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyOrderProductGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyOrderProductGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyOrderProductGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderProductGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderProductGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyOrderProductGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyOrderProductGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyOrderProductGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyOrderProductGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyOrderProductGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderProductGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyOrderProductGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyOrderProductGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/groupBy`, args, options, fetch);
}

export function useCountShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyOrderProductCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/count`, args, options, fetch);
}

export function useSuspenseCountShopifyOrderProduct<TArgs extends Prisma.ShopifyOrderProductCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyOrderProductCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyOrderProductCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckShopifyOrderProduct<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderId?: string; shopifyProductId?: string; shopifyLineItemId?: string; title?: string; quantity?: number; sku?: string; currencyCode?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyOrderProduct', `${endpoint}/shopifyOrderProduct/check`, args, options, fetch);
}
