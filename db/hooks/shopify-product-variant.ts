/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyProductVariant } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyProductVariant(options?: Omit<(UseMutationOptions<(ShopifyProductVariant | undefined), DefaultError, Prisma.ShopifyProductVariantCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantCreateArgs, DefaultError, ShopifyProductVariant, true>('ShopifyProductVariant', 'POST', `${endpoint}/shopifyProductVariant/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyProductVariant(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyProductVariantCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyProductVariant', 'POST', `${endpoint}/shopifyProductVariant/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindManyArgs, TQueryFnData = Array<Prisma.ShopifyProductVariantGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindManyArgs, TQueryFnData = Array<Prisma.ShopifyProductVariantGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindManyArgs, TQueryFnData = Array<Prisma.ShopifyProductVariantGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindManyArgs, TQueryFnData = Array<Prisma.ShopifyProductVariantGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindUniqueArgs, TQueryFnData = Prisma.ShopifyProductVariantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindUniqueArgs, TQueryFnData = Prisma.ShopifyProductVariantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindFirstArgs, TQueryFnData = Prisma.ShopifyProductVariantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantFindFirstArgs, TQueryFnData = Prisma.ShopifyProductVariantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/findFirst`, args, options, fetch);
}

export function useUpdateShopifyProductVariant(options?: Omit<(UseMutationOptions<(ShopifyProductVariant | undefined), DefaultError, Prisma.ShopifyProductVariantUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantUpdateArgs, DefaultError, ShopifyProductVariant, true>('ShopifyProductVariant', 'PUT', `${endpoint}/shopifyProductVariant/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyProductVariant(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyProductVariantUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyProductVariant', 'PUT', `${endpoint}/shopifyProductVariant/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyProductVariant(options?: Omit<(UseMutationOptions<(ShopifyProductVariant | undefined), DefaultError, Prisma.ShopifyProductVariantUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantUpsertArgs, DefaultError, ShopifyProductVariant, true>('ShopifyProductVariant', 'POST', `${endpoint}/shopifyProductVariant/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyProductVariant(options?: Omit<(UseMutationOptions<(ShopifyProductVariant | undefined), DefaultError, Prisma.ShopifyProductVariantDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantDeleteArgs, DefaultError, ShopifyProductVariant, true>('ShopifyProductVariant', 'DELETE', `${endpoint}/shopifyProductVariant/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyProductVariant, Prisma.ShopifyProductVariantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyProductVariant(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyProductVariantDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyProductVariantDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyProductVariant', 'DELETE', `${endpoint}/shopifyProductVariant/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyProductVariantDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyProductVariantDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyProductVariantDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantAggregateArgs, TQueryFnData = Prisma.GetShopifyProductVariantAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantAggregateArgs, TQueryFnData = Prisma.GetShopifyProductVariantAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/aggregate`, args, options, fetch);
}

export function useGroupByShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyProductVariantGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyProductVariantGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyProductVariantGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyProductVariantGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyProductVariantGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyProductVariantGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyProductVariantGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyProductVariantGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyProductVariantGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyProductVariantGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyProductVariantGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyProductVariantGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyProductVariantGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyProductVariantGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/groupBy`, args, options, fetch);
}

export function useCountShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyProductVariantCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/count`, args, options, fetch);
}

export function useSuspenseCountShopifyProductVariant<TArgs extends Prisma.ShopifyProductVariantCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyProductVariantCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyProductVariantCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/count`, args, options, fetch);
}

export function useCheckShopifyProductVariant<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { title?: string; price?: string; shopifyResourceId?: string; variantId?: string; inventoryQuantity?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyProductVariant', `${endpoint}/shopifyProductVariant/check`, args, options, fetch);
}
