/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WebhookSubscription } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWebhookSubscription(options?: Omit<(UseMutationOptions<(WebhookSubscription | undefined), DefaultError, Prisma.WebhookSubscriptionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionCreateArgs, DefaultError, WebhookSubscription, true>('WebhookSubscription', 'POST', `${endpoint}/webhookSubscription/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWebhookSubscription(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WebhookSubscriptionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WebhookSubscription', 'POST', `${endpoint}/webhookSubscription/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindManyArgs, TQueryFnData = Array<Prisma.WebhookSubscriptionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindManyArgs, TQueryFnData = Array<Prisma.WebhookSubscriptionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindManyArgs, TQueryFnData = Array<Prisma.WebhookSubscriptionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindManyArgs, TQueryFnData = Array<Prisma.WebhookSubscriptionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findMany`, args, options, fetch);
}

export function useFindUniqueWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindUniqueArgs, TQueryFnData = Prisma.WebhookSubscriptionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindUniqueArgs, TQueryFnData = Prisma.WebhookSubscriptionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findUnique`, args, options, fetch);
}

export function useFindFirstWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindFirstArgs, TQueryFnData = Prisma.WebhookSubscriptionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionFindFirstArgs, TQueryFnData = Prisma.WebhookSubscriptionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/findFirst`, args, options, fetch);
}

export function useUpdateWebhookSubscription(options?: Omit<(UseMutationOptions<(WebhookSubscription | undefined), DefaultError, Prisma.WebhookSubscriptionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionUpdateArgs, DefaultError, WebhookSubscription, true>('WebhookSubscription', 'PUT', `${endpoint}/webhookSubscription/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWebhookSubscription(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WebhookSubscriptionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WebhookSubscription', 'PUT', `${endpoint}/webhookSubscription/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWebhookSubscription(options?: Omit<(UseMutationOptions<(WebhookSubscription | undefined), DefaultError, Prisma.WebhookSubscriptionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionUpsertArgs, DefaultError, WebhookSubscription, true>('WebhookSubscription', 'POST', `${endpoint}/webhookSubscription/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWebhookSubscription(options?: Omit<(UseMutationOptions<(WebhookSubscription | undefined), DefaultError, Prisma.WebhookSubscriptionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionDeleteArgs, DefaultError, WebhookSubscription, true>('WebhookSubscription', 'DELETE', `${endpoint}/webhookSubscription/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WebhookSubscription, Prisma.WebhookSubscriptionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWebhookSubscription(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WebhookSubscriptionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WebhookSubscriptionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WebhookSubscription', 'DELETE', `${endpoint}/webhookSubscription/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WebhookSubscriptionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WebhookSubscriptionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WebhookSubscriptionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionAggregateArgs, TQueryFnData = Prisma.GetWebhookSubscriptionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionAggregateArgs, TQueryFnData = Prisma.GetWebhookSubscriptionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/aggregate`, args, options, fetch);
}

export function useGroupByWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WebhookSubscriptionGroupByArgs['orderBy'] } : { orderBy?: Prisma.WebhookSubscriptionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WebhookSubscriptionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WebhookSubscriptionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WebhookSubscriptionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WebhookSubscriptionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WebhookSubscriptionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WebhookSubscriptionGroupByArgs['orderBy'] } : { orderBy?: Prisma.WebhookSubscriptionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WebhookSubscriptionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WebhookSubscriptionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WebhookSubscriptionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WebhookSubscriptionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WebhookSubscriptionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/groupBy`, args, options, fetch);
}

export function useCountWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WebhookSubscriptionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/count`, args, options, fetch);
}

export function useSuspenseCountWebhookSubscription<TArgs extends Prisma.WebhookSubscriptionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WebhookSubscriptionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WebhookSubscriptionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/count`, args, options, fetch);
}
import type { WebhookStatus, WebhookSubscriptionTarget, WebhookEventType, WebhookPayloadFormat, WebhookIntegrationType } from '@prisma/client';

export function useCheckWebhookSubscription<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; status?: WebhookStatus; subscribedTargets?: WebhookSubscriptionTarget; events?: WebhookEventType; secret?: string; payloadURL?: string; payloadFormat?: WebhookPayloadFormat; dumpExistingDataOnFirstRun?: boolean; integrationType?: WebhookIntegrationType; appTokenId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WebhookSubscription', `${endpoint}/webhookSubscription/check`, args, options, fetch);
}
