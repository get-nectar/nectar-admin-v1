/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DefaultView } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateDefaultView(options?: Omit<(UseMutationOptions<(DefaultView | undefined), DefaultError, Prisma.DefaultViewCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewCreateArgs, DefaultError, DefaultView, true>('DefaultView', 'POST', `${endpoint}/defaultView/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDefaultView(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DefaultViewCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DefaultView', 'POST', `${endpoint}/defaultView/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDefaultView<TArgs extends Prisma.DefaultViewFindManyArgs, TQueryFnData = Array<Prisma.DefaultViewGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDefaultView<TArgs extends Prisma.DefaultViewFindManyArgs, TQueryFnData = Array<Prisma.DefaultViewGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findMany`, args, options, fetch);
}

export function useSuspenseFindManyDefaultView<TArgs extends Prisma.DefaultViewFindManyArgs, TQueryFnData = Array<Prisma.DefaultViewGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyDefaultView<TArgs extends Prisma.DefaultViewFindManyArgs, TQueryFnData = Array<Prisma.DefaultViewGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findMany`, args, options, fetch);
}

export function useFindUniqueDefaultView<TArgs extends Prisma.DefaultViewFindUniqueArgs, TQueryFnData = Prisma.DefaultViewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueDefaultView<TArgs extends Prisma.DefaultViewFindUniqueArgs, TQueryFnData = Prisma.DefaultViewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findUnique`, args, options, fetch);
}

export function useFindFirstDefaultView<TArgs extends Prisma.DefaultViewFindFirstArgs, TQueryFnData = Prisma.DefaultViewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstDefaultView<TArgs extends Prisma.DefaultViewFindFirstArgs, TQueryFnData = Prisma.DefaultViewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/findFirst`, args, options, fetch);
}

export function useUpdateDefaultView(options?: Omit<(UseMutationOptions<(DefaultView | undefined), DefaultError, Prisma.DefaultViewUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewUpdateArgs, DefaultError, DefaultView, true>('DefaultView', 'PUT', `${endpoint}/defaultView/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDefaultView(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DefaultViewUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DefaultView', 'PUT', `${endpoint}/defaultView/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDefaultView(options?: Omit<(UseMutationOptions<(DefaultView | undefined), DefaultError, Prisma.DefaultViewUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewUpsertArgs, DefaultError, DefaultView, true>('DefaultView', 'POST', `${endpoint}/defaultView/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDefaultView(options?: Omit<(UseMutationOptions<(DefaultView | undefined), DefaultError, Prisma.DefaultViewDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewDeleteArgs, DefaultError, DefaultView, true>('DefaultView', 'DELETE', `${endpoint}/defaultView/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultView, Prisma.DefaultViewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDefaultView(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DefaultViewDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultViewDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DefaultView', 'DELETE', `${endpoint}/defaultView/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultViewDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultViewDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DefaultViewDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDefaultView<TArgs extends Prisma.DefaultViewAggregateArgs, TQueryFnData = Prisma.GetDefaultViewAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultViewAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateDefaultView<TArgs extends Prisma.DefaultViewAggregateArgs, TQueryFnData = Prisma.GetDefaultViewAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultViewAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/aggregate`, args, options, fetch);
}

export function useGroupByDefaultView<TArgs extends Prisma.DefaultViewGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DefaultViewGroupByArgs['orderBy'] } : { orderBy?: Prisma.DefaultViewGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DefaultViewGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DefaultViewGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultViewGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultViewGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DefaultViewGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByDefaultView<TArgs extends Prisma.DefaultViewGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DefaultViewGroupByArgs['orderBy'] } : { orderBy?: Prisma.DefaultViewGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DefaultViewGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DefaultViewGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultViewGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultViewGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DefaultViewGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/groupBy`, args, options, fetch);
}

export function useCountDefaultView<TArgs extends Prisma.DefaultViewCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DefaultViewCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/count`, args, options, fetch);
}

export function useSuspenseCountDefaultView<TArgs extends Prisma.DefaultViewCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DefaultViewCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultViewCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultView', `${endpoint}/defaultView/count`, args, options, fetch);
}
import type { ViewSurface, PredefinedViewId } from '@prisma/client';

export function useCheckDefaultView<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { workspaceUserId?: string; viewId?: string; surface?: ViewSurface; predefinedViewId?: PredefinedViewId }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DefaultView', `${endpoint}/defaultView/check`, args, options, fetch);
}
