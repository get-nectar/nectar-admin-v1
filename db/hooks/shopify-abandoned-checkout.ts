/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyAbandonedCheckout } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckout | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutCreateArgs, DefaultError, ShopifyAbandonedCheckout, true>('ShopifyAbandonedCheckout', 'POST', `${endpoint}/shopifyAbandonedCheckout/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCheckoutCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCheckout', 'POST', `${endpoint}/shopifyAbandonedCheckout/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/findFirst`, args, options, fetch);
}

export function useUpdateShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckout | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutUpdateArgs, DefaultError, ShopifyAbandonedCheckout, true>('ShopifyAbandonedCheckout', 'PUT', `${endpoint}/shopifyAbandonedCheckout/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCheckoutUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCheckout', 'PUT', `${endpoint}/shopifyAbandonedCheckout/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckout | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutUpsertArgs, DefaultError, ShopifyAbandonedCheckout, true>('ShopifyAbandonedCheckout', 'POST', `${endpoint}/shopifyAbandonedCheckout/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckout | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutDeleteArgs, DefaultError, ShopifyAbandonedCheckout, true>('ShopifyAbandonedCheckout', 'DELETE', `${endpoint}/shopifyAbandonedCheckout/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckout, Prisma.ShopifyAbandonedCheckoutGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyAbandonedCheckout(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCheckoutDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCheckout', 'DELETE', `${endpoint}/shopifyAbandonedCheckout/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCheckoutAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCheckoutAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/aggregate`, args, options, fetch);
}

export function useGroupByShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCheckoutGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCheckoutGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCheckoutGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCheckoutGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCheckoutGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCheckoutGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCheckoutGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCheckoutGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCheckoutGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCheckoutGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/groupBy`, args, options, fetch);
}

export function useCountShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCheckoutCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/count`, args, options, fetch);
}

export function useSuspenseCountShopifyAbandonedCheckout<TArgs extends Prisma.ShopifyAbandonedCheckoutCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCheckoutCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckShopifyAbandonedCheckout<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; customerId?: string; totalPrice?: string; currency?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyAbandonedCheckout', `${endpoint}/shopifyAbandonedCheckout/check`, args, options, fetch);
}
