/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ContentMediaTag } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateContentMediaTag(options?: Omit<(UseMutationOptions<(ContentMediaTag | undefined), DefaultError, Prisma.ContentMediaTagCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagCreateArgs, DefaultError, ContentMediaTag, true>('ContentMediaTag', 'POST', `${endpoint}/contentMediaTag/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyContentMediaTag(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentMediaTagCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentMediaTag', 'POST', `${endpoint}/contentMediaTag/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyContentMediaTag<TArgs extends Prisma.ContentMediaTagFindManyArgs, TQueryFnData = Array<Prisma.ContentMediaTagGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findMany`, args, options, fetch);
}

export function useInfiniteFindManyContentMediaTag<TArgs extends Prisma.ContentMediaTagFindManyArgs, TQueryFnData = Array<Prisma.ContentMediaTagGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findMany`, args, options, fetch);
}

export function useSuspenseFindManyContentMediaTag<TArgs extends Prisma.ContentMediaTagFindManyArgs, TQueryFnData = Array<Prisma.ContentMediaTagGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyContentMediaTag<TArgs extends Prisma.ContentMediaTagFindManyArgs, TQueryFnData = Array<Prisma.ContentMediaTagGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findMany`, args, options, fetch);
}

export function useFindUniqueContentMediaTag<TArgs extends Prisma.ContentMediaTagFindUniqueArgs, TQueryFnData = Prisma.ContentMediaTagGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueContentMediaTag<TArgs extends Prisma.ContentMediaTagFindUniqueArgs, TQueryFnData = Prisma.ContentMediaTagGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findUnique`, args, options, fetch);
}

export function useFindFirstContentMediaTag<TArgs extends Prisma.ContentMediaTagFindFirstArgs, TQueryFnData = Prisma.ContentMediaTagGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstContentMediaTag<TArgs extends Prisma.ContentMediaTagFindFirstArgs, TQueryFnData = Prisma.ContentMediaTagGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/findFirst`, args, options, fetch);
}

export function useUpdateContentMediaTag(options?: Omit<(UseMutationOptions<(ContentMediaTag | undefined), DefaultError, Prisma.ContentMediaTagUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagUpdateArgs, DefaultError, ContentMediaTag, true>('ContentMediaTag', 'PUT', `${endpoint}/contentMediaTag/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyContentMediaTag(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentMediaTagUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentMediaTag', 'PUT', `${endpoint}/contentMediaTag/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertContentMediaTag(options?: Omit<(UseMutationOptions<(ContentMediaTag | undefined), DefaultError, Prisma.ContentMediaTagUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagUpsertArgs, DefaultError, ContentMediaTag, true>('ContentMediaTag', 'POST', `${endpoint}/contentMediaTag/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteContentMediaTag(options?: Omit<(UseMutationOptions<(ContentMediaTag | undefined), DefaultError, Prisma.ContentMediaTagDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagDeleteArgs, DefaultError, ContentMediaTag, true>('ContentMediaTag', 'DELETE', `${endpoint}/contentMediaTag/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentMediaTag, Prisma.ContentMediaTagGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyContentMediaTag(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentMediaTagDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentMediaTagDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentMediaTag', 'DELETE', `${endpoint}/contentMediaTag/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentMediaTagDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentMediaTagDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentMediaTagDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateContentMediaTag<TArgs extends Prisma.ContentMediaTagAggregateArgs, TQueryFnData = Prisma.GetContentMediaTagAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateContentMediaTag<TArgs extends Prisma.ContentMediaTagAggregateArgs, TQueryFnData = Prisma.GetContentMediaTagAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/aggregate`, args, options, fetch);
}

export function useGroupByContentMediaTag<TArgs extends Prisma.ContentMediaTagGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentMediaTagGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentMediaTagGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentMediaTagGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentMediaTagGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentMediaTagGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentMediaTagGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentMediaTagGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByContentMediaTag<TArgs extends Prisma.ContentMediaTagGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentMediaTagGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentMediaTagGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentMediaTagGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentMediaTagGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentMediaTagGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentMediaTagGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentMediaTagGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/groupBy`, args, options, fetch);
}

export function useCountContentMediaTag<TArgs extends Prisma.ContentMediaTagCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentMediaTagCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/count`, args, options, fetch);
}

export function useSuspenseCountContentMediaTag<TArgs extends Prisma.ContentMediaTagCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentMediaTagCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentMediaTagCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/count`, args, options, fetch);
}

export function useCheckContentMediaTag<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; username?: string; communityMemberId?: string; mediaId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ContentMediaTag', `${endpoint}/contentMediaTag/check`, args, options, fetch);
}
