/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, BlastAudienceMember } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateBlastAudienceMember(options?: Omit<(UseMutationOptions<(BlastAudienceMember | undefined), DefaultError, Prisma.BlastAudienceMemberCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberCreateArgs, DefaultError, BlastAudienceMember, true>('BlastAudienceMember', 'POST', `${endpoint}/blastAudienceMember/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyBlastAudienceMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BlastAudienceMemberCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('BlastAudienceMember', 'POST', `${endpoint}/blastAudienceMember/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindManyArgs, TQueryFnData = Array<Prisma.BlastAudienceMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findMany`, args, options, fetch);
}

export function useInfiniteFindManyBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindManyArgs, TQueryFnData = Array<Prisma.BlastAudienceMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findMany`, args, options, fetch);
}

export function useSuspenseFindManyBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindManyArgs, TQueryFnData = Array<Prisma.BlastAudienceMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindManyArgs, TQueryFnData = Array<Prisma.BlastAudienceMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findMany`, args, options, fetch);
}

export function useFindUniqueBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindUniqueArgs, TQueryFnData = Prisma.BlastAudienceMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindUniqueArgs, TQueryFnData = Prisma.BlastAudienceMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findUnique`, args, options, fetch);
}

export function useFindFirstBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindFirstArgs, TQueryFnData = Prisma.BlastAudienceMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberFindFirstArgs, TQueryFnData = Prisma.BlastAudienceMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/findFirst`, args, options, fetch);
}

export function useUpdateBlastAudienceMember(options?: Omit<(UseMutationOptions<(BlastAudienceMember | undefined), DefaultError, Prisma.BlastAudienceMemberUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberUpdateArgs, DefaultError, BlastAudienceMember, true>('BlastAudienceMember', 'PUT', `${endpoint}/blastAudienceMember/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyBlastAudienceMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BlastAudienceMemberUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('BlastAudienceMember', 'PUT', `${endpoint}/blastAudienceMember/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertBlastAudienceMember(options?: Omit<(UseMutationOptions<(BlastAudienceMember | undefined), DefaultError, Prisma.BlastAudienceMemberUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberUpsertArgs, DefaultError, BlastAudienceMember, true>('BlastAudienceMember', 'POST', `${endpoint}/blastAudienceMember/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteBlastAudienceMember(options?: Omit<(UseMutationOptions<(BlastAudienceMember | undefined), DefaultError, Prisma.BlastAudienceMemberDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberDeleteArgs, DefaultError, BlastAudienceMember, true>('BlastAudienceMember', 'DELETE', `${endpoint}/blastAudienceMember/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BlastAudienceMember, Prisma.BlastAudienceMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyBlastAudienceMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BlastAudienceMemberDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BlastAudienceMemberDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('BlastAudienceMember', 'DELETE', `${endpoint}/blastAudienceMember/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BlastAudienceMemberDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BlastAudienceMemberDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BlastAudienceMemberDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberAggregateArgs, TQueryFnData = Prisma.GetBlastAudienceMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberAggregateArgs, TQueryFnData = Prisma.GetBlastAudienceMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/aggregate`, args, options, fetch);
}

export function useGroupByBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BlastAudienceMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.BlastAudienceMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BlastAudienceMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BlastAudienceMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastAudienceMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastAudienceMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BlastAudienceMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BlastAudienceMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.BlastAudienceMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BlastAudienceMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BlastAudienceMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastAudienceMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BlastAudienceMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BlastAudienceMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/groupBy`, args, options, fetch);
}

export function useCountBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BlastAudienceMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/count`, args, options, fetch);
}

export function useSuspenseCountBlastAudienceMember<TArgs extends Prisma.BlastAudienceMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BlastAudienceMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BlastAudienceMemberCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/count`, args, options, fetch);
}
import type { BlastAudienceMemberMessageStatus } from '@prisma/client';

export function useCheckBlastAudienceMember<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; messageStatus?: BlastAudienceMemberMessageStatus; blastCampaignId?: string; communityMemberId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('BlastAudienceMember', `${endpoint}/blastAudienceMember/check`, args, options, fetch);
}
