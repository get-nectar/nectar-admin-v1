/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, BusinessHoursConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateBusinessHoursConfig(options?: Omit<(UseMutationOptions<(BusinessHoursConfig | undefined), DefaultError, Prisma.BusinessHoursConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigCreateArgs, DefaultError, BusinessHoursConfig, true>('BusinessHoursConfig', 'POST', `${endpoint}/businessHoursConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyBusinessHoursConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BusinessHoursConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('BusinessHoursConfig', 'POST', `${endpoint}/businessHoursConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindManyArgs, TQueryFnData = Array<Prisma.BusinessHoursConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindManyArgs, TQueryFnData = Array<Prisma.BusinessHoursConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindManyArgs, TQueryFnData = Array<Prisma.BusinessHoursConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindManyArgs, TQueryFnData = Array<Prisma.BusinessHoursConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findMany`, args, options, fetch);
}

export function useFindUniqueBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindUniqueArgs, TQueryFnData = Prisma.BusinessHoursConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindUniqueArgs, TQueryFnData = Prisma.BusinessHoursConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findUnique`, args, options, fetch);
}

export function useFindFirstBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindFirstArgs, TQueryFnData = Prisma.BusinessHoursConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigFindFirstArgs, TQueryFnData = Prisma.BusinessHoursConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/findFirst`, args, options, fetch);
}

export function useUpdateBusinessHoursConfig(options?: Omit<(UseMutationOptions<(BusinessHoursConfig | undefined), DefaultError, Prisma.BusinessHoursConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigUpdateArgs, DefaultError, BusinessHoursConfig, true>('BusinessHoursConfig', 'PUT', `${endpoint}/businessHoursConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyBusinessHoursConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BusinessHoursConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('BusinessHoursConfig', 'PUT', `${endpoint}/businessHoursConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertBusinessHoursConfig(options?: Omit<(UseMutationOptions<(BusinessHoursConfig | undefined), DefaultError, Prisma.BusinessHoursConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigUpsertArgs, DefaultError, BusinessHoursConfig, true>('BusinessHoursConfig', 'POST', `${endpoint}/businessHoursConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteBusinessHoursConfig(options?: Omit<(UseMutationOptions<(BusinessHoursConfig | undefined), DefaultError, Prisma.BusinessHoursConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigDeleteArgs, DefaultError, BusinessHoursConfig, true>('BusinessHoursConfig', 'DELETE', `${endpoint}/businessHoursConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BusinessHoursConfig, Prisma.BusinessHoursConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyBusinessHoursConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BusinessHoursConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BusinessHoursConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('BusinessHoursConfig', 'DELETE', `${endpoint}/businessHoursConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BusinessHoursConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BusinessHoursConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BusinessHoursConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigAggregateArgs, TQueryFnData = Prisma.GetBusinessHoursConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigAggregateArgs, TQueryFnData = Prisma.GetBusinessHoursConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/aggregate`, args, options, fetch);
}

export function useGroupByBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BusinessHoursConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.BusinessHoursConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BusinessHoursConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BusinessHoursConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BusinessHoursConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BusinessHoursConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BusinessHoursConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BusinessHoursConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.BusinessHoursConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BusinessHoursConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BusinessHoursConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BusinessHoursConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BusinessHoursConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BusinessHoursConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/groupBy`, args, options, fetch);
}

export function useCountBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BusinessHoursConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/count`, args, options, fetch);
}

export function useSuspenseCountBusinessHoursConfig<TArgs extends Prisma.BusinessHoursConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BusinessHoursConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.BusinessHoursConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/count`, args, options, fetch);
}
import type { Day } from '@prisma/client';

export function useCheckBusinessHoursConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; day?: Day; isOffline?: boolean; workingHoursId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('BusinessHoursConfig', `${endpoint}/businessHoursConfig/check`, args, options, fetch);
}
