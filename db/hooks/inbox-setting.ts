/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InboxSetting } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInboxSetting(options?: Omit<(UseMutationOptions<(InboxSetting | undefined), DefaultError, Prisma.InboxSettingCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingCreateArgs, DefaultError, InboxSetting, true>('InboxSetting', 'POST', `${endpoint}/inboxSetting/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInboxSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxSettingCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxSetting', 'POST', `${endpoint}/inboxSetting/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInboxSetting<TArgs extends Prisma.InboxSettingFindManyArgs, TQueryFnData = Array<Prisma.InboxSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInboxSetting<TArgs extends Prisma.InboxSettingFindManyArgs, TQueryFnData = Array<Prisma.InboxSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInboxSetting<TArgs extends Prisma.InboxSettingFindManyArgs, TQueryFnData = Array<Prisma.InboxSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInboxSetting<TArgs extends Prisma.InboxSettingFindManyArgs, TQueryFnData = Array<Prisma.InboxSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findMany`, args, options, fetch);
}

export function useFindUniqueInboxSetting<TArgs extends Prisma.InboxSettingFindUniqueArgs, TQueryFnData = Prisma.InboxSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInboxSetting<TArgs extends Prisma.InboxSettingFindUniqueArgs, TQueryFnData = Prisma.InboxSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findUnique`, args, options, fetch);
}

export function useFindFirstInboxSetting<TArgs extends Prisma.InboxSettingFindFirstArgs, TQueryFnData = Prisma.InboxSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInboxSetting<TArgs extends Prisma.InboxSettingFindFirstArgs, TQueryFnData = Prisma.InboxSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/findFirst`, args, options, fetch);
}

export function useUpdateInboxSetting(options?: Omit<(UseMutationOptions<(InboxSetting | undefined), DefaultError, Prisma.InboxSettingUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingUpdateArgs, DefaultError, InboxSetting, true>('InboxSetting', 'PUT', `${endpoint}/inboxSetting/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInboxSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxSettingUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxSetting', 'PUT', `${endpoint}/inboxSetting/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInboxSetting(options?: Omit<(UseMutationOptions<(InboxSetting | undefined), DefaultError, Prisma.InboxSettingUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingUpsertArgs, DefaultError, InboxSetting, true>('InboxSetting', 'POST', `${endpoint}/inboxSetting/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInboxSetting(options?: Omit<(UseMutationOptions<(InboxSetting | undefined), DefaultError, Prisma.InboxSettingDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingDeleteArgs, DefaultError, InboxSetting, true>('InboxSetting', 'DELETE', `${endpoint}/inboxSetting/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxSetting, Prisma.InboxSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInboxSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxSettingDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxSettingDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxSetting', 'DELETE', `${endpoint}/inboxSetting/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxSettingDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxSettingDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxSettingDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInboxSetting<TArgs extends Prisma.InboxSettingAggregateArgs, TQueryFnData = Prisma.GetInboxSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxSettingAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInboxSetting<TArgs extends Prisma.InboxSettingAggregateArgs, TQueryFnData = Prisma.GetInboxSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxSettingAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/aggregate`, args, options, fetch);
}

export function useGroupByInboxSetting<TArgs extends Prisma.InboxSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInboxSetting<TArgs extends Prisma.InboxSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/groupBy`, args, options, fetch);
}

export function useCountInboxSetting<TArgs extends Prisma.InboxSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/count`, args, options, fetch);
}

export function useSuspenseCountInboxSetting<TArgs extends Prisma.InboxSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxSettingCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxSetting', `${endpoint}/inboxSetting/count`, args, options, fetch);
}
import type { InboxSettingType } from '@prisma/client';

export function useCheckInboxSetting<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; settingType?: InboxSettingType; isEnabled?: boolean; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InboxSetting', `${endpoint}/inboxSetting/check`, args, options, fetch);
}
