/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AutomationPreviewSession } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAutomationPreviewSession(options?: Omit<(UseMutationOptions<(AutomationPreviewSession | undefined), DefaultError, Prisma.AutomationPreviewSessionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionCreateArgs, DefaultError, AutomationPreviewSession, true>('AutomationPreviewSession', 'POST', `${endpoint}/automationPreviewSession/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAutomationPreviewSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutomationPreviewSessionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AutomationPreviewSession', 'POST', `${endpoint}/automationPreviewSession/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findMany`, args, options, fetch);
}

export function useFindUniqueAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindUniqueArgs, TQueryFnData = Prisma.AutomationPreviewSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindUniqueArgs, TQueryFnData = Prisma.AutomationPreviewSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findUnique`, args, options, fetch);
}

export function useFindFirstAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindFirstArgs, TQueryFnData = Prisma.AutomationPreviewSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionFindFirstArgs, TQueryFnData = Prisma.AutomationPreviewSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/findFirst`, args, options, fetch);
}

export function useUpdateAutomationPreviewSession(options?: Omit<(UseMutationOptions<(AutomationPreviewSession | undefined), DefaultError, Prisma.AutomationPreviewSessionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionUpdateArgs, DefaultError, AutomationPreviewSession, true>('AutomationPreviewSession', 'PUT', `${endpoint}/automationPreviewSession/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAutomationPreviewSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutomationPreviewSessionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AutomationPreviewSession', 'PUT', `${endpoint}/automationPreviewSession/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAutomationPreviewSession(options?: Omit<(UseMutationOptions<(AutomationPreviewSession | undefined), DefaultError, Prisma.AutomationPreviewSessionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionUpsertArgs, DefaultError, AutomationPreviewSession, true>('AutomationPreviewSession', 'POST', `${endpoint}/automationPreviewSession/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAutomationPreviewSession(options?: Omit<(UseMutationOptions<(AutomationPreviewSession | undefined), DefaultError, Prisma.AutomationPreviewSessionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionDeleteArgs, DefaultError, AutomationPreviewSession, true>('AutomationPreviewSession', 'DELETE', `${endpoint}/automationPreviewSession/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreviewSession, Prisma.AutomationPreviewSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAutomationPreviewSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutomationPreviewSessionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewSessionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AutomationPreviewSession', 'DELETE', `${endpoint}/automationPreviewSession/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewSessionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewSessionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionAggregateArgs, TQueryFnData = Prisma.GetAutomationPreviewSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionAggregateArgs, TQueryFnData = Prisma.GetAutomationPreviewSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/aggregate`, args, options, fetch);
}

export function useGroupByAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AutomationPreviewSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.AutomationPreviewSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AutomationPreviewSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AutomationPreviewSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AutomationPreviewSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AutomationPreviewSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.AutomationPreviewSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AutomationPreviewSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AutomationPreviewSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AutomationPreviewSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/groupBy`, args, options, fetch);
}

export function useCountAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AutomationPreviewSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/count`, args, options, fetch);
}

export function useSuspenseCountAutomationPreviewSession<TArgs extends Prisma.AutomationPreviewSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AutomationPreviewSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewSessionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/count`, args, options, fetch);
}
import type { AutomationPreviewStatus } from '@prisma/client';

export function useCheckAutomationPreviewSession<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; status?: AutomationPreviewStatus; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AutomationPreviewSession', `${endpoint}/automationPreviewSession/check`, args, options, fetch);
}
