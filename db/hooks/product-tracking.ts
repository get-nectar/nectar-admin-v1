/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ProductTracking } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateProductTracking(options?: Omit<(UseMutationOptions<(ProductTracking | undefined), DefaultError, Prisma.ProductTrackingCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingCreateArgs, DefaultError, ProductTracking, true>('ProductTracking', 'POST', `${endpoint}/productTracking/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyProductTracking(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProductTrackingCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProductTracking', 'POST', `${endpoint}/productTracking/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyProductTracking<TArgs extends Prisma.ProductTrackingFindManyArgs, TQueryFnData = Array<Prisma.ProductTrackingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findMany`, args, options, fetch);
}

export function useInfiniteFindManyProductTracking<TArgs extends Prisma.ProductTrackingFindManyArgs, TQueryFnData = Array<Prisma.ProductTrackingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findMany`, args, options, fetch);
}

export function useSuspenseFindManyProductTracking<TArgs extends Prisma.ProductTrackingFindManyArgs, TQueryFnData = Array<Prisma.ProductTrackingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyProductTracking<TArgs extends Prisma.ProductTrackingFindManyArgs, TQueryFnData = Array<Prisma.ProductTrackingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findMany`, args, options, fetch);
}

export function useFindUniqueProductTracking<TArgs extends Prisma.ProductTrackingFindUniqueArgs, TQueryFnData = Prisma.ProductTrackingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueProductTracking<TArgs extends Prisma.ProductTrackingFindUniqueArgs, TQueryFnData = Prisma.ProductTrackingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findUnique`, args, options, fetch);
}

export function useFindFirstProductTracking<TArgs extends Prisma.ProductTrackingFindFirstArgs, TQueryFnData = Prisma.ProductTrackingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstProductTracking<TArgs extends Prisma.ProductTrackingFindFirstArgs, TQueryFnData = Prisma.ProductTrackingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/findFirst`, args, options, fetch);
}

export function useUpdateProductTracking(options?: Omit<(UseMutationOptions<(ProductTracking | undefined), DefaultError, Prisma.ProductTrackingUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingUpdateArgs, DefaultError, ProductTracking, true>('ProductTracking', 'PUT', `${endpoint}/productTracking/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyProductTracking(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProductTrackingUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProductTracking', 'PUT', `${endpoint}/productTracking/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertProductTracking(options?: Omit<(UseMutationOptions<(ProductTracking | undefined), DefaultError, Prisma.ProductTrackingUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingUpsertArgs, DefaultError, ProductTracking, true>('ProductTracking', 'POST', `${endpoint}/productTracking/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteProductTracking(options?: Omit<(UseMutationOptions<(ProductTracking | undefined), DefaultError, Prisma.ProductTrackingDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingDeleteArgs, DefaultError, ProductTracking, true>('ProductTracking', 'DELETE', `${endpoint}/productTracking/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductTracking, Prisma.ProductTrackingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyProductTracking(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProductTrackingDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductTrackingDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ProductTracking', 'DELETE', `${endpoint}/productTracking/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductTrackingDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductTrackingDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProductTrackingDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateProductTracking<TArgs extends Prisma.ProductTrackingAggregateArgs, TQueryFnData = Prisma.GetProductTrackingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateProductTracking<TArgs extends Prisma.ProductTrackingAggregateArgs, TQueryFnData = Prisma.GetProductTrackingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/aggregate`, args, options, fetch);
}

export function useGroupByProductTracking<TArgs extends Prisma.ProductTrackingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProductTrackingGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProductTrackingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProductTrackingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProductTrackingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductTrackingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductTrackingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProductTrackingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByProductTracking<TArgs extends Prisma.ProductTrackingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProductTrackingGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProductTrackingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProductTrackingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProductTrackingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductTrackingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductTrackingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProductTrackingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/groupBy`, args, options, fetch);
}

export function useCountProductTracking<TArgs extends Prisma.ProductTrackingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProductTrackingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/count`, args, options, fetch);
}

export function useSuspenseCountProductTracking<TArgs extends Prisma.ProductTrackingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProductTrackingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductTrackingCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductTracking', `${endpoint}/productTracking/count`, args, options, fetch);
}

export function useCheckProductTracking<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; shopifyResourceId?: string; tiktokProductId?: string; customProductId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ProductTracking', `${endpoint}/productTracking/check`, args, options, fetch);
}
