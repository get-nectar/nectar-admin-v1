/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, FacebookTrigger } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateFacebookTrigger(options?: Omit<(UseMutationOptions<(FacebookTrigger | undefined), DefaultError, Prisma.FacebookTriggerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerCreateArgs, DefaultError, FacebookTrigger, true>('FacebookTrigger', 'POST', `${endpoint}/facebookTrigger/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyFacebookTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookTriggerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookTrigger', 'POST', `${endpoint}/facebookTrigger/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findMany`, args, options, fetch);
}

export function useInfiniteFindManyFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findMany`, args, options, fetch);
}

export function useSuspenseFindManyFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindManyArgs, TQueryFnData = Array<Prisma.FacebookTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findMany`, args, options, fetch);
}

export function useFindUniqueFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindUniqueArgs, TQueryFnData = Prisma.FacebookTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindUniqueArgs, TQueryFnData = Prisma.FacebookTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findUnique`, args, options, fetch);
}

export function useFindFirstFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindFirstArgs, TQueryFnData = Prisma.FacebookTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstFacebookTrigger<TArgs extends Prisma.FacebookTriggerFindFirstArgs, TQueryFnData = Prisma.FacebookTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/findFirst`, args, options, fetch);
}

export function useUpdateFacebookTrigger(options?: Omit<(UseMutationOptions<(FacebookTrigger | undefined), DefaultError, Prisma.FacebookTriggerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerUpdateArgs, DefaultError, FacebookTrigger, true>('FacebookTrigger', 'PUT', `${endpoint}/facebookTrigger/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyFacebookTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookTriggerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookTrigger', 'PUT', `${endpoint}/facebookTrigger/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertFacebookTrigger(options?: Omit<(UseMutationOptions<(FacebookTrigger | undefined), DefaultError, Prisma.FacebookTriggerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerUpsertArgs, DefaultError, FacebookTrigger, true>('FacebookTrigger', 'POST', `${endpoint}/facebookTrigger/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteFacebookTrigger(options?: Omit<(UseMutationOptions<(FacebookTrigger | undefined), DefaultError, Prisma.FacebookTriggerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerDeleteArgs, DefaultError, FacebookTrigger, true>('FacebookTrigger', 'DELETE', `${endpoint}/facebookTrigger/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookTrigger, Prisma.FacebookTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyFacebookTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookTriggerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookTriggerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookTrigger', 'DELETE', `${endpoint}/facebookTrigger/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookTriggerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookTriggerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookTriggerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateFacebookTrigger<TArgs extends Prisma.FacebookTriggerAggregateArgs, TQueryFnData = Prisma.GetFacebookTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateFacebookTrigger<TArgs extends Prisma.FacebookTriggerAggregateArgs, TQueryFnData = Prisma.GetFacebookTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/aggregate`, args, options, fetch);
}

export function useGroupByFacebookTrigger<TArgs extends Prisma.FacebookTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByFacebookTrigger<TArgs extends Prisma.FacebookTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/groupBy`, args, options, fetch);
}

export function useCountFacebookTrigger<TArgs extends Prisma.FacebookTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/count`, args, options, fetch);
}

export function useSuspenseCountFacebookTrigger<TArgs extends Prisma.FacebookTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookTriggerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/count`, args, options, fetch);
}
import type { TriggerScope, TriggerReplyCondition, FacebookTriggerEvent } from '@prisma/client';

export function useCheckFacebookTrigger<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; scope?: TriggerScope; replyCondition?: TriggerReplyCondition; triggerWords?: string; triggerIntents?: string; isDisabledOnNegativeSentiment?: boolean; additionalConditionsUniqueHash?: string; triggerId?: string; journeyTriggerId?: string; facebookPageAccountId?: string; event?: FacebookTriggerEvent }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('FacebookTrigger', `${endpoint}/facebookTrigger/check`, args, options, fetch);
}
