/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ActionBlockConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateActionBlockConfig(options?: Omit<(UseMutationOptions<(ActionBlockConfig | undefined), DefaultError, Prisma.ActionBlockConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigCreateArgs, DefaultError, ActionBlockConfig, true>('ActionBlockConfig', 'POST', `${endpoint}/actionBlockConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyActionBlockConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ActionBlockConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ActionBlockConfig', 'POST', `${endpoint}/actionBlockConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findMany`, args, options, fetch);
}

export function useFindUniqueActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindUniqueArgs, TQueryFnData = Prisma.ActionBlockConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindUniqueArgs, TQueryFnData = Prisma.ActionBlockConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findUnique`, args, options, fetch);
}

export function useFindFirstActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindFirstArgs, TQueryFnData = Prisma.ActionBlockConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstActionBlockConfig<TArgs extends Prisma.ActionBlockConfigFindFirstArgs, TQueryFnData = Prisma.ActionBlockConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/findFirst`, args, options, fetch);
}

export function useUpdateActionBlockConfig(options?: Omit<(UseMutationOptions<(ActionBlockConfig | undefined), DefaultError, Prisma.ActionBlockConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigUpdateArgs, DefaultError, ActionBlockConfig, true>('ActionBlockConfig', 'PUT', `${endpoint}/actionBlockConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyActionBlockConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ActionBlockConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ActionBlockConfig', 'PUT', `${endpoint}/actionBlockConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertActionBlockConfig(options?: Omit<(UseMutationOptions<(ActionBlockConfig | undefined), DefaultError, Prisma.ActionBlockConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigUpsertArgs, DefaultError, ActionBlockConfig, true>('ActionBlockConfig', 'POST', `${endpoint}/actionBlockConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteActionBlockConfig(options?: Omit<(UseMutationOptions<(ActionBlockConfig | undefined), DefaultError, Prisma.ActionBlockConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigDeleteArgs, DefaultError, ActionBlockConfig, true>('ActionBlockConfig', 'DELETE', `${endpoint}/actionBlockConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlockConfig, Prisma.ActionBlockConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyActionBlockConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ActionBlockConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ActionBlockConfig', 'DELETE', `${endpoint}/actionBlockConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateActionBlockConfig<TArgs extends Prisma.ActionBlockConfigAggregateArgs, TQueryFnData = Prisma.GetActionBlockConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateActionBlockConfig<TArgs extends Prisma.ActionBlockConfigAggregateArgs, TQueryFnData = Prisma.GetActionBlockConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/aggregate`, args, options, fetch);
}

export function useGroupByActionBlockConfig<TArgs extends Prisma.ActionBlockConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ActionBlockConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ActionBlockConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ActionBlockConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ActionBlockConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ActionBlockConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByActionBlockConfig<TArgs extends Prisma.ActionBlockConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ActionBlockConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ActionBlockConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ActionBlockConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ActionBlockConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ActionBlockConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/groupBy`, args, options, fetch);
}

export function useCountActionBlockConfig<TArgs extends Prisma.ActionBlockConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ActionBlockConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/count`, args, options, fetch);
}

export function useSuspenseCountActionBlockConfig<TArgs extends Prisma.ActionBlockConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ActionBlockConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/count`, args, options, fetch);
}
import type { ActionBlockType } from '@prisma/client';

export function useCheckActionBlockConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: number; actionBlockType?: ActionBlockType; description?: string; corePrompt?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ActionBlockConfig', `${endpoint}/actionBlockConfig/check`, args, options, fetch);
}
