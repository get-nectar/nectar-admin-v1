/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CustomResponseSession } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCustomResponseSession(options?: Omit<(UseMutationOptions<(CustomResponseSession | undefined), DefaultError, Prisma.CustomResponseSessionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionCreateArgs, DefaultError, CustomResponseSession, true>('CustomResponseSession', 'POST', `${endpoint}/customResponseSession/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCustomResponseSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomResponseSessionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CustomResponseSession', 'POST', `${endpoint}/customResponseSession/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CustomResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CustomResponseSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CustomResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CustomResponseSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findMany`, args, options, fetch);
}

export function useFindUniqueCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindUniqueArgs, TQueryFnData = Prisma.CustomResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindUniqueArgs, TQueryFnData = Prisma.CustomResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findUnique`, args, options, fetch);
}

export function useFindFirstCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindFirstArgs, TQueryFnData = Prisma.CustomResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCustomResponseSession<TArgs extends Prisma.CustomResponseSessionFindFirstArgs, TQueryFnData = Prisma.CustomResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/findFirst`, args, options, fetch);
}

export function useUpdateCustomResponseSession(options?: Omit<(UseMutationOptions<(CustomResponseSession | undefined), DefaultError, Prisma.CustomResponseSessionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionUpdateArgs, DefaultError, CustomResponseSession, true>('CustomResponseSession', 'PUT', `${endpoint}/customResponseSession/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCustomResponseSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomResponseSessionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CustomResponseSession', 'PUT', `${endpoint}/customResponseSession/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCustomResponseSession(options?: Omit<(UseMutationOptions<(CustomResponseSession | undefined), DefaultError, Prisma.CustomResponseSessionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionUpsertArgs, DefaultError, CustomResponseSession, true>('CustomResponseSession', 'POST', `${endpoint}/customResponseSession/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCustomResponseSession(options?: Omit<(UseMutationOptions<(CustomResponseSession | undefined), DefaultError, Prisma.CustomResponseSessionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionDeleteArgs, DefaultError, CustomResponseSession, true>('CustomResponseSession', 'DELETE', `${endpoint}/customResponseSession/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CustomResponseSession, Prisma.CustomResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCustomResponseSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomResponseSessionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomResponseSessionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CustomResponseSession', 'DELETE', `${endpoint}/customResponseSession/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomResponseSessionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomResponseSessionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomResponseSessionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCustomResponseSession<TArgs extends Prisma.CustomResponseSessionAggregateArgs, TQueryFnData = Prisma.GetCustomResponseSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCustomResponseSession<TArgs extends Prisma.CustomResponseSessionAggregateArgs, TQueryFnData = Prisma.GetCustomResponseSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/aggregate`, args, options, fetch);
}

export function useGroupByCustomResponseSession<TArgs extends Prisma.CustomResponseSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CustomResponseSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.CustomResponseSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CustomResponseSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CustomResponseSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CustomResponseSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CustomResponseSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CustomResponseSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCustomResponseSession<TArgs extends Prisma.CustomResponseSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CustomResponseSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.CustomResponseSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CustomResponseSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CustomResponseSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CustomResponseSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CustomResponseSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CustomResponseSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/groupBy`, args, options, fetch);
}

export function useCountCustomResponseSession<TArgs extends Prisma.CustomResponseSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CustomResponseSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/count`, args, options, fetch);
}

export function useSuspenseCountCustomResponseSession<TArgs extends Prisma.CustomResponseSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CustomResponseSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CustomResponseSessionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CustomResponseSession', `${endpoint}/customResponseSession/count`, args, options, fetch);
}
import type { CustomResponseSessionStatus } from '@prisma/client';

export function useCheckCustomResponseSession<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; status?: CustomResponseSessionStatus; blockId?: string; journeyId?: string; journeySessionId?: string; communityMemberId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CustomResponseSession', `${endpoint}/customResponseSession/check`, args, options, fetch);
}
