/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityMemberKlaviyoProfile } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<(CommunityMemberKlaviyoProfile | undefined), DefaultError, Prisma.CommunityMemberKlaviyoProfileCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileCreateArgs, DefaultError, CommunityMemberKlaviyoProfile, true>('CommunityMemberKlaviyoProfile', 'POST', `${endpoint}/communityMemberKlaviyoProfile/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberKlaviyoProfileCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberKlaviyoProfile', 'POST', `${endpoint}/communityMemberKlaviyoProfile/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindFirstArgs, TQueryFnData = Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileFindFirstArgs, TQueryFnData = Prisma.CommunityMemberKlaviyoProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/findFirst`, args, options, fetch);
}

export function useUpdateCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<(CommunityMemberKlaviyoProfile | undefined), DefaultError, Prisma.CommunityMemberKlaviyoProfileUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileUpdateArgs, DefaultError, CommunityMemberKlaviyoProfile, true>('CommunityMemberKlaviyoProfile', 'PUT', `${endpoint}/communityMemberKlaviyoProfile/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberKlaviyoProfileUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberKlaviyoProfile', 'PUT', `${endpoint}/communityMemberKlaviyoProfile/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<(CommunityMemberKlaviyoProfile | undefined), DefaultError, Prisma.CommunityMemberKlaviyoProfileUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileUpsertArgs, DefaultError, CommunityMemberKlaviyoProfile, true>('CommunityMemberKlaviyoProfile', 'POST', `${endpoint}/communityMemberKlaviyoProfile/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<(CommunityMemberKlaviyoProfile | undefined), DefaultError, Prisma.CommunityMemberKlaviyoProfileDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileDeleteArgs, DefaultError, CommunityMemberKlaviyoProfile, true>('CommunityMemberKlaviyoProfile', 'DELETE', `${endpoint}/communityMemberKlaviyoProfile/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberKlaviyoProfile, Prisma.CommunityMemberKlaviyoProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityMemberKlaviyoProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberKlaviyoProfileDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberKlaviyoProfileDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberKlaviyoProfile', 'DELETE', `${endpoint}/communityMemberKlaviyoProfile/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberKlaviyoProfileDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberKlaviyoProfileDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberKlaviyoProfileAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberKlaviyoProfileAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/aggregate`, args, options, fetch);
}

export function useGroupByCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberKlaviyoProfileGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberKlaviyoProfileGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberKlaviyoProfileGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberKlaviyoProfileGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberKlaviyoProfileGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberKlaviyoProfileGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberKlaviyoProfileGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberKlaviyoProfileGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberKlaviyoProfileGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberKlaviyoProfileGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberKlaviyoProfileGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberKlaviyoProfileGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberKlaviyoProfileGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberKlaviyoProfileGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/groupBy`, args, options, fetch);
}

export function useCountCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberKlaviyoProfileCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/count`, args, options, fetch);
}

export function useSuspenseCountCommunityMemberKlaviyoProfile<TArgs extends Prisma.CommunityMemberKlaviyoProfileCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberKlaviyoProfileCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberKlaviyoProfileCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/count`, args, options, fetch);
}

export function useCheckCommunityMemberKlaviyoProfile<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; klaviyoAccountId?: string; profileId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityMemberKlaviyoProfile', `${endpoint}/communityMemberKlaviyoProfile/check`, args, options, fetch);
}
