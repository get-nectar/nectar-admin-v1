/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyAbandonedCart } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyAbandonedCart(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCart | undefined), DefaultError, Prisma.ShopifyAbandonedCartCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartCreateArgs, DefaultError, ShopifyAbandonedCart, true>('ShopifyAbandonedCart', 'POST', `${endpoint}/shopifyAbandonedCart/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyAbandonedCart(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCartCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCart', 'POST', `${endpoint}/shopifyAbandonedCart/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCartGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCartGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCartGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCartGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCartGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/findFirst`, args, options, fetch);
}

export function useUpdateShopifyAbandonedCart(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCart | undefined), DefaultError, Prisma.ShopifyAbandonedCartUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartUpdateArgs, DefaultError, ShopifyAbandonedCart, true>('ShopifyAbandonedCart', 'PUT', `${endpoint}/shopifyAbandonedCart/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyAbandonedCart(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCartUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCart', 'PUT', `${endpoint}/shopifyAbandonedCart/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyAbandonedCart(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCart | undefined), DefaultError, Prisma.ShopifyAbandonedCartUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartUpsertArgs, DefaultError, ShopifyAbandonedCart, true>('ShopifyAbandonedCart', 'POST', `${endpoint}/shopifyAbandonedCart/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyAbandonedCart(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCart | undefined), DefaultError, Prisma.ShopifyAbandonedCartDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartDeleteArgs, DefaultError, ShopifyAbandonedCart, true>('ShopifyAbandonedCart', 'DELETE', `${endpoint}/shopifyAbandonedCart/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCart, Prisma.ShopifyAbandonedCartGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyAbandonedCart(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCartDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCartDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCart', 'DELETE', `${endpoint}/shopifyAbandonedCart/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCartDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCartDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCartAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCartAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/aggregate`, args, options, fetch);
}

export function useGroupByShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCartGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCartGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCartGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCartGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCartGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCartGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCartGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCartGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCartGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCartGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCartGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/groupBy`, args, options, fetch);
}

export function useCountShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCartCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/count`, args, options, fetch);
}

export function useSuspenseCountShopifyAbandonedCart<TArgs extends Prisma.ShopifyAbandonedCartCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCartCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCartCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckShopifyAbandonedCart<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; customerId?: string; totalPrice?: string; currency?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyAbandonedCart', `${endpoint}/shopifyAbandonedCart/check`, args, options, fetch);
}
