/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AIGeneratedMessage } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAIGeneratedMessage(options?: Omit<(UseMutationOptions<(AIGeneratedMessage | undefined), DefaultError, Prisma.AIGeneratedMessageCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageCreateArgs, DefaultError, AIGeneratedMessage, true>('AIGeneratedMessage', 'POST', `${endpoint}/aIGeneratedMessage/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAIGeneratedMessage(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AIGeneratedMessageCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AIGeneratedMessage', 'POST', `${endpoint}/aIGeneratedMessage/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindManyArgs, TQueryFnData = Array<Prisma.AIGeneratedMessageGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindManyArgs, TQueryFnData = Array<Prisma.AIGeneratedMessageGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindManyArgs, TQueryFnData = Array<Prisma.AIGeneratedMessageGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindManyArgs, TQueryFnData = Array<Prisma.AIGeneratedMessageGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findMany`, args, options, fetch);
}

export function useFindUniqueAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindUniqueArgs, TQueryFnData = Prisma.AIGeneratedMessageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindUniqueArgs, TQueryFnData = Prisma.AIGeneratedMessageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findUnique`, args, options, fetch);
}

export function useFindFirstAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindFirstArgs, TQueryFnData = Prisma.AIGeneratedMessageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageFindFirstArgs, TQueryFnData = Prisma.AIGeneratedMessageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/findFirst`, args, options, fetch);
}

export function useUpdateAIGeneratedMessage(options?: Omit<(UseMutationOptions<(AIGeneratedMessage | undefined), DefaultError, Prisma.AIGeneratedMessageUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageUpdateArgs, DefaultError, AIGeneratedMessage, true>('AIGeneratedMessage', 'PUT', `${endpoint}/aIGeneratedMessage/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAIGeneratedMessage(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AIGeneratedMessageUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AIGeneratedMessage', 'PUT', `${endpoint}/aIGeneratedMessage/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAIGeneratedMessage(options?: Omit<(UseMutationOptions<(AIGeneratedMessage | undefined), DefaultError, Prisma.AIGeneratedMessageUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageUpsertArgs, DefaultError, AIGeneratedMessage, true>('AIGeneratedMessage', 'POST', `${endpoint}/aIGeneratedMessage/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAIGeneratedMessage(options?: Omit<(UseMutationOptions<(AIGeneratedMessage | undefined), DefaultError, Prisma.AIGeneratedMessageDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageDeleteArgs, DefaultError, AIGeneratedMessage, true>('AIGeneratedMessage', 'DELETE', `${endpoint}/aIGeneratedMessage/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AIGeneratedMessage, Prisma.AIGeneratedMessageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAIGeneratedMessage(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AIGeneratedMessageDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AIGeneratedMessageDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AIGeneratedMessage', 'DELETE', `${endpoint}/aIGeneratedMessage/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AIGeneratedMessageDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AIGeneratedMessageDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AIGeneratedMessageDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageAggregateArgs, TQueryFnData = Prisma.GetAIGeneratedMessageAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageAggregateArgs, TQueryFnData = Prisma.GetAIGeneratedMessageAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/aggregate`, args, options, fetch);
}

export function useGroupByAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AIGeneratedMessageGroupByArgs['orderBy'] } : { orderBy?: Prisma.AIGeneratedMessageGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AIGeneratedMessageGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AIGeneratedMessageGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AIGeneratedMessageGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AIGeneratedMessageGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AIGeneratedMessageGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AIGeneratedMessageGroupByArgs['orderBy'] } : { orderBy?: Prisma.AIGeneratedMessageGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AIGeneratedMessageGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AIGeneratedMessageGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AIGeneratedMessageGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AIGeneratedMessageGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AIGeneratedMessageGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/groupBy`, args, options, fetch);
}

export function useCountAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AIGeneratedMessageCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/count`, args, options, fetch);
}

export function useSuspenseCountAIGeneratedMessage<TArgs extends Prisma.AIGeneratedMessageCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AIGeneratedMessageCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AIGeneratedMessageCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/count`, args, options, fetch);
}

export function useCheckAIGeneratedMessage<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; conversationId?: string; body?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AIGeneratedMessage', `${endpoint}/aIGeneratedMessage/check`, args, options, fetch);
}
