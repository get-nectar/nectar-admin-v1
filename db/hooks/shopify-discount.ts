/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyDiscount } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyDiscount(options?: Omit<(UseMutationOptions<(ShopifyDiscount | undefined), DefaultError, Prisma.ShopifyDiscountCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountCreateArgs, DefaultError, ShopifyDiscount, true>('ShopifyDiscount', 'POST', `${endpoint}/shopifyDiscount/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyDiscount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyDiscountCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyDiscount', 'POST', `${endpoint}/shopifyDiscount/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindManyArgs, TQueryFnData = Array<Prisma.ShopifyDiscountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindManyArgs, TQueryFnData = Array<Prisma.ShopifyDiscountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindManyArgs, TQueryFnData = Array<Prisma.ShopifyDiscountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindManyArgs, TQueryFnData = Array<Prisma.ShopifyDiscountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindUniqueArgs, TQueryFnData = Prisma.ShopifyDiscountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindUniqueArgs, TQueryFnData = Prisma.ShopifyDiscountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindFirstArgs, TQueryFnData = Prisma.ShopifyDiscountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyDiscount<TArgs extends Prisma.ShopifyDiscountFindFirstArgs, TQueryFnData = Prisma.ShopifyDiscountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/findFirst`, args, options, fetch);
}

export function useUpdateShopifyDiscount(options?: Omit<(UseMutationOptions<(ShopifyDiscount | undefined), DefaultError, Prisma.ShopifyDiscountUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountUpdateArgs, DefaultError, ShopifyDiscount, true>('ShopifyDiscount', 'PUT', `${endpoint}/shopifyDiscount/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyDiscount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyDiscountUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyDiscount', 'PUT', `${endpoint}/shopifyDiscount/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyDiscount(options?: Omit<(UseMutationOptions<(ShopifyDiscount | undefined), DefaultError, Prisma.ShopifyDiscountUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountUpsertArgs, DefaultError, ShopifyDiscount, true>('ShopifyDiscount', 'POST', `${endpoint}/shopifyDiscount/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyDiscount(options?: Omit<(UseMutationOptions<(ShopifyDiscount | undefined), DefaultError, Prisma.ShopifyDiscountDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountDeleteArgs, DefaultError, ShopifyDiscount, true>('ShopifyDiscount', 'DELETE', `${endpoint}/shopifyDiscount/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyDiscount, Prisma.ShopifyDiscountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyDiscount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyDiscountDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyDiscountDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyDiscount', 'DELETE', `${endpoint}/shopifyDiscount/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyDiscountDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyDiscountDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyDiscountDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyDiscount<TArgs extends Prisma.ShopifyDiscountAggregateArgs, TQueryFnData = Prisma.GetShopifyDiscountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyDiscount<TArgs extends Prisma.ShopifyDiscountAggregateArgs, TQueryFnData = Prisma.GetShopifyDiscountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/aggregate`, args, options, fetch);
}

export function useGroupByShopifyDiscount<TArgs extends Prisma.ShopifyDiscountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyDiscountGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyDiscountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyDiscountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyDiscountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyDiscountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyDiscountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyDiscountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyDiscount<TArgs extends Prisma.ShopifyDiscountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyDiscountGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyDiscountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyDiscountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyDiscountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyDiscountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyDiscountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyDiscountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/groupBy`, args, options, fetch);
}

export function useCountShopifyDiscount<TArgs extends Prisma.ShopifyDiscountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyDiscountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/count`, args, options, fetch);
}

export function useSuspenseCountShopifyDiscount<TArgs extends Prisma.ShopifyDiscountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyDiscountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyDiscountCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/count`, args, options, fetch);
}
import type { ShopifyDiscountType, ShopifyDiscountMinimumRequirement, CurrencyCode, DiscountDurationType, TimePeriodUnit } from '@prisma/client';

export function useCheckShopifyDiscount<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; shopifyAccountId?: string; title?: string; prefix?: string; discountType?: ShopifyDiscountType; discountValue?: string; minimumRequirement?: ShopifyDiscountMinimumRequirement; minimumRequirementValue?: string; currency?: CurrencyCode; discountDurationType?: DiscountDurationType; duration?: number; durationUnit?: TimePeriodUnit }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyDiscount', `${endpoint}/shopifyDiscount/check`, args, options, fetch);
}
