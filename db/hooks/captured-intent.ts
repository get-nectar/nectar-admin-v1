/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CapturedIntent } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCapturedIntent(options?: Omit<(UseMutationOptions<(CapturedIntent | undefined), DefaultError, Prisma.CapturedIntentCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentCreateArgs, DefaultError, CapturedIntent, true>('CapturedIntent', 'POST', `${endpoint}/capturedIntent/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCapturedIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CapturedIntentCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CapturedIntent', 'POST', `${endpoint}/capturedIntent/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCapturedIntent<TArgs extends Prisma.CapturedIntentFindManyArgs, TQueryFnData = Array<Prisma.CapturedIntentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCapturedIntent<TArgs extends Prisma.CapturedIntentFindManyArgs, TQueryFnData = Array<Prisma.CapturedIntentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCapturedIntent<TArgs extends Prisma.CapturedIntentFindManyArgs, TQueryFnData = Array<Prisma.CapturedIntentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCapturedIntent<TArgs extends Prisma.CapturedIntentFindManyArgs, TQueryFnData = Array<Prisma.CapturedIntentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findMany`, args, options, fetch);
}

export function useFindUniqueCapturedIntent<TArgs extends Prisma.CapturedIntentFindUniqueArgs, TQueryFnData = Prisma.CapturedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCapturedIntent<TArgs extends Prisma.CapturedIntentFindUniqueArgs, TQueryFnData = Prisma.CapturedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findUnique`, args, options, fetch);
}

export function useFindFirstCapturedIntent<TArgs extends Prisma.CapturedIntentFindFirstArgs, TQueryFnData = Prisma.CapturedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCapturedIntent<TArgs extends Prisma.CapturedIntentFindFirstArgs, TQueryFnData = Prisma.CapturedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/findFirst`, args, options, fetch);
}

export function useUpdateCapturedIntent(options?: Omit<(UseMutationOptions<(CapturedIntent | undefined), DefaultError, Prisma.CapturedIntentUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentUpdateArgs, DefaultError, CapturedIntent, true>('CapturedIntent', 'PUT', `${endpoint}/capturedIntent/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCapturedIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CapturedIntentUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CapturedIntent', 'PUT', `${endpoint}/capturedIntent/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCapturedIntent(options?: Omit<(UseMutationOptions<(CapturedIntent | undefined), DefaultError, Prisma.CapturedIntentUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentUpsertArgs, DefaultError, CapturedIntent, true>('CapturedIntent', 'POST', `${endpoint}/capturedIntent/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCapturedIntent(options?: Omit<(UseMutationOptions<(CapturedIntent | undefined), DefaultError, Prisma.CapturedIntentDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentDeleteArgs, DefaultError, CapturedIntent, true>('CapturedIntent', 'DELETE', `${endpoint}/capturedIntent/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CapturedIntent, Prisma.CapturedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCapturedIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CapturedIntentDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CapturedIntentDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CapturedIntent', 'DELETE', `${endpoint}/capturedIntent/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CapturedIntentDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CapturedIntentDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CapturedIntentDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCapturedIntent<TArgs extends Prisma.CapturedIntentAggregateArgs, TQueryFnData = Prisma.GetCapturedIntentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCapturedIntent<TArgs extends Prisma.CapturedIntentAggregateArgs, TQueryFnData = Prisma.GetCapturedIntentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/aggregate`, args, options, fetch);
}

export function useGroupByCapturedIntent<TArgs extends Prisma.CapturedIntentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CapturedIntentGroupByArgs['orderBy'] } : { orderBy?: Prisma.CapturedIntentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CapturedIntentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CapturedIntentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CapturedIntentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CapturedIntentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CapturedIntentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCapturedIntent<TArgs extends Prisma.CapturedIntentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CapturedIntentGroupByArgs['orderBy'] } : { orderBy?: Prisma.CapturedIntentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CapturedIntentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CapturedIntentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CapturedIntentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CapturedIntentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CapturedIntentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/groupBy`, args, options, fetch);
}

export function useCountCapturedIntent<TArgs extends Prisma.CapturedIntentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CapturedIntentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/count`, args, options, fetch);
}

export function useSuspenseCountCapturedIntent<TArgs extends Prisma.CapturedIntentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CapturedIntentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CapturedIntentCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CapturedIntent', `${endpoint}/capturedIntent/count`, args, options, fetch);
}
import type { CapturedIntentType } from '@prisma/client';

export function useCheckCapturedIntent<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; type?: CapturedIntentType; commentId?: string; conversationId?: string; intentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CapturedIntent', `${endpoint}/capturedIntent/check`, args, options, fetch);
}
