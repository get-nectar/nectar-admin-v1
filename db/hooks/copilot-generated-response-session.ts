/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CopilotGeneratedResponseSession } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponseSession | undefined), DefaultError, Prisma.CopilotGeneratedResponseSessionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionCreateArgs, DefaultError, CopilotGeneratedResponseSession, true>('CopilotGeneratedResponseSession', 'POST', `${endpoint}/copilotGeneratedResponseSession/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CopilotGeneratedResponseSessionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CopilotGeneratedResponseSession', 'POST', `${endpoint}/copilotGeneratedResponseSession/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findMany`, args, options, fetch);
}

export function useFindUniqueCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindUniqueArgs, TQueryFnData = Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindUniqueArgs, TQueryFnData = Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findUnique`, args, options, fetch);
}

export function useFindFirstCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindFirstArgs, TQueryFnData = Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionFindFirstArgs, TQueryFnData = Prisma.CopilotGeneratedResponseSessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/findFirst`, args, options, fetch);
}

export function useUpdateCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponseSession | undefined), DefaultError, Prisma.CopilotGeneratedResponseSessionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionUpdateArgs, DefaultError, CopilotGeneratedResponseSession, true>('CopilotGeneratedResponseSession', 'PUT', `${endpoint}/copilotGeneratedResponseSession/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CopilotGeneratedResponseSessionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CopilotGeneratedResponseSession', 'PUT', `${endpoint}/copilotGeneratedResponseSession/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponseSession | undefined), DefaultError, Prisma.CopilotGeneratedResponseSessionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionUpsertArgs, DefaultError, CopilotGeneratedResponseSession, true>('CopilotGeneratedResponseSession', 'POST', `${endpoint}/copilotGeneratedResponseSession/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponseSession | undefined), DefaultError, Prisma.CopilotGeneratedResponseSessionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionDeleteArgs, DefaultError, CopilotGeneratedResponseSession, true>('CopilotGeneratedResponseSession', 'DELETE', `${endpoint}/copilotGeneratedResponseSession/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponseSession, Prisma.CopilotGeneratedResponseSessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCopilotGeneratedResponseSession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CopilotGeneratedResponseSessionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseSessionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CopilotGeneratedResponseSession', 'DELETE', `${endpoint}/copilotGeneratedResponseSession/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseSessionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseSessionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionAggregateArgs, TQueryFnData = Prisma.GetCopilotGeneratedResponseSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionAggregateArgs, TQueryFnData = Prisma.GetCopilotGeneratedResponseSessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/aggregate`, args, options, fetch);
}

export function useGroupByCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CopilotGeneratedResponseSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.CopilotGeneratedResponseSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CopilotGeneratedResponseSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CopilotGeneratedResponseSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CopilotGeneratedResponseSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CopilotGeneratedResponseSessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.CopilotGeneratedResponseSessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CopilotGeneratedResponseSessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CopilotGeneratedResponseSessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseSessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseSessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CopilotGeneratedResponseSessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/groupBy`, args, options, fetch);
}

export function useCountCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CopilotGeneratedResponseSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/count`, args, options, fetch);
}

export function useSuspenseCountCopilotGeneratedResponseSession<TArgs extends Prisma.CopilotGeneratedResponseSessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CopilotGeneratedResponseSessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseSessionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/count`, args, options, fetch);
}
import type { CopilotSessionStatus } from '@prisma/client';

export function useCheckCopilotGeneratedResponseSession<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; status?: CopilotSessionStatus }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CopilotGeneratedResponseSession', `${endpoint}/copilotGeneratedResponseSession/check`, args, options, fetch);
}
