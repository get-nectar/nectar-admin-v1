/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MessageReaction } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMessageReaction(options?: Omit<(UseMutationOptions<(MessageReaction | undefined), DefaultError, Prisma.MessageReactionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionCreateArgs, DefaultError, MessageReaction, true>('MessageReaction', 'POST', `${endpoint}/messageReaction/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMessageReaction(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MessageReactionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MessageReaction', 'POST', `${endpoint}/messageReaction/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMessageReaction<TArgs extends Prisma.MessageReactionFindManyArgs, TQueryFnData = Array<Prisma.MessageReactionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMessageReaction<TArgs extends Prisma.MessageReactionFindManyArgs, TQueryFnData = Array<Prisma.MessageReactionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMessageReaction<TArgs extends Prisma.MessageReactionFindManyArgs, TQueryFnData = Array<Prisma.MessageReactionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMessageReaction<TArgs extends Prisma.MessageReactionFindManyArgs, TQueryFnData = Array<Prisma.MessageReactionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findMany`, args, options, fetch);
}

export function useFindUniqueMessageReaction<TArgs extends Prisma.MessageReactionFindUniqueArgs, TQueryFnData = Prisma.MessageReactionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMessageReaction<TArgs extends Prisma.MessageReactionFindUniqueArgs, TQueryFnData = Prisma.MessageReactionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findUnique`, args, options, fetch);
}

export function useFindFirstMessageReaction<TArgs extends Prisma.MessageReactionFindFirstArgs, TQueryFnData = Prisma.MessageReactionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMessageReaction<TArgs extends Prisma.MessageReactionFindFirstArgs, TQueryFnData = Prisma.MessageReactionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/findFirst`, args, options, fetch);
}

export function useUpdateMessageReaction(options?: Omit<(UseMutationOptions<(MessageReaction | undefined), DefaultError, Prisma.MessageReactionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionUpdateArgs, DefaultError, MessageReaction, true>('MessageReaction', 'PUT', `${endpoint}/messageReaction/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMessageReaction(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MessageReactionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MessageReaction', 'PUT', `${endpoint}/messageReaction/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMessageReaction(options?: Omit<(UseMutationOptions<(MessageReaction | undefined), DefaultError, Prisma.MessageReactionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionUpsertArgs, DefaultError, MessageReaction, true>('MessageReaction', 'POST', `${endpoint}/messageReaction/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMessageReaction(options?: Omit<(UseMutationOptions<(MessageReaction | undefined), DefaultError, Prisma.MessageReactionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionDeleteArgs, DefaultError, MessageReaction, true>('MessageReaction', 'DELETE', `${endpoint}/messageReaction/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MessageReaction, Prisma.MessageReactionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMessageReaction(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MessageReactionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MessageReactionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MessageReaction', 'DELETE', `${endpoint}/messageReaction/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MessageReactionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MessageReactionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MessageReactionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMessageReaction<TArgs extends Prisma.MessageReactionAggregateArgs, TQueryFnData = Prisma.GetMessageReactionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageReactionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMessageReaction<TArgs extends Prisma.MessageReactionAggregateArgs, TQueryFnData = Prisma.GetMessageReactionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MessageReactionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/aggregate`, args, options, fetch);
}

export function useGroupByMessageReaction<TArgs extends Prisma.MessageReactionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MessageReactionGroupByArgs['orderBy'] } : { orderBy?: Prisma.MessageReactionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MessageReactionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MessageReactionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageReactionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageReactionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MessageReactionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMessageReaction<TArgs extends Prisma.MessageReactionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MessageReactionGroupByArgs['orderBy'] } : { orderBy?: Prisma.MessageReactionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MessageReactionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MessageReactionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageReactionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MessageReactionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MessageReactionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/groupBy`, args, options, fetch);
}

export function useCountMessageReaction<TArgs extends Prisma.MessageReactionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MessageReactionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/count`, args, options, fetch);
}

export function useSuspenseCountMessageReaction<TArgs extends Prisma.MessageReactionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MessageReactionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MessageReactionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MessageReaction', `${endpoint}/messageReaction/count`, args, options, fetch);
}
import type { MessageReactionActionType, MessageReactionType } from '@prisma/client';

export function useCheckMessageReaction<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isFromOwner?: boolean; messageId?: string; conversationId?: string; actionType?: MessageReactionActionType; reactionType?: MessageReactionType; emoji?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MessageReaction', `${endpoint}/messageReaction/check`, args, options, fetch);
}
