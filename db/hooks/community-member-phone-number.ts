/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityMemberPhoneNumber } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<(CommunityMemberPhoneNumber | undefined), DefaultError, Prisma.CommunityMemberPhoneNumberCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberCreateArgs, DefaultError, CommunityMemberPhoneNumber, true>('CommunityMemberPhoneNumber', 'POST', `${endpoint}/communityMemberPhoneNumber/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberPhoneNumberCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberPhoneNumber', 'POST', `${endpoint}/communityMemberPhoneNumber/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberPhoneNumberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberPhoneNumberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberPhoneNumberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberPhoneNumberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberPhoneNumberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberPhoneNumberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindFirstArgs, TQueryFnData = Prisma.CommunityMemberPhoneNumberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberFindFirstArgs, TQueryFnData = Prisma.CommunityMemberPhoneNumberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/findFirst`, args, options, fetch);
}

export function useUpdateCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<(CommunityMemberPhoneNumber | undefined), DefaultError, Prisma.CommunityMemberPhoneNumberUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberUpdateArgs, DefaultError, CommunityMemberPhoneNumber, true>('CommunityMemberPhoneNumber', 'PUT', `${endpoint}/communityMemberPhoneNumber/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberPhoneNumberUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberPhoneNumber', 'PUT', `${endpoint}/communityMemberPhoneNumber/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<(CommunityMemberPhoneNumber | undefined), DefaultError, Prisma.CommunityMemberPhoneNumberUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberUpsertArgs, DefaultError, CommunityMemberPhoneNumber, true>('CommunityMemberPhoneNumber', 'POST', `${endpoint}/communityMemberPhoneNumber/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<(CommunityMemberPhoneNumber | undefined), DefaultError, Prisma.CommunityMemberPhoneNumberDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberDeleteArgs, DefaultError, CommunityMemberPhoneNumber, true>('CommunityMemberPhoneNumber', 'DELETE', `${endpoint}/communityMemberPhoneNumber/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberPhoneNumber, Prisma.CommunityMemberPhoneNumberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityMemberPhoneNumber(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberPhoneNumberDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberPhoneNumberDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberPhoneNumber', 'DELETE', `${endpoint}/communityMemberPhoneNumber/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberPhoneNumberDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberPhoneNumberDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberPhoneNumberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberPhoneNumberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/aggregate`, args, options, fetch);
}

export function useGroupByCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberPhoneNumberGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberPhoneNumberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberPhoneNumberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberPhoneNumberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberPhoneNumberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberPhoneNumberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberPhoneNumberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberPhoneNumberGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberPhoneNumberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberPhoneNumberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberPhoneNumberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberPhoneNumberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberPhoneNumberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberPhoneNumberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/groupBy`, args, options, fetch);
}

export function useCountCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberPhoneNumberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/count`, args, options, fetch);
}

export function useSuspenseCountCommunityMemberPhoneNumber<TArgs extends Prisma.CommunityMemberPhoneNumberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberPhoneNumberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberPhoneNumberCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/count`, args, options, fetch);
}
import type { PhoneNumberSource, MarketingOptInStatus } from '@prisma/client';

export function useCheckCommunityMemberPhoneNumber<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; phoneNumber?: string; isPrimary?: boolean; source?: PhoneNumberSource; marketingOptInStatus?: MarketingOptInStatus; communityMemberId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityMemberPhoneNumber', `${endpoint}/communityMemberPhoneNumber/check`, args, options, fetch);
}
