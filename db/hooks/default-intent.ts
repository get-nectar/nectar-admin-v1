/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DefaultIntent } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateDefaultIntent(options?: Omit<(UseMutationOptions<(DefaultIntent | undefined), DefaultError, Prisma.DefaultIntentCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentCreateArgs, DefaultError, DefaultIntent, true>('DefaultIntent', 'POST', `${endpoint}/defaultIntent/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDefaultIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DefaultIntentCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DefaultIntent', 'POST', `${endpoint}/defaultIntent/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDefaultIntent<TArgs extends Prisma.DefaultIntentFindManyArgs, TQueryFnData = Array<Prisma.DefaultIntentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDefaultIntent<TArgs extends Prisma.DefaultIntentFindManyArgs, TQueryFnData = Array<Prisma.DefaultIntentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findMany`, args, options, fetch);
}

export function useSuspenseFindManyDefaultIntent<TArgs extends Prisma.DefaultIntentFindManyArgs, TQueryFnData = Array<Prisma.DefaultIntentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyDefaultIntent<TArgs extends Prisma.DefaultIntentFindManyArgs, TQueryFnData = Array<Prisma.DefaultIntentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findMany`, args, options, fetch);
}

export function useFindUniqueDefaultIntent<TArgs extends Prisma.DefaultIntentFindUniqueArgs, TQueryFnData = Prisma.DefaultIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueDefaultIntent<TArgs extends Prisma.DefaultIntentFindUniqueArgs, TQueryFnData = Prisma.DefaultIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findUnique`, args, options, fetch);
}

export function useFindFirstDefaultIntent<TArgs extends Prisma.DefaultIntentFindFirstArgs, TQueryFnData = Prisma.DefaultIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstDefaultIntent<TArgs extends Prisma.DefaultIntentFindFirstArgs, TQueryFnData = Prisma.DefaultIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/findFirst`, args, options, fetch);
}

export function useUpdateDefaultIntent(options?: Omit<(UseMutationOptions<(DefaultIntent | undefined), DefaultError, Prisma.DefaultIntentUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentUpdateArgs, DefaultError, DefaultIntent, true>('DefaultIntent', 'PUT', `${endpoint}/defaultIntent/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDefaultIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DefaultIntentUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DefaultIntent', 'PUT', `${endpoint}/defaultIntent/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDefaultIntent(options?: Omit<(UseMutationOptions<(DefaultIntent | undefined), DefaultError, Prisma.DefaultIntentUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentUpsertArgs, DefaultError, DefaultIntent, true>('DefaultIntent', 'POST', `${endpoint}/defaultIntent/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDefaultIntent(options?: Omit<(UseMutationOptions<(DefaultIntent | undefined), DefaultError, Prisma.DefaultIntentDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentDeleteArgs, DefaultError, DefaultIntent, true>('DefaultIntent', 'DELETE', `${endpoint}/defaultIntent/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DefaultIntent, Prisma.DefaultIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDefaultIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DefaultIntentDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DefaultIntentDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DefaultIntent', 'DELETE', `${endpoint}/defaultIntent/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DefaultIntentDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DefaultIntentDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DefaultIntentDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDefaultIntent<TArgs extends Prisma.DefaultIntentAggregateArgs, TQueryFnData = Prisma.GetDefaultIntentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateDefaultIntent<TArgs extends Prisma.DefaultIntentAggregateArgs, TQueryFnData = Prisma.GetDefaultIntentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/aggregate`, args, options, fetch);
}

export function useGroupByDefaultIntent<TArgs extends Prisma.DefaultIntentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DefaultIntentGroupByArgs['orderBy'] } : { orderBy?: Prisma.DefaultIntentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DefaultIntentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DefaultIntentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultIntentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultIntentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DefaultIntentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByDefaultIntent<TArgs extends Prisma.DefaultIntentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DefaultIntentGroupByArgs['orderBy'] } : { orderBy?: Prisma.DefaultIntentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DefaultIntentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DefaultIntentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultIntentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DefaultIntentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DefaultIntentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/groupBy`, args, options, fetch);
}

export function useCountDefaultIntent<TArgs extends Prisma.DefaultIntentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DefaultIntentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/count`, args, options, fetch);
}

export function useSuspenseCountDefaultIntent<TArgs extends Prisma.DefaultIntentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DefaultIntentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DefaultIntentCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DefaultIntent', `${endpoint}/defaultIntent/count`, args, options, fetch);
}

export function useCheckDefaultIntent<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: number; title?: string; description?: string; examples?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DefaultIntent', `${endpoint}/defaultIntent/check`, args, options, fetch);
}
