/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokCard } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokCard(options?: Omit<(UseMutationOptions<(TikTokCard | undefined), DefaultError, Prisma.TikTokCardCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardCreateArgs, DefaultError, TikTokCard, true>('TikTokCard', 'POST', `${endpoint}/tikTokCard/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokCard(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCardCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCard', 'POST', `${endpoint}/tikTokCard/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokCard<TArgs extends Prisma.TikTokCardFindManyArgs, TQueryFnData = Array<Prisma.TikTokCardGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokCard<TArgs extends Prisma.TikTokCardFindManyArgs, TQueryFnData = Array<Prisma.TikTokCardGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokCard<TArgs extends Prisma.TikTokCardFindManyArgs, TQueryFnData = Array<Prisma.TikTokCardGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokCard<TArgs extends Prisma.TikTokCardFindManyArgs, TQueryFnData = Array<Prisma.TikTokCardGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokCard<TArgs extends Prisma.TikTokCardFindUniqueArgs, TQueryFnData = Prisma.TikTokCardGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokCard<TArgs extends Prisma.TikTokCardFindUniqueArgs, TQueryFnData = Prisma.TikTokCardGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokCard<TArgs extends Prisma.TikTokCardFindFirstArgs, TQueryFnData = Prisma.TikTokCardGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokCard<TArgs extends Prisma.TikTokCardFindFirstArgs, TQueryFnData = Prisma.TikTokCardGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/findFirst`, args, options, fetch);
}

export function useUpdateTikTokCard(options?: Omit<(UseMutationOptions<(TikTokCard | undefined), DefaultError, Prisma.TikTokCardUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardUpdateArgs, DefaultError, TikTokCard, true>('TikTokCard', 'PUT', `${endpoint}/tikTokCard/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokCard(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCardUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCard', 'PUT', `${endpoint}/tikTokCard/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokCard(options?: Omit<(UseMutationOptions<(TikTokCard | undefined), DefaultError, Prisma.TikTokCardUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardUpsertArgs, DefaultError, TikTokCard, true>('TikTokCard', 'POST', `${endpoint}/tikTokCard/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokCard(options?: Omit<(UseMutationOptions<(TikTokCard | undefined), DefaultError, Prisma.TikTokCardDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardDeleteArgs, DefaultError, TikTokCard, true>('TikTokCard', 'DELETE', `${endpoint}/tikTokCard/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCard, Prisma.TikTokCardGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokCard(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCardDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCardDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCard', 'DELETE', `${endpoint}/tikTokCard/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCardDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCardDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCardDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokCard<TArgs extends Prisma.TikTokCardAggregateArgs, TQueryFnData = Prisma.GetTikTokCardAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCardAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokCard<TArgs extends Prisma.TikTokCardAggregateArgs, TQueryFnData = Prisma.GetTikTokCardAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCardAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/aggregate`, args, options, fetch);
}

export function useGroupByTikTokCard<TArgs extends Prisma.TikTokCardGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokCardGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokCardGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokCardGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokCardGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCardGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCardGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokCardGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokCard<TArgs extends Prisma.TikTokCardGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokCardGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokCardGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokCardGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokCardGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCardGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCardGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokCardGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/groupBy`, args, options, fetch);
}

export function useCountTikTokCard<TArgs extends Prisma.TikTokCardCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokCardCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/count`, args, options, fetch);
}

export function useSuspenseCountTikTokCard<TArgs extends Prisma.TikTokCardCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokCardCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCardCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCard', `${endpoint}/tikTokCard/count`, args, options, fetch);
}

export function useCheckTikTokCard<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; messageId?: string; tiktokProductId?: string; tiktokOrderId?: string; tiktokCouponId?: string; refundProductId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokCard', `${endpoint}/tikTokCard/check`, args, options, fetch);
}
