/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommentDeleteMetadata } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommentDeleteMetadata(options?: Omit<(UseMutationOptions<(CommentDeleteMetadata | undefined), DefaultError, Prisma.CommentDeleteMetadataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataCreateArgs, DefaultError, CommentDeleteMetadata, true>('CommentDeleteMetadata', 'POST', `${endpoint}/commentDeleteMetadata/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommentDeleteMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommentDeleteMetadataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommentDeleteMetadata', 'POST', `${endpoint}/commentDeleteMetadata/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindManyArgs, TQueryFnData = Array<Prisma.CommentDeleteMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindManyArgs, TQueryFnData = Array<Prisma.CommentDeleteMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindManyArgs, TQueryFnData = Array<Prisma.CommentDeleteMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindManyArgs, TQueryFnData = Array<Prisma.CommentDeleteMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findMany`, args, options, fetch);
}

export function useFindUniqueCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindUniqueArgs, TQueryFnData = Prisma.CommentDeleteMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindUniqueArgs, TQueryFnData = Prisma.CommentDeleteMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findUnique`, args, options, fetch);
}

export function useFindFirstCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindFirstArgs, TQueryFnData = Prisma.CommentDeleteMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataFindFirstArgs, TQueryFnData = Prisma.CommentDeleteMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/findFirst`, args, options, fetch);
}

export function useUpdateCommentDeleteMetadata(options?: Omit<(UseMutationOptions<(CommentDeleteMetadata | undefined), DefaultError, Prisma.CommentDeleteMetadataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataUpdateArgs, DefaultError, CommentDeleteMetadata, true>('CommentDeleteMetadata', 'PUT', `${endpoint}/commentDeleteMetadata/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommentDeleteMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommentDeleteMetadataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommentDeleteMetadata', 'PUT', `${endpoint}/commentDeleteMetadata/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommentDeleteMetadata(options?: Omit<(UseMutationOptions<(CommentDeleteMetadata | undefined), DefaultError, Prisma.CommentDeleteMetadataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataUpsertArgs, DefaultError, CommentDeleteMetadata, true>('CommentDeleteMetadata', 'POST', `${endpoint}/commentDeleteMetadata/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommentDeleteMetadata(options?: Omit<(UseMutationOptions<(CommentDeleteMetadata | undefined), DefaultError, Prisma.CommentDeleteMetadataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataDeleteArgs, DefaultError, CommentDeleteMetadata, true>('CommentDeleteMetadata', 'DELETE', `${endpoint}/commentDeleteMetadata/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommentDeleteMetadata, Prisma.CommentDeleteMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommentDeleteMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommentDeleteMetadataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommentDeleteMetadataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommentDeleteMetadata', 'DELETE', `${endpoint}/commentDeleteMetadata/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommentDeleteMetadataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommentDeleteMetadataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataAggregateArgs, TQueryFnData = Prisma.GetCommentDeleteMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataAggregateArgs, TQueryFnData = Prisma.GetCommentDeleteMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/aggregate`, args, options, fetch);
}

export function useGroupByCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommentDeleteMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommentDeleteMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommentDeleteMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommentDeleteMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentDeleteMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentDeleteMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommentDeleteMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommentDeleteMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommentDeleteMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommentDeleteMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommentDeleteMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentDeleteMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommentDeleteMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommentDeleteMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/groupBy`, args, options, fetch);
}

export function useCountCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommentDeleteMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/count`, args, options, fetch);
}

export function useSuspenseCountCommentDeleteMetadata<TArgs extends Prisma.CommentDeleteMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommentDeleteMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommentDeleteMetadataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/count`, args, options, fetch);
}
import type { CommentViewState } from '@prisma/client';

export function useCheckCommentDeleteMetadata<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; commentId?: string; previousState?: CommentViewState }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommentDeleteMetadata', `${endpoint}/commentDeleteMetadata/check`, args, options, fetch);
}
