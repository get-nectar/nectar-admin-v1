/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ConversationOwner } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateConversationOwner(options?: Omit<(UseMutationOptions<(ConversationOwner | undefined), DefaultError, Prisma.ConversationOwnerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerCreateArgs, DefaultError, ConversationOwner, true>('ConversationOwner', 'POST', `${endpoint}/conversationOwner/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyConversationOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationOwnerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationOwner', 'POST', `${endpoint}/conversationOwner/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyConversationOwner<TArgs extends Prisma.ConversationOwnerFindManyArgs, TQueryFnData = Array<Prisma.ConversationOwnerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findMany`, args, options, fetch);
}

export function useInfiniteFindManyConversationOwner<TArgs extends Prisma.ConversationOwnerFindManyArgs, TQueryFnData = Array<Prisma.ConversationOwnerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findMany`, args, options, fetch);
}

export function useSuspenseFindManyConversationOwner<TArgs extends Prisma.ConversationOwnerFindManyArgs, TQueryFnData = Array<Prisma.ConversationOwnerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyConversationOwner<TArgs extends Prisma.ConversationOwnerFindManyArgs, TQueryFnData = Array<Prisma.ConversationOwnerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findMany`, args, options, fetch);
}

export function useFindUniqueConversationOwner<TArgs extends Prisma.ConversationOwnerFindUniqueArgs, TQueryFnData = Prisma.ConversationOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueConversationOwner<TArgs extends Prisma.ConversationOwnerFindUniqueArgs, TQueryFnData = Prisma.ConversationOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findUnique`, args, options, fetch);
}

export function useFindFirstConversationOwner<TArgs extends Prisma.ConversationOwnerFindFirstArgs, TQueryFnData = Prisma.ConversationOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstConversationOwner<TArgs extends Prisma.ConversationOwnerFindFirstArgs, TQueryFnData = Prisma.ConversationOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/findFirst`, args, options, fetch);
}

export function useUpdateConversationOwner(options?: Omit<(UseMutationOptions<(ConversationOwner | undefined), DefaultError, Prisma.ConversationOwnerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerUpdateArgs, DefaultError, ConversationOwner, true>('ConversationOwner', 'PUT', `${endpoint}/conversationOwner/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyConversationOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationOwnerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationOwner', 'PUT', `${endpoint}/conversationOwner/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertConversationOwner(options?: Omit<(UseMutationOptions<(ConversationOwner | undefined), DefaultError, Prisma.ConversationOwnerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerUpsertArgs, DefaultError, ConversationOwner, true>('ConversationOwner', 'POST', `${endpoint}/conversationOwner/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteConversationOwner(options?: Omit<(UseMutationOptions<(ConversationOwner | undefined), DefaultError, Prisma.ConversationOwnerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerDeleteArgs, DefaultError, ConversationOwner, true>('ConversationOwner', 'DELETE', `${endpoint}/conversationOwner/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationOwner, Prisma.ConversationOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyConversationOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationOwnerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationOwnerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationOwner', 'DELETE', `${endpoint}/conversationOwner/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationOwnerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationOwnerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationOwnerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateConversationOwner<TArgs extends Prisma.ConversationOwnerAggregateArgs, TQueryFnData = Prisma.GetConversationOwnerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateConversationOwner<TArgs extends Prisma.ConversationOwnerAggregateArgs, TQueryFnData = Prisma.GetConversationOwnerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/aggregate`, args, options, fetch);
}

export function useGroupByConversationOwner<TArgs extends Prisma.ConversationOwnerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationOwnerGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationOwnerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationOwnerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationOwnerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationOwnerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationOwnerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationOwnerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByConversationOwner<TArgs extends Prisma.ConversationOwnerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationOwnerGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationOwnerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationOwnerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationOwnerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationOwnerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationOwnerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationOwnerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/groupBy`, args, options, fetch);
}

export function useCountConversationOwner<TArgs extends Prisma.ConversationOwnerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationOwnerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/count`, args, options, fetch);
}

export function useSuspenseCountConversationOwner<TArgs extends Prisma.ConversationOwnerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationOwnerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationOwnerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationOwner', `${endpoint}/conversationOwner/count`, args, options, fetch);
}
import type { Platform } from '@prisma/client';

export function useCheckConversationOwner<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; platform?: Platform; instagramAccountId?: string; facebookPageAccountId?: string; tiktokAccountId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ConversationOwner', `${endpoint}/conversationOwner/check`, args, options, fetch);
}
