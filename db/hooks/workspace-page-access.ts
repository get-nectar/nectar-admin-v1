/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkspacePageAccess } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkspacePageAccess(options?: Omit<(UseMutationOptions<(WorkspacePageAccess | undefined), DefaultError, Prisma.WorkspacePageAccessCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessCreateArgs, DefaultError, WorkspacePageAccess, true>('WorkspacePageAccess', 'POST', `${endpoint}/workspacePageAccess/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkspacePageAccess(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspacePageAccessCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspacePageAccess', 'POST', `${endpoint}/workspacePageAccess/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindManyArgs, TQueryFnData = Array<Prisma.WorkspacePageAccessGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindManyArgs, TQueryFnData = Array<Prisma.WorkspacePageAccessGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindManyArgs, TQueryFnData = Array<Prisma.WorkspacePageAccessGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindManyArgs, TQueryFnData = Array<Prisma.WorkspacePageAccessGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findMany`, args, options, fetch);
}

export function useFindUniqueWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindUniqueArgs, TQueryFnData = Prisma.WorkspacePageAccessGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindUniqueArgs, TQueryFnData = Prisma.WorkspacePageAccessGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findUnique`, args, options, fetch);
}

export function useFindFirstWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindFirstArgs, TQueryFnData = Prisma.WorkspacePageAccessGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessFindFirstArgs, TQueryFnData = Prisma.WorkspacePageAccessGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/findFirst`, args, options, fetch);
}

export function useUpdateWorkspacePageAccess(options?: Omit<(UseMutationOptions<(WorkspacePageAccess | undefined), DefaultError, Prisma.WorkspacePageAccessUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessUpdateArgs, DefaultError, WorkspacePageAccess, true>('WorkspacePageAccess', 'PUT', `${endpoint}/workspacePageAccess/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkspacePageAccess(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspacePageAccessUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspacePageAccess', 'PUT', `${endpoint}/workspacePageAccess/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkspacePageAccess(options?: Omit<(UseMutationOptions<(WorkspacePageAccess | undefined), DefaultError, Prisma.WorkspacePageAccessUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessUpsertArgs, DefaultError, WorkspacePageAccess, true>('WorkspacePageAccess', 'POST', `${endpoint}/workspacePageAccess/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkspacePageAccess(options?: Omit<(UseMutationOptions<(WorkspacePageAccess | undefined), DefaultError, Prisma.WorkspacePageAccessDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessDeleteArgs, DefaultError, WorkspacePageAccess, true>('WorkspacePageAccess', 'DELETE', `${endpoint}/workspacePageAccess/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspacePageAccess, Prisma.WorkspacePageAccessGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkspacePageAccess(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspacePageAccessDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspacePageAccessDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspacePageAccess', 'DELETE', `${endpoint}/workspacePageAccess/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspacePageAccessDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspacePageAccessDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspacePageAccessDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessAggregateArgs, TQueryFnData = Prisma.GetWorkspacePageAccessAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessAggregateArgs, TQueryFnData = Prisma.GetWorkspacePageAccessAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/aggregate`, args, options, fetch);
}

export function useGroupByWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspacePageAccessGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspacePageAccessGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspacePageAccessGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspacePageAccessGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspacePageAccessGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspacePageAccessGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspacePageAccessGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspacePageAccessGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspacePageAccessGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspacePageAccessGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspacePageAccessGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspacePageAccessGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspacePageAccessGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspacePageAccessGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/groupBy`, args, options, fetch);
}

export function useCountWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspacePageAccessCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/count`, args, options, fetch);
}

export function useSuspenseCountWorkspacePageAccess<TArgs extends Prisma.WorkspacePageAccessCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspacePageAccessCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspacePageAccessCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/count`, args, options, fetch);
}
import type { TabType, AccessLevel } from '@prisma/client';

export function useCheckWorkspacePageAccess<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; tab?: TabType; accessLevel?: AccessLevel; accessRoleId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkspacePageAccess', `${endpoint}/workspacePageAccess/check`, args, options, fetch);
}
