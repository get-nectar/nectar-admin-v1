/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, JourneyCustomFieldStatistic } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<(JourneyCustomFieldStatistic | undefined), DefaultError, Prisma.JourneyCustomFieldStatisticCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticCreateArgs, DefaultError, JourneyCustomFieldStatistic, true>('JourneyCustomFieldStatistic', 'POST', `${endpoint}/journeyCustomFieldStatistic/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyCustomFieldStatisticCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyCustomFieldStatistic', 'POST', `${endpoint}/journeyCustomFieldStatistic/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindManyArgs, TQueryFnData = Array<Prisma.JourneyCustomFieldStatisticGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findMany`, args, options, fetch);
}

export function useInfiniteFindManyJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindManyArgs, TQueryFnData = Array<Prisma.JourneyCustomFieldStatisticGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findMany`, args, options, fetch);
}

export function useSuspenseFindManyJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindManyArgs, TQueryFnData = Array<Prisma.JourneyCustomFieldStatisticGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindManyArgs, TQueryFnData = Array<Prisma.JourneyCustomFieldStatisticGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findMany`, args, options, fetch);
}

export function useFindUniqueJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindUniqueArgs, TQueryFnData = Prisma.JourneyCustomFieldStatisticGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindUniqueArgs, TQueryFnData = Prisma.JourneyCustomFieldStatisticGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findUnique`, args, options, fetch);
}

export function useFindFirstJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindFirstArgs, TQueryFnData = Prisma.JourneyCustomFieldStatisticGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticFindFirstArgs, TQueryFnData = Prisma.JourneyCustomFieldStatisticGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/findFirst`, args, options, fetch);
}

export function useUpdateJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<(JourneyCustomFieldStatistic | undefined), DefaultError, Prisma.JourneyCustomFieldStatisticUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticUpdateArgs, DefaultError, JourneyCustomFieldStatistic, true>('JourneyCustomFieldStatistic', 'PUT', `${endpoint}/journeyCustomFieldStatistic/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyCustomFieldStatisticUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyCustomFieldStatistic', 'PUT', `${endpoint}/journeyCustomFieldStatistic/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<(JourneyCustomFieldStatistic | undefined), DefaultError, Prisma.JourneyCustomFieldStatisticUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticUpsertArgs, DefaultError, JourneyCustomFieldStatistic, true>('JourneyCustomFieldStatistic', 'POST', `${endpoint}/journeyCustomFieldStatistic/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<(JourneyCustomFieldStatistic | undefined), DefaultError, Prisma.JourneyCustomFieldStatisticDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticDeleteArgs, DefaultError, JourneyCustomFieldStatistic, true>('JourneyCustomFieldStatistic', 'DELETE', `${endpoint}/journeyCustomFieldStatistic/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyCustomFieldStatistic, Prisma.JourneyCustomFieldStatisticGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyJourneyCustomFieldStatistic(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyCustomFieldStatisticDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyCustomFieldStatisticDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyCustomFieldStatistic', 'DELETE', `${endpoint}/journeyCustomFieldStatistic/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyCustomFieldStatisticDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyCustomFieldStatisticDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticAggregateArgs, TQueryFnData = Prisma.GetJourneyCustomFieldStatisticAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticAggregateArgs, TQueryFnData = Prisma.GetJourneyCustomFieldStatisticAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/aggregate`, args, options, fetch);
}

export function useGroupByJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneyCustomFieldStatisticGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneyCustomFieldStatisticGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneyCustomFieldStatisticGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneyCustomFieldStatisticGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyCustomFieldStatisticGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyCustomFieldStatisticGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneyCustomFieldStatisticGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneyCustomFieldStatisticGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneyCustomFieldStatisticGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneyCustomFieldStatisticGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneyCustomFieldStatisticGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyCustomFieldStatisticGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyCustomFieldStatisticGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneyCustomFieldStatisticGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/groupBy`, args, options, fetch);
}

export function useCountJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneyCustomFieldStatisticCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/count`, args, options, fetch);
}

export function useSuspenseCountJourneyCustomFieldStatistic<TArgs extends Prisma.JourneyCustomFieldStatisticCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneyCustomFieldStatisticCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyCustomFieldStatisticCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/count`, args, options, fetch);
}

export function useCheckJourneyCustomFieldStatistic<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; journeyId?: string; customFieldId?: string; count?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('JourneyCustomFieldStatistic', `${endpoint}/journeyCustomFieldStatistic/check`, args, options, fetch);
}
