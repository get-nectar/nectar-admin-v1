/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, SentimentAnalysis } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateSentimentAnalysis(options?: Omit<(UseMutationOptions<(SentimentAnalysis | undefined), DefaultError, Prisma.SentimentAnalysisCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisCreateArgs, DefaultError, SentimentAnalysis, true>('SentimentAnalysis', 'POST', `${endpoint}/sentimentAnalysis/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySentimentAnalysis(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SentimentAnalysisCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('SentimentAnalysis', 'POST', `${endpoint}/sentimentAnalysis/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindManyArgs, TQueryFnData = Array<Prisma.SentimentAnalysisGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findMany`, args, options, fetch);
}

export function useInfiniteFindManySentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindManyArgs, TQueryFnData = Array<Prisma.SentimentAnalysisGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findMany`, args, options, fetch);
}

export function useSuspenseFindManySentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindManyArgs, TQueryFnData = Array<Prisma.SentimentAnalysisGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManySentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindManyArgs, TQueryFnData = Array<Prisma.SentimentAnalysisGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findMany`, args, options, fetch);
}

export function useFindUniqueSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindUniqueArgs, TQueryFnData = Prisma.SentimentAnalysisGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindUniqueArgs, TQueryFnData = Prisma.SentimentAnalysisGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findUnique`, args, options, fetch);
}

export function useFindFirstSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindFirstArgs, TQueryFnData = Prisma.SentimentAnalysisGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisFindFirstArgs, TQueryFnData = Prisma.SentimentAnalysisGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/findFirst`, args, options, fetch);
}

export function useUpdateSentimentAnalysis(options?: Omit<(UseMutationOptions<(SentimentAnalysis | undefined), DefaultError, Prisma.SentimentAnalysisUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisUpdateArgs, DefaultError, SentimentAnalysis, true>('SentimentAnalysis', 'PUT', `${endpoint}/sentimentAnalysis/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySentimentAnalysis(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SentimentAnalysisUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('SentimentAnalysis', 'PUT', `${endpoint}/sentimentAnalysis/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSentimentAnalysis(options?: Omit<(UseMutationOptions<(SentimentAnalysis | undefined), DefaultError, Prisma.SentimentAnalysisUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisUpsertArgs, DefaultError, SentimentAnalysis, true>('SentimentAnalysis', 'POST', `${endpoint}/sentimentAnalysis/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSentimentAnalysis(options?: Omit<(UseMutationOptions<(SentimentAnalysis | undefined), DefaultError, Prisma.SentimentAnalysisDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisDeleteArgs, DefaultError, SentimentAnalysis, true>('SentimentAnalysis', 'DELETE', `${endpoint}/sentimentAnalysis/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SentimentAnalysis, Prisma.SentimentAnalysisGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySentimentAnalysis(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SentimentAnalysisDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SentimentAnalysisDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('SentimentAnalysis', 'DELETE', `${endpoint}/sentimentAnalysis/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SentimentAnalysisDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SentimentAnalysisDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SentimentAnalysisDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisAggregateArgs, TQueryFnData = Prisma.GetSentimentAnalysisAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisAggregateArgs, TQueryFnData = Prisma.GetSentimentAnalysisAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/aggregate`, args, options, fetch);
}

export function useGroupBySentimentAnalysis<TArgs extends Prisma.SentimentAnalysisGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SentimentAnalysisGroupByArgs['orderBy'] } : { orderBy?: Prisma.SentimentAnalysisGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SentimentAnalysisGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SentimentAnalysisGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SentimentAnalysisGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SentimentAnalysisGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SentimentAnalysisGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBySentimentAnalysis<TArgs extends Prisma.SentimentAnalysisGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SentimentAnalysisGroupByArgs['orderBy'] } : { orderBy?: Prisma.SentimentAnalysisGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SentimentAnalysisGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SentimentAnalysisGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SentimentAnalysisGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SentimentAnalysisGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SentimentAnalysisGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/groupBy`, args, options, fetch);
}

export function useCountSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SentimentAnalysisCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/count`, args, options, fetch);
}

export function useSuspenseCountSentimentAnalysis<TArgs extends Prisma.SentimentAnalysisCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SentimentAnalysisCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SentimentAnalysisCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/count`, args, options, fetch);
}
import type { Sentiment, Tone } from '@prisma/client';

export function useCheckSentimentAnalysis<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; sentiment?: Sentiment; tone?: Tone; shouldEscalateToHuman?: boolean; commentId?: string; conversationId?: string; contentId?: string; globalContentId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('SentimentAnalysis', `${endpoint}/sentimentAnalysis/check`, args, options, fetch);
}
