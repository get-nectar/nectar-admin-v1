/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InboxFeedItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInboxFeedItem(options?: Omit<(UseMutationOptions<(InboxFeedItem | undefined), DefaultError, Prisma.InboxFeedItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemCreateArgs, DefaultError, InboxFeedItem, true>('InboxFeedItem', 'POST', `${endpoint}/inboxFeedItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInboxFeedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxFeedItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxFeedItem', 'POST', `${endpoint}/inboxFeedItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findMany`, args, options, fetch);
}

export function useFindUniqueInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindUniqueArgs, TQueryFnData = Prisma.InboxFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindUniqueArgs, TQueryFnData = Prisma.InboxFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findUnique`, args, options, fetch);
}

export function useFindFirstInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindFirstArgs, TQueryFnData = Prisma.InboxFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInboxFeedItem<TArgs extends Prisma.InboxFeedItemFindFirstArgs, TQueryFnData = Prisma.InboxFeedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/findFirst`, args, options, fetch);
}

export function useUpdateInboxFeedItem(options?: Omit<(UseMutationOptions<(InboxFeedItem | undefined), DefaultError, Prisma.InboxFeedItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemUpdateArgs, DefaultError, InboxFeedItem, true>('InboxFeedItem', 'PUT', `${endpoint}/inboxFeedItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInboxFeedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxFeedItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxFeedItem', 'PUT', `${endpoint}/inboxFeedItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInboxFeedItem(options?: Omit<(UseMutationOptions<(InboxFeedItem | undefined), DefaultError, Prisma.InboxFeedItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemUpsertArgs, DefaultError, InboxFeedItem, true>('InboxFeedItem', 'POST', `${endpoint}/inboxFeedItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInboxFeedItem(options?: Omit<(UseMutationOptions<(InboxFeedItem | undefined), DefaultError, Prisma.InboxFeedItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemDeleteArgs, DefaultError, InboxFeedItem, true>('InboxFeedItem', 'DELETE', `${endpoint}/inboxFeedItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedItem, Prisma.InboxFeedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInboxFeedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxFeedItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxFeedItem', 'DELETE', `${endpoint}/inboxFeedItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInboxFeedItem<TArgs extends Prisma.InboxFeedItemAggregateArgs, TQueryFnData = Prisma.GetInboxFeedItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInboxFeedItem<TArgs extends Prisma.InboxFeedItemAggregateArgs, TQueryFnData = Prisma.GetInboxFeedItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/aggregate`, args, options, fetch);
}

export function useGroupByInboxFeedItem<TArgs extends Prisma.InboxFeedItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxFeedItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxFeedItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxFeedItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxFeedItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxFeedItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInboxFeedItem<TArgs extends Prisma.InboxFeedItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxFeedItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxFeedItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxFeedItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxFeedItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxFeedItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/groupBy`, args, options, fetch);
}

export function useCountInboxFeedItem<TArgs extends Prisma.InboxFeedItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxFeedItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/count`, args, options, fetch);
}

export function useSuspenseCountInboxFeedItem<TArgs extends Prisma.InboxFeedItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxFeedItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/count`, args, options, fetch);
}
import type { Platform, InboxItemType, InboxDisplayType, AssignType } from '@prisma/client';

export function useCheckInboxFeedItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; owningAccountId?: string; owningAccountPlatform?: Platform; owningFacebookAccountId?: string; owningTiktokAccountId?: string; itemType?: InboxItemType; displayType?: InboxDisplayType; conversationId?: string; contentId?: string; previewMessage?: string; isAIGeneratingResponse?: boolean; isStarred?: boolean; isDone?: boolean; isAnswered?: boolean; isRead?: boolean; unreadCount?: number; assignType?: AssignType; assigneeId?: string; mostRecentProfileId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InboxFeedItem', `${endpoint}/inboxFeedItem/check`, args, options, fetch);
}
