/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokOrderReturn } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokOrderReturn(options?: Omit<(UseMutationOptions<(TikTokOrderReturn | undefined), DefaultError, Prisma.TikTokOrderReturnCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnCreateArgs, DefaultError, TikTokOrderReturn, true>('TikTokOrderReturn', 'POST', `${endpoint}/tikTokOrderReturn/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokOrderReturn(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderReturnCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrderReturn', 'POST', `${endpoint}/tikTokOrderReturn/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderReturnGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindUniqueArgs, TQueryFnData = Prisma.TikTokOrderReturnGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindUniqueArgs, TQueryFnData = Prisma.TikTokOrderReturnGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindFirstArgs, TQueryFnData = Prisma.TikTokOrderReturnGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnFindFirstArgs, TQueryFnData = Prisma.TikTokOrderReturnGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/findFirst`, args, options, fetch);
}

export function useUpdateTikTokOrderReturn(options?: Omit<(UseMutationOptions<(TikTokOrderReturn | undefined), DefaultError, Prisma.TikTokOrderReturnUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnUpdateArgs, DefaultError, TikTokOrderReturn, true>('TikTokOrderReturn', 'PUT', `${endpoint}/tikTokOrderReturn/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokOrderReturn(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderReturnUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrderReturn', 'PUT', `${endpoint}/tikTokOrderReturn/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokOrderReturn(options?: Omit<(UseMutationOptions<(TikTokOrderReturn | undefined), DefaultError, Prisma.TikTokOrderReturnUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnUpsertArgs, DefaultError, TikTokOrderReturn, true>('TikTokOrderReturn', 'POST', `${endpoint}/tikTokOrderReturn/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokOrderReturn(options?: Omit<(UseMutationOptions<(TikTokOrderReturn | undefined), DefaultError, Prisma.TikTokOrderReturnDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnDeleteArgs, DefaultError, TikTokOrderReturn, true>('TikTokOrderReturn', 'DELETE', `${endpoint}/tikTokOrderReturn/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrderReturn, Prisma.TikTokOrderReturnGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokOrderReturn(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderReturnDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderReturnDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrderReturn', 'DELETE', `${endpoint}/tikTokOrderReturn/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderReturnDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderReturnDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderReturnDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnAggregateArgs, TQueryFnData = Prisma.GetTikTokOrderReturnAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnAggregateArgs, TQueryFnData = Prisma.GetTikTokOrderReturnAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/aggregate`, args, options, fetch);
}

export function useGroupByTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokOrderReturnGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokOrderReturnGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokOrderReturnGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokOrderReturnGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokOrderReturnGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokOrderReturnGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokOrderReturnGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokOrderReturnGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokOrderReturnGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderReturnGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokOrderReturnGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/groupBy`, args, options, fetch);
}

export function useCountTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokOrderReturnCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/count`, args, options, fetch);
}

export function useSuspenseCountTikTokOrderReturn<TArgs extends Prisma.TikTokOrderReturnCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokOrderReturnCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderReturnCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/count`, args, options, fetch);
}
import type { TikTokOrderReturnType, TikTokOrderReturnStatus, TikTokOrderReturnRole, CurrencyCode } from '@prisma/client';

export function useCheckTikTokOrderReturn<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderId?: string; returnId?: string; returnType?: TikTokOrderReturnType; returnStatus?: TikTokOrderReturnStatus; role?: TikTokOrderReturnRole; returnReasonText?: string; returnTrackingNumber?: string; returnProviderName?: string; currency?: CurrencyCode; refundTotal?: string; refundSubtotal?: string; refundShippingFee?: string; refundTax?: string; retailDeliveryFee?: string; buyerServiceFee?: string; partialRefund?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokOrderReturn', `${endpoint}/tikTokOrderReturn/check`, args, options, fetch);
}
