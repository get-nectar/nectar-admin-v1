/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ContentTrigger } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateContentTrigger(options?: Omit<(UseMutationOptions<(ContentTrigger | undefined), DefaultError, Prisma.ContentTriggerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerCreateArgs, DefaultError, ContentTrigger, true>('ContentTrigger', 'POST', `${endpoint}/contentTrigger/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyContentTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentTriggerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentTrigger', 'POST', `${endpoint}/contentTrigger/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyContentTrigger<TArgs extends Prisma.ContentTriggerFindManyArgs, TQueryFnData = Array<Prisma.ContentTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findMany`, args, options, fetch);
}

export function useInfiniteFindManyContentTrigger<TArgs extends Prisma.ContentTriggerFindManyArgs, TQueryFnData = Array<Prisma.ContentTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findMany`, args, options, fetch);
}

export function useSuspenseFindManyContentTrigger<TArgs extends Prisma.ContentTriggerFindManyArgs, TQueryFnData = Array<Prisma.ContentTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyContentTrigger<TArgs extends Prisma.ContentTriggerFindManyArgs, TQueryFnData = Array<Prisma.ContentTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findMany`, args, options, fetch);
}

export function useFindUniqueContentTrigger<TArgs extends Prisma.ContentTriggerFindUniqueArgs, TQueryFnData = Prisma.ContentTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueContentTrigger<TArgs extends Prisma.ContentTriggerFindUniqueArgs, TQueryFnData = Prisma.ContentTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findUnique`, args, options, fetch);
}

export function useFindFirstContentTrigger<TArgs extends Prisma.ContentTriggerFindFirstArgs, TQueryFnData = Prisma.ContentTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstContentTrigger<TArgs extends Prisma.ContentTriggerFindFirstArgs, TQueryFnData = Prisma.ContentTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/findFirst`, args, options, fetch);
}

export function useUpdateContentTrigger(options?: Omit<(UseMutationOptions<(ContentTrigger | undefined), DefaultError, Prisma.ContentTriggerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerUpdateArgs, DefaultError, ContentTrigger, true>('ContentTrigger', 'PUT', `${endpoint}/contentTrigger/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyContentTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentTriggerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentTrigger', 'PUT', `${endpoint}/contentTrigger/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertContentTrigger(options?: Omit<(UseMutationOptions<(ContentTrigger | undefined), DefaultError, Prisma.ContentTriggerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerUpsertArgs, DefaultError, ContentTrigger, true>('ContentTrigger', 'POST', `${endpoint}/contentTrigger/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteContentTrigger(options?: Omit<(UseMutationOptions<(ContentTrigger | undefined), DefaultError, Prisma.ContentTriggerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerDeleteArgs, DefaultError, ContentTrigger, true>('ContentTrigger', 'DELETE', `${endpoint}/contentTrigger/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentTrigger, Prisma.ContentTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyContentTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentTriggerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentTriggerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentTrigger', 'DELETE', `${endpoint}/contentTrigger/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentTriggerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentTriggerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentTriggerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateContentTrigger<TArgs extends Prisma.ContentTriggerAggregateArgs, TQueryFnData = Prisma.GetContentTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateContentTrigger<TArgs extends Prisma.ContentTriggerAggregateArgs, TQueryFnData = Prisma.GetContentTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/aggregate`, args, options, fetch);
}

export function useGroupByContentTrigger<TArgs extends Prisma.ContentTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByContentTrigger<TArgs extends Prisma.ContentTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/groupBy`, args, options, fetch);
}

export function useCountContentTrigger<TArgs extends Prisma.ContentTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/count`, args, options, fetch);
}

export function useSuspenseCountContentTrigger<TArgs extends Prisma.ContentTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentTriggerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentTrigger', `${endpoint}/contentTrigger/count`, args, options, fetch);
}

export function useCheckContentTrigger<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; contentId?: string; instagramTriggerId?: string; facebookTriggerId?: string; inboxRuleInstagramTriggerId?: string; inboxRuleFacebookTriggerId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ContentTrigger', `${endpoint}/contentTrigger/check`, args, options, fetch);
}
