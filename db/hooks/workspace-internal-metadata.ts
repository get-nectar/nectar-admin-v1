/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkspaceInternalMetadata } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<(WorkspaceInternalMetadata | undefined), DefaultError, Prisma.WorkspaceInternalMetadataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataCreateArgs, DefaultError, WorkspaceInternalMetadata, true>('WorkspaceInternalMetadata', 'POST', `${endpoint}/workspaceInternalMetadata/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceInternalMetadataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceInternalMetadata', 'POST', `${endpoint}/workspaceInternalMetadata/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceInternalMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceInternalMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceInternalMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceInternalMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findMany`, args, options, fetch);
}

export function useFindUniqueWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindUniqueArgs, TQueryFnData = Prisma.WorkspaceInternalMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindUniqueArgs, TQueryFnData = Prisma.WorkspaceInternalMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findUnique`, args, options, fetch);
}

export function useFindFirstWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindFirstArgs, TQueryFnData = Prisma.WorkspaceInternalMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataFindFirstArgs, TQueryFnData = Prisma.WorkspaceInternalMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/findFirst`, args, options, fetch);
}

export function useUpdateWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<(WorkspaceInternalMetadata | undefined), DefaultError, Prisma.WorkspaceInternalMetadataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataUpdateArgs, DefaultError, WorkspaceInternalMetadata, true>('WorkspaceInternalMetadata', 'PUT', `${endpoint}/workspaceInternalMetadata/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceInternalMetadataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceInternalMetadata', 'PUT', `${endpoint}/workspaceInternalMetadata/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<(WorkspaceInternalMetadata | undefined), DefaultError, Prisma.WorkspaceInternalMetadataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataUpsertArgs, DefaultError, WorkspaceInternalMetadata, true>('WorkspaceInternalMetadata', 'POST', `${endpoint}/workspaceInternalMetadata/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<(WorkspaceInternalMetadata | undefined), DefaultError, Prisma.WorkspaceInternalMetadataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataDeleteArgs, DefaultError, WorkspaceInternalMetadata, true>('WorkspaceInternalMetadata', 'DELETE', `${endpoint}/workspaceInternalMetadata/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceInternalMetadata, Prisma.WorkspaceInternalMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkspaceInternalMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceInternalMetadataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceInternalMetadataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceInternalMetadata', 'DELETE', `${endpoint}/workspaceInternalMetadata/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceInternalMetadataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceInternalMetadataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataAggregateArgs, TQueryFnData = Prisma.GetWorkspaceInternalMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataAggregateArgs, TQueryFnData = Prisma.GetWorkspaceInternalMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/aggregate`, args, options, fetch);
}

export function useGroupByWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceInternalMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceInternalMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceInternalMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceInternalMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceInternalMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceInternalMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceInternalMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceInternalMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceInternalMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceInternalMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceInternalMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceInternalMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceInternalMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceInternalMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/groupBy`, args, options, fetch);
}

export function useCountWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceInternalMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/count`, args, options, fetch);
}

export function useSuspenseCountWorkspaceInternalMetadata<TArgs extends Prisma.WorkspaceInternalMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceInternalMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceInternalMetadataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/count`, args, options, fetch);
}

export function useCheckWorkspaceInternalMetadata<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkspaceInternalMetadata', `${endpoint}/workspaceInternalMetadata/check`, args, options, fetch);
}
