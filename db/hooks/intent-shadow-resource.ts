/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, IntentShadowResource } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateIntentShadowResource(options?: Omit<(UseMutationOptions<(IntentShadowResource | undefined), DefaultError, Prisma.IntentShadowResourceCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceCreateArgs, DefaultError, IntentShadowResource, true>('IntentShadowResource', 'POST', `${endpoint}/intentShadowResource/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyIntentShadowResource(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.IntentShadowResourceCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('IntentShadowResource', 'POST', `${endpoint}/intentShadowResource/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindManyArgs, TQueryFnData = Array<Prisma.IntentShadowResourceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findMany`, args, options, fetch);
}

export function useInfiniteFindManyIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindManyArgs, TQueryFnData = Array<Prisma.IntentShadowResourceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findMany`, args, options, fetch);
}

export function useSuspenseFindManyIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindManyArgs, TQueryFnData = Array<Prisma.IntentShadowResourceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindManyArgs, TQueryFnData = Array<Prisma.IntentShadowResourceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findMany`, args, options, fetch);
}

export function useFindUniqueIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindUniqueArgs, TQueryFnData = Prisma.IntentShadowResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindUniqueArgs, TQueryFnData = Prisma.IntentShadowResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findUnique`, args, options, fetch);
}

export function useFindFirstIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindFirstArgs, TQueryFnData = Prisma.IntentShadowResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstIntentShadowResource<TArgs extends Prisma.IntentShadowResourceFindFirstArgs, TQueryFnData = Prisma.IntentShadowResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/findFirst`, args, options, fetch);
}

export function useUpdateIntentShadowResource(options?: Omit<(UseMutationOptions<(IntentShadowResource | undefined), DefaultError, Prisma.IntentShadowResourceUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceUpdateArgs, DefaultError, IntentShadowResource, true>('IntentShadowResource', 'PUT', `${endpoint}/intentShadowResource/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyIntentShadowResource(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.IntentShadowResourceUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('IntentShadowResource', 'PUT', `${endpoint}/intentShadowResource/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertIntentShadowResource(options?: Omit<(UseMutationOptions<(IntentShadowResource | undefined), DefaultError, Prisma.IntentShadowResourceUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceUpsertArgs, DefaultError, IntentShadowResource, true>('IntentShadowResource', 'POST', `${endpoint}/intentShadowResource/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteIntentShadowResource(options?: Omit<(UseMutationOptions<(IntentShadowResource | undefined), DefaultError, Prisma.IntentShadowResourceDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceDeleteArgs, DefaultError, IntentShadowResource, true>('IntentShadowResource', 'DELETE', `${endpoint}/intentShadowResource/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentShadowResource, Prisma.IntentShadowResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyIntentShadowResource(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.IntentShadowResourceDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentShadowResourceDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('IntentShadowResource', 'DELETE', `${endpoint}/intentShadowResource/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentShadowResourceDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentShadowResourceDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.IntentShadowResourceDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateIntentShadowResource<TArgs extends Prisma.IntentShadowResourceAggregateArgs, TQueryFnData = Prisma.GetIntentShadowResourceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateIntentShadowResource<TArgs extends Prisma.IntentShadowResourceAggregateArgs, TQueryFnData = Prisma.GetIntentShadowResourceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/aggregate`, args, options, fetch);
}

export function useGroupByIntentShadowResource<TArgs extends Prisma.IntentShadowResourceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.IntentShadowResourceGroupByArgs['orderBy'] } : { orderBy?: Prisma.IntentShadowResourceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.IntentShadowResourceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.IntentShadowResourceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentShadowResourceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentShadowResourceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.IntentShadowResourceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByIntentShadowResource<TArgs extends Prisma.IntentShadowResourceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.IntentShadowResourceGroupByArgs['orderBy'] } : { orderBy?: Prisma.IntentShadowResourceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.IntentShadowResourceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.IntentShadowResourceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentShadowResourceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentShadowResourceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.IntentShadowResourceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/groupBy`, args, options, fetch);
}

export function useCountIntentShadowResource<TArgs extends Prisma.IntentShadowResourceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.IntentShadowResourceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/count`, args, options, fetch);
}

export function useSuspenseCountIntentShadowResource<TArgs extends Prisma.IntentShadowResourceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.IntentShadowResourceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentShadowResourceCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/count`, args, options, fetch);
}
import type { KnowledgeResourceType, UploadStatus } from '@prisma/client';

export function useCheckIntentShadowResource<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; type?: KnowledgeResourceType; status?: UploadStatus; customNotes?: string; knowledgeBaseId?: string; intentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('IntentShadowResource', `${endpoint}/intentShadowResource/check`, args, options, fetch);
}
