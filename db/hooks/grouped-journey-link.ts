/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GroupedJourneyLink } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGroupedJourneyLink(options?: Omit<(UseMutationOptions<(GroupedJourneyLink | undefined), DefaultError, Prisma.GroupedJourneyLinkCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkCreateArgs, DefaultError, GroupedJourneyLink, true>('GroupedJourneyLink', 'POST', `${endpoint}/groupedJourneyLink/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGroupedJourneyLink(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GroupedJourneyLinkCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GroupedJourneyLink', 'POST', `${endpoint}/groupedJourneyLink/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindManyArgs, TQueryFnData = Array<Prisma.GroupedJourneyLinkGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindManyArgs, TQueryFnData = Array<Prisma.GroupedJourneyLinkGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindManyArgs, TQueryFnData = Array<Prisma.GroupedJourneyLinkGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindManyArgs, TQueryFnData = Array<Prisma.GroupedJourneyLinkGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findMany`, args, options, fetch);
}

export function useFindUniqueGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindUniqueArgs, TQueryFnData = Prisma.GroupedJourneyLinkGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindUniqueArgs, TQueryFnData = Prisma.GroupedJourneyLinkGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findUnique`, args, options, fetch);
}

export function useFindFirstGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindFirstArgs, TQueryFnData = Prisma.GroupedJourneyLinkGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkFindFirstArgs, TQueryFnData = Prisma.GroupedJourneyLinkGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/findFirst`, args, options, fetch);
}

export function useUpdateGroupedJourneyLink(options?: Omit<(UseMutationOptions<(GroupedJourneyLink | undefined), DefaultError, Prisma.GroupedJourneyLinkUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkUpdateArgs, DefaultError, GroupedJourneyLink, true>('GroupedJourneyLink', 'PUT', `${endpoint}/groupedJourneyLink/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGroupedJourneyLink(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GroupedJourneyLinkUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GroupedJourneyLink', 'PUT', `${endpoint}/groupedJourneyLink/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGroupedJourneyLink(options?: Omit<(UseMutationOptions<(GroupedJourneyLink | undefined), DefaultError, Prisma.GroupedJourneyLinkUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkUpsertArgs, DefaultError, GroupedJourneyLink, true>('GroupedJourneyLink', 'POST', `${endpoint}/groupedJourneyLink/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGroupedJourneyLink(options?: Omit<(UseMutationOptions<(GroupedJourneyLink | undefined), DefaultError, Prisma.GroupedJourneyLinkDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkDeleteArgs, DefaultError, GroupedJourneyLink, true>('GroupedJourneyLink', 'DELETE', `${endpoint}/groupedJourneyLink/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GroupedJourneyLink, Prisma.GroupedJourneyLinkGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGroupedJourneyLink(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GroupedJourneyLinkDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GroupedJourneyLinkDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GroupedJourneyLink', 'DELETE', `${endpoint}/groupedJourneyLink/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GroupedJourneyLinkDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GroupedJourneyLinkDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkAggregateArgs, TQueryFnData = Prisma.GetGroupedJourneyLinkAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkAggregateArgs, TQueryFnData = Prisma.GetGroupedJourneyLinkAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/aggregate`, args, options, fetch);
}

export function useGroupByGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GroupedJourneyLinkGroupByArgs['orderBy'] } : { orderBy?: Prisma.GroupedJourneyLinkGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GroupedJourneyLinkGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GroupedJourneyLinkGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GroupedJourneyLinkGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GroupedJourneyLinkGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GroupedJourneyLinkGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GroupedJourneyLinkGroupByArgs['orderBy'] } : { orderBy?: Prisma.GroupedJourneyLinkGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GroupedJourneyLinkGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GroupedJourneyLinkGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GroupedJourneyLinkGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GroupedJourneyLinkGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GroupedJourneyLinkGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/groupBy`, args, options, fetch);
}

export function useCountGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GroupedJourneyLinkCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/count`, args, options, fetch);
}

export function useSuspenseCountGroupedJourneyLink<TArgs extends Prisma.GroupedJourneyLinkCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GroupedJourneyLinkCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GroupedJourneyLinkCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckGroupedJourneyLink<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; journeyId?: string; originalUrl?: string; totalClicks?: number; uniqueClicks?: number; totalCheckouts?: number; revenueCurrency?: CurrencyCode; totalCartAdds?: number; totalCheckoutStarts?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GroupedJourneyLink', `${endpoint}/groupedJourneyLink/check`, args, options, fetch);
}
