/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityMemberFacebookRelationData } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookRelationData | undefined), DefaultError, Prisma.CommunityMemberFacebookRelationDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataCreateArgs, DefaultError, CommunityMemberFacebookRelationData, true>('CommunityMemberFacebookRelationData', 'POST', `${endpoint}/communityMemberFacebookRelationData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberFacebookRelationDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberFacebookRelationData', 'POST', `${endpoint}/communityMemberFacebookRelationData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberFacebookRelationDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/findFirst`, args, options, fetch);
}

export function useUpdateCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookRelationData | undefined), DefaultError, Prisma.CommunityMemberFacebookRelationDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataUpdateArgs, DefaultError, CommunityMemberFacebookRelationData, true>('CommunityMemberFacebookRelationData', 'PUT', `${endpoint}/communityMemberFacebookRelationData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberFacebookRelationDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberFacebookRelationData', 'PUT', `${endpoint}/communityMemberFacebookRelationData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookRelationData | undefined), DefaultError, Prisma.CommunityMemberFacebookRelationDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataUpsertArgs, DefaultError, CommunityMemberFacebookRelationData, true>('CommunityMemberFacebookRelationData', 'POST', `${endpoint}/communityMemberFacebookRelationData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<(CommunityMemberFacebookRelationData | undefined), DefaultError, Prisma.CommunityMemberFacebookRelationDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataDeleteArgs, DefaultError, CommunityMemberFacebookRelationData, true>('CommunityMemberFacebookRelationData', 'DELETE', `${endpoint}/communityMemberFacebookRelationData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberFacebookRelationData, Prisma.CommunityMemberFacebookRelationDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityMemberFacebookRelationData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberFacebookRelationDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberFacebookRelationDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberFacebookRelationData', 'DELETE', `${endpoint}/communityMemberFacebookRelationData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberFacebookRelationDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberFacebookRelationDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberFacebookRelationDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberFacebookRelationDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/aggregate`, args, options, fetch);
}

export function useGroupByCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberFacebookRelationDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberFacebookRelationDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberFacebookRelationDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberFacebookRelationDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookRelationDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookRelationDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberFacebookRelationDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberFacebookRelationDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberFacebookRelationDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberFacebookRelationDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberFacebookRelationDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookRelationDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberFacebookRelationDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberFacebookRelationDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/groupBy`, args, options, fetch);
}

export function useCountCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberFacebookRelationDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/count`, args, options, fetch);
}

export function useSuspenseCountCommunityMemberFacebookRelationData<TArgs extends Prisma.CommunityMemberFacebookRelationDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberFacebookRelationDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberFacebookRelationDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/count`, args, options, fetch);
}

export function useCheckCommunityMemberFacebookRelationData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; facebookPageAccountId?: string; scopedPlatformId?: string; commentCount?: number; tagMentionCount?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityMemberFacebookRelationData', `${endpoint}/communityMemberFacebookRelationData/check`, args, options, fetch);
}
