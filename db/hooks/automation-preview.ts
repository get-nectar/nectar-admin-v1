/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AutomationPreview } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAutomationPreview(options?: Omit<(UseMutationOptions<(AutomationPreview | undefined), DefaultError, Prisma.AutomationPreviewCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewCreateArgs, DefaultError, AutomationPreview, true>('AutomationPreview', 'POST', `${endpoint}/automationPreview/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAutomationPreview(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutomationPreviewCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AutomationPreview', 'POST', `${endpoint}/automationPreview/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAutomationPreview<TArgs extends Prisma.AutomationPreviewFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAutomationPreview<TArgs extends Prisma.AutomationPreviewFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAutomationPreview<TArgs extends Prisma.AutomationPreviewFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAutomationPreview<TArgs extends Prisma.AutomationPreviewFindManyArgs, TQueryFnData = Array<Prisma.AutomationPreviewGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findMany`, args, options, fetch);
}

export function useFindUniqueAutomationPreview<TArgs extends Prisma.AutomationPreviewFindUniqueArgs, TQueryFnData = Prisma.AutomationPreviewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAutomationPreview<TArgs extends Prisma.AutomationPreviewFindUniqueArgs, TQueryFnData = Prisma.AutomationPreviewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findUnique`, args, options, fetch);
}

export function useFindFirstAutomationPreview<TArgs extends Prisma.AutomationPreviewFindFirstArgs, TQueryFnData = Prisma.AutomationPreviewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAutomationPreview<TArgs extends Prisma.AutomationPreviewFindFirstArgs, TQueryFnData = Prisma.AutomationPreviewGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/findFirst`, args, options, fetch);
}

export function useUpdateAutomationPreview(options?: Omit<(UseMutationOptions<(AutomationPreview | undefined), DefaultError, Prisma.AutomationPreviewUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewUpdateArgs, DefaultError, AutomationPreview, true>('AutomationPreview', 'PUT', `${endpoint}/automationPreview/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAutomationPreview(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutomationPreviewUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AutomationPreview', 'PUT', `${endpoint}/automationPreview/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAutomationPreview(options?: Omit<(UseMutationOptions<(AutomationPreview | undefined), DefaultError, Prisma.AutomationPreviewUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewUpsertArgs, DefaultError, AutomationPreview, true>('AutomationPreview', 'POST', `${endpoint}/automationPreview/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAutomationPreview(options?: Omit<(UseMutationOptions<(AutomationPreview | undefined), DefaultError, Prisma.AutomationPreviewDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewDeleteArgs, DefaultError, AutomationPreview, true>('AutomationPreview', 'DELETE', `${endpoint}/automationPreview/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutomationPreview, Prisma.AutomationPreviewGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAutomationPreview(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutomationPreviewDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutomationPreviewDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AutomationPreview', 'DELETE', `${endpoint}/automationPreview/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutomationPreviewDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutomationPreviewDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutomationPreviewDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAutomationPreview<TArgs extends Prisma.AutomationPreviewAggregateArgs, TQueryFnData = Prisma.GetAutomationPreviewAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAutomationPreview<TArgs extends Prisma.AutomationPreviewAggregateArgs, TQueryFnData = Prisma.GetAutomationPreviewAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/aggregate`, args, options, fetch);
}

export function useGroupByAutomationPreview<TArgs extends Prisma.AutomationPreviewGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AutomationPreviewGroupByArgs['orderBy'] } : { orderBy?: Prisma.AutomationPreviewGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AutomationPreviewGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AutomationPreviewGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AutomationPreviewGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAutomationPreview<TArgs extends Prisma.AutomationPreviewGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AutomationPreviewGroupByArgs['orderBy'] } : { orderBy?: Prisma.AutomationPreviewGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AutomationPreviewGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AutomationPreviewGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AutomationPreviewGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AutomationPreviewGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/groupBy`, args, options, fetch);
}

export function useCountAutomationPreview<TArgs extends Prisma.AutomationPreviewCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AutomationPreviewCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/count`, args, options, fetch);
}

export function useSuspenseCountAutomationPreview<TArgs extends Prisma.AutomationPreviewCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AutomationPreviewCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutomationPreviewCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutomationPreview', `${endpoint}/automationPreview/count`, args, options, fetch);
}
import type { AutomationPreviewStatus } from '@prisma/client';

export function useCheckAutomationPreview<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; status?: AutomationPreviewStatus; sessionId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AutomationPreview', `${endpoint}/automationPreview/check`, args, options, fetch);
}
