/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InstagramTrigger } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInstagramTrigger(options?: Omit<(UseMutationOptions<(InstagramTrigger | undefined), DefaultError, Prisma.InstagramTriggerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerCreateArgs, DefaultError, InstagramTrigger, true>('InstagramTrigger', 'POST', `${endpoint}/instagramTrigger/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInstagramTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InstagramTriggerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InstagramTrigger', 'POST', `${endpoint}/instagramTrigger/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindManyArgs, TQueryFnData = Array<Prisma.InstagramTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindManyArgs, TQueryFnData = Array<Prisma.InstagramTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindManyArgs, TQueryFnData = Array<Prisma.InstagramTriggerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindManyArgs, TQueryFnData = Array<Prisma.InstagramTriggerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findMany`, args, options, fetch);
}

export function useFindUniqueInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindUniqueArgs, TQueryFnData = Prisma.InstagramTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindUniqueArgs, TQueryFnData = Prisma.InstagramTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findUnique`, args, options, fetch);
}

export function useFindFirstInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindFirstArgs, TQueryFnData = Prisma.InstagramTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInstagramTrigger<TArgs extends Prisma.InstagramTriggerFindFirstArgs, TQueryFnData = Prisma.InstagramTriggerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/findFirst`, args, options, fetch);
}

export function useUpdateInstagramTrigger(options?: Omit<(UseMutationOptions<(InstagramTrigger | undefined), DefaultError, Prisma.InstagramTriggerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerUpdateArgs, DefaultError, InstagramTrigger, true>('InstagramTrigger', 'PUT', `${endpoint}/instagramTrigger/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInstagramTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InstagramTriggerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InstagramTrigger', 'PUT', `${endpoint}/instagramTrigger/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInstagramTrigger(options?: Omit<(UseMutationOptions<(InstagramTrigger | undefined), DefaultError, Prisma.InstagramTriggerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerUpsertArgs, DefaultError, InstagramTrigger, true>('InstagramTrigger', 'POST', `${endpoint}/instagramTrigger/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInstagramTrigger(options?: Omit<(UseMutationOptions<(InstagramTrigger | undefined), DefaultError, Prisma.InstagramTriggerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerDeleteArgs, DefaultError, InstagramTrigger, true>('InstagramTrigger', 'DELETE', `${endpoint}/instagramTrigger/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramTrigger, Prisma.InstagramTriggerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInstagramTrigger(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InstagramTriggerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramTriggerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InstagramTrigger', 'DELETE', `${endpoint}/instagramTrigger/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramTriggerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramTriggerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InstagramTriggerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInstagramTrigger<TArgs extends Prisma.InstagramTriggerAggregateArgs, TQueryFnData = Prisma.GetInstagramTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInstagramTrigger<TArgs extends Prisma.InstagramTriggerAggregateArgs, TQueryFnData = Prisma.GetInstagramTriggerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/aggregate`, args, options, fetch);
}

export function useGroupByInstagramTrigger<TArgs extends Prisma.InstagramTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InstagramTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.InstagramTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InstagramTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InstagramTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InstagramTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInstagramTrigger<TArgs extends Prisma.InstagramTriggerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InstagramTriggerGroupByArgs['orderBy'] } : { orderBy?: Prisma.InstagramTriggerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InstagramTriggerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InstagramTriggerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramTriggerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramTriggerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InstagramTriggerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/groupBy`, args, options, fetch);
}

export function useCountInstagramTrigger<TArgs extends Prisma.InstagramTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InstagramTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/count`, args, options, fetch);
}

export function useSuspenseCountInstagramTrigger<TArgs extends Prisma.InstagramTriggerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InstagramTriggerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramTriggerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/count`, args, options, fetch);
}
import type { TriggerScope, TriggerReplyCondition, InstagramTriggerEvent } from '@prisma/client';

export function useCheckInstagramTrigger<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; scope?: TriggerScope; replyCondition?: TriggerReplyCondition; triggerWords?: string; triggerIntents?: string; isDisabledOnNegativeSentiment?: boolean; additionalConditionsUniqueHash?: string; triggerId?: string; journeyTriggerId?: string; instagramAccountId?: string; event?: InstagramTriggerEvent }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InstagramTrigger', `${endpoint}/instagramTrigger/check`, args, options, fetch);
}
