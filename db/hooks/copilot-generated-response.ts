/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CopilotGeneratedResponse } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponse | undefined), DefaultError, Prisma.CopilotGeneratedResponseCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseCreateArgs, DefaultError, CopilotGeneratedResponse, true>('CopilotGeneratedResponse', 'POST', `${endpoint}/copilotGeneratedResponse/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CopilotGeneratedResponseCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CopilotGeneratedResponse', 'POST', `${endpoint}/copilotGeneratedResponse/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindManyArgs, TQueryFnData = Array<Prisma.CopilotGeneratedResponseGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findMany`, args, options, fetch);
}

export function useFindUniqueCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindUniqueArgs, TQueryFnData = Prisma.CopilotGeneratedResponseGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindUniqueArgs, TQueryFnData = Prisma.CopilotGeneratedResponseGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findUnique`, args, options, fetch);
}

export function useFindFirstCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindFirstArgs, TQueryFnData = Prisma.CopilotGeneratedResponseGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseFindFirstArgs, TQueryFnData = Prisma.CopilotGeneratedResponseGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/findFirst`, args, options, fetch);
}

export function useUpdateCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponse | undefined), DefaultError, Prisma.CopilotGeneratedResponseUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseUpdateArgs, DefaultError, CopilotGeneratedResponse, true>('CopilotGeneratedResponse', 'PUT', `${endpoint}/copilotGeneratedResponse/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CopilotGeneratedResponseUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CopilotGeneratedResponse', 'PUT', `${endpoint}/copilotGeneratedResponse/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponse | undefined), DefaultError, Prisma.CopilotGeneratedResponseUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseUpsertArgs, DefaultError, CopilotGeneratedResponse, true>('CopilotGeneratedResponse', 'POST', `${endpoint}/copilotGeneratedResponse/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<(CopilotGeneratedResponse | undefined), DefaultError, Prisma.CopilotGeneratedResponseDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseDeleteArgs, DefaultError, CopilotGeneratedResponse, true>('CopilotGeneratedResponse', 'DELETE', `${endpoint}/copilotGeneratedResponse/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CopilotGeneratedResponse, Prisma.CopilotGeneratedResponseGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCopilotGeneratedResponse(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CopilotGeneratedResponseDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CopilotGeneratedResponseDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CopilotGeneratedResponse', 'DELETE', `${endpoint}/copilotGeneratedResponse/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CopilotGeneratedResponseDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CopilotGeneratedResponseDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseAggregateArgs, TQueryFnData = Prisma.GetCopilotGeneratedResponseAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseAggregateArgs, TQueryFnData = Prisma.GetCopilotGeneratedResponseAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/aggregate`, args, options, fetch);
}

export function useGroupByCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CopilotGeneratedResponseGroupByArgs['orderBy'] } : { orderBy?: Prisma.CopilotGeneratedResponseGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CopilotGeneratedResponseGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CopilotGeneratedResponseGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CopilotGeneratedResponseGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CopilotGeneratedResponseGroupByArgs['orderBy'] } : { orderBy?: Prisma.CopilotGeneratedResponseGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CopilotGeneratedResponseGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CopilotGeneratedResponseGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CopilotGeneratedResponseGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CopilotGeneratedResponseGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/groupBy`, args, options, fetch);
}

export function useCountCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CopilotGeneratedResponseCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/count`, args, options, fetch);
}

export function useSuspenseCountCopilotGeneratedResponse<TArgs extends Prisma.CopilotGeneratedResponseCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CopilotGeneratedResponseCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CopilotGeneratedResponseCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/count`, args, options, fetch);
}
import type { CopilotResponseTarget, CopilotResponseStatus, CopilotResponseDeliveryMethod } from '@prisma/client';

export function useCheckCopilotGeneratedResponse<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; sessionId?: string; targetedItemId?: string; targetItemType?: CopilotResponseTarget; targetedCommentId?: string; targetedConversationId?: string; automationMetadataId?: string; generatedReply?: string; finalReply?: string; status?: CopilotResponseStatus; shouldReply?: boolean; deliveryMethod?: CopilotResponseDeliveryMethod }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CopilotGeneratedResponse', `${endpoint}/copilotGeneratedResponse/check`, args, options, fetch);
}
