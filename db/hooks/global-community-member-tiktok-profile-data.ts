/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalCommunityMemberTiktokProfileData } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberTiktokProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataCreateArgs, DefaultError, GlobalCommunityMemberTiktokProfileData, true>('GlobalCommunityMemberTiktokProfileData', 'POST', `${endpoint}/globalCommunityMemberTiktokProfileData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMemberTiktokProfileData', 'POST', `${endpoint}/globalCommunityMemberTiktokProfileData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindUniqueArgs, TQueryFnData = Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindUniqueArgs, TQueryFnData = Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindFirstArgs, TQueryFnData = Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataFindFirstArgs, TQueryFnData = Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/findFirst`, args, options, fetch);
}

export function useUpdateGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberTiktokProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataUpdateArgs, DefaultError, GlobalCommunityMemberTiktokProfileData, true>('GlobalCommunityMemberTiktokProfileData', 'PUT', `${endpoint}/globalCommunityMemberTiktokProfileData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMemberTiktokProfileData', 'PUT', `${endpoint}/globalCommunityMemberTiktokProfileData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberTiktokProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataUpsertArgs, DefaultError, GlobalCommunityMemberTiktokProfileData, true>('GlobalCommunityMemberTiktokProfileData', 'POST', `${endpoint}/globalCommunityMemberTiktokProfileData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberTiktokProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataDeleteArgs, DefaultError, GlobalCommunityMemberTiktokProfileData, true>('GlobalCommunityMemberTiktokProfileData', 'DELETE', `${endpoint}/globalCommunityMemberTiktokProfileData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberTiktokProfileData, Prisma.GlobalCommunityMemberTiktokProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalCommunityMemberTiktokProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberTiktokProfileDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberTiktokProfileDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMemberTiktokProfileData', 'DELETE', `${endpoint}/globalCommunityMemberTiktokProfileData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberTiktokProfileDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberTiktokProfileDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataAggregateArgs, TQueryFnData = Prisma.GetGlobalCommunityMemberTiktokProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataAggregateArgs, TQueryFnData = Prisma.GetGlobalCommunityMemberTiktokProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/aggregate`, args, options, fetch);
}

export function useGroupByGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberTiktokProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/groupBy`, args, options, fetch);
}

export function useCountGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalCommunityMemberTiktokProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/count`, args, options, fetch);
}

export function useSuspenseCountGlobalCommunityMemberTiktokProfileData<TArgs extends Prisma.GlobalCommunityMemberTiktokProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalCommunityMemberTiktokProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberTiktokProfileDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/count`, args, options, fetch);
}

export function useCheckGlobalCommunityMemberTiktokProfileData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; tiktokUniversalId?: string; nickName?: string; isVerified?: boolean; biography?: string; followerCount?: number; likeCount?: number; videoCount?: number; profilePictureUri?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalCommunityMemberTiktokProfileData', `${endpoint}/globalCommunityMemberTiktokProfileData/check`, args, options, fetch);
}
