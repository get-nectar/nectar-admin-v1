/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, SuggestedIntent } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateSuggestedIntent(options?: Omit<(UseMutationOptions<(SuggestedIntent | undefined), DefaultError, Prisma.SuggestedIntentCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentCreateArgs, DefaultError, SuggestedIntent, true>('SuggestedIntent', 'POST', `${endpoint}/suggestedIntent/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySuggestedIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SuggestedIntentCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('SuggestedIntent', 'POST', `${endpoint}/suggestedIntent/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySuggestedIntent<TArgs extends Prisma.SuggestedIntentFindManyArgs, TQueryFnData = Array<Prisma.SuggestedIntentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findMany`, args, options, fetch);
}

export function useInfiniteFindManySuggestedIntent<TArgs extends Prisma.SuggestedIntentFindManyArgs, TQueryFnData = Array<Prisma.SuggestedIntentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findMany`, args, options, fetch);
}

export function useSuspenseFindManySuggestedIntent<TArgs extends Prisma.SuggestedIntentFindManyArgs, TQueryFnData = Array<Prisma.SuggestedIntentGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManySuggestedIntent<TArgs extends Prisma.SuggestedIntentFindManyArgs, TQueryFnData = Array<Prisma.SuggestedIntentGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findMany`, args, options, fetch);
}

export function useFindUniqueSuggestedIntent<TArgs extends Prisma.SuggestedIntentFindUniqueArgs, TQueryFnData = Prisma.SuggestedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueSuggestedIntent<TArgs extends Prisma.SuggestedIntentFindUniqueArgs, TQueryFnData = Prisma.SuggestedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findUnique`, args, options, fetch);
}

export function useFindFirstSuggestedIntent<TArgs extends Prisma.SuggestedIntentFindFirstArgs, TQueryFnData = Prisma.SuggestedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstSuggestedIntent<TArgs extends Prisma.SuggestedIntentFindFirstArgs, TQueryFnData = Prisma.SuggestedIntentGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/findFirst`, args, options, fetch);
}

export function useUpdateSuggestedIntent(options?: Omit<(UseMutationOptions<(SuggestedIntent | undefined), DefaultError, Prisma.SuggestedIntentUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentUpdateArgs, DefaultError, SuggestedIntent, true>('SuggestedIntent', 'PUT', `${endpoint}/suggestedIntent/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySuggestedIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SuggestedIntentUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('SuggestedIntent', 'PUT', `${endpoint}/suggestedIntent/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSuggestedIntent(options?: Omit<(UseMutationOptions<(SuggestedIntent | undefined), DefaultError, Prisma.SuggestedIntentUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentUpsertArgs, DefaultError, SuggestedIntent, true>('SuggestedIntent', 'POST', `${endpoint}/suggestedIntent/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSuggestedIntent(options?: Omit<(UseMutationOptions<(SuggestedIntent | undefined), DefaultError, Prisma.SuggestedIntentDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentDeleteArgs, DefaultError, SuggestedIntent, true>('SuggestedIntent', 'DELETE', `${endpoint}/suggestedIntent/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SuggestedIntent, Prisma.SuggestedIntentGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySuggestedIntent(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SuggestedIntentDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SuggestedIntentDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('SuggestedIntent', 'DELETE', `${endpoint}/suggestedIntent/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SuggestedIntentDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SuggestedIntentDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SuggestedIntentDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSuggestedIntent<TArgs extends Prisma.SuggestedIntentAggregateArgs, TQueryFnData = Prisma.GetSuggestedIntentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSuggestedIntent<TArgs extends Prisma.SuggestedIntentAggregateArgs, TQueryFnData = Prisma.GetSuggestedIntentAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/aggregate`, args, options, fetch);
}

export function useGroupBySuggestedIntent<TArgs extends Prisma.SuggestedIntentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SuggestedIntentGroupByArgs['orderBy'] } : { orderBy?: Prisma.SuggestedIntentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SuggestedIntentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SuggestedIntentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SuggestedIntentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SuggestedIntentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SuggestedIntentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBySuggestedIntent<TArgs extends Prisma.SuggestedIntentGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SuggestedIntentGroupByArgs['orderBy'] } : { orderBy?: Prisma.SuggestedIntentGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SuggestedIntentGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SuggestedIntentGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SuggestedIntentGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SuggestedIntentGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SuggestedIntentGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/groupBy`, args, options, fetch);
}

export function useCountSuggestedIntent<TArgs extends Prisma.SuggestedIntentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SuggestedIntentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/count`, args, options, fetch);
}

export function useSuspenseCountSuggestedIntent<TArgs extends Prisma.SuggestedIntentCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SuggestedIntentCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SuggestedIntentCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/count`, args, options, fetch);
}
import type { SuggestedIntentStatus } from '@prisma/client';

export function useCheckSuggestedIntent<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; title?: string; description?: string; icon?: string; examples?: string; categories?: string; status?: SuggestedIntentStatus }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('SuggestedIntent', `${endpoint}/suggestedIntent/check`, args, options, fetch);
}
