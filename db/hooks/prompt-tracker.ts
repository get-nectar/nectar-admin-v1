/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PromptTracker } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePromptTracker(options?: Omit<(UseMutationOptions<(PromptTracker | undefined), DefaultError, Prisma.PromptTrackerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerCreateArgs, DefaultError, PromptTracker, true>('PromptTracker', 'POST', `${endpoint}/promptTracker/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPromptTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromptTrackerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PromptTracker', 'POST', `${endpoint}/promptTracker/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPromptTracker<TArgs extends Prisma.PromptTrackerFindManyArgs, TQueryFnData = Array<Prisma.PromptTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPromptTracker<TArgs extends Prisma.PromptTrackerFindManyArgs, TQueryFnData = Array<Prisma.PromptTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPromptTracker<TArgs extends Prisma.PromptTrackerFindManyArgs, TQueryFnData = Array<Prisma.PromptTrackerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPromptTracker<TArgs extends Prisma.PromptTrackerFindManyArgs, TQueryFnData = Array<Prisma.PromptTrackerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findMany`, args, options, fetch);
}

export function useFindUniquePromptTracker<TArgs extends Prisma.PromptTrackerFindUniqueArgs, TQueryFnData = Prisma.PromptTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePromptTracker<TArgs extends Prisma.PromptTrackerFindUniqueArgs, TQueryFnData = Prisma.PromptTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findUnique`, args, options, fetch);
}

export function useFindFirstPromptTracker<TArgs extends Prisma.PromptTrackerFindFirstArgs, TQueryFnData = Prisma.PromptTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPromptTracker<TArgs extends Prisma.PromptTrackerFindFirstArgs, TQueryFnData = Prisma.PromptTrackerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/findFirst`, args, options, fetch);
}

export function useUpdatePromptTracker(options?: Omit<(UseMutationOptions<(PromptTracker | undefined), DefaultError, Prisma.PromptTrackerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerUpdateArgs, DefaultError, PromptTracker, true>('PromptTracker', 'PUT', `${endpoint}/promptTracker/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPromptTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromptTrackerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PromptTracker', 'PUT', `${endpoint}/promptTracker/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPromptTracker(options?: Omit<(UseMutationOptions<(PromptTracker | undefined), DefaultError, Prisma.PromptTrackerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerUpsertArgs, DefaultError, PromptTracker, true>('PromptTracker', 'POST', `${endpoint}/promptTracker/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePromptTracker(options?: Omit<(UseMutationOptions<(PromptTracker | undefined), DefaultError, Prisma.PromptTrackerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerDeleteArgs, DefaultError, PromptTracker, true>('PromptTracker', 'DELETE', `${endpoint}/promptTracker/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PromptTracker, Prisma.PromptTrackerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPromptTracker(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PromptTrackerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PromptTrackerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PromptTracker', 'DELETE', `${endpoint}/promptTracker/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PromptTrackerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PromptTrackerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PromptTrackerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePromptTracker<TArgs extends Prisma.PromptTrackerAggregateArgs, TQueryFnData = Prisma.GetPromptTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePromptTracker<TArgs extends Prisma.PromptTrackerAggregateArgs, TQueryFnData = Prisma.GetPromptTrackerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/aggregate`, args, options, fetch);
}

export function useGroupByPromptTracker<TArgs extends Prisma.PromptTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PromptTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.PromptTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PromptTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PromptTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PromptTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PromptTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PromptTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPromptTracker<TArgs extends Prisma.PromptTrackerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PromptTrackerGroupByArgs['orderBy'] } : { orderBy?: Prisma.PromptTrackerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PromptTrackerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PromptTrackerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PromptTrackerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PromptTrackerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PromptTrackerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/groupBy`, args, options, fetch);
}

export function useCountPromptTracker<TArgs extends Prisma.PromptTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PromptTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/count`, args, options, fetch);
}

export function useSuspenseCountPromptTracker<TArgs extends Prisma.PromptTrackerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PromptTrackerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PromptTrackerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PromptTracker', `${endpoint}/promptTracker/count`, args, options, fetch);
}

export function useCheckPromptTracker<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; prompt?: string; workspaceId?: string; socialListeningTopicId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PromptTracker', `${endpoint}/promptTracker/check`, args, options, fetch);
}
