/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, SlackUserAccount } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateSlackUserAccount(options?: Omit<(UseMutationOptions<(SlackUserAccount | undefined), DefaultError, Prisma.SlackUserAccountCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountCreateArgs, DefaultError, SlackUserAccount, true>('SlackUserAccount', 'POST', `${endpoint}/slackUserAccount/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySlackUserAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SlackUserAccountCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('SlackUserAccount', 'POST', `${endpoint}/slackUserAccount/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySlackUserAccount<TArgs extends Prisma.SlackUserAccountFindManyArgs, TQueryFnData = Array<Prisma.SlackUserAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findMany`, args, options, fetch);
}

export function useInfiniteFindManySlackUserAccount<TArgs extends Prisma.SlackUserAccountFindManyArgs, TQueryFnData = Array<Prisma.SlackUserAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findMany`, args, options, fetch);
}

export function useSuspenseFindManySlackUserAccount<TArgs extends Prisma.SlackUserAccountFindManyArgs, TQueryFnData = Array<Prisma.SlackUserAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManySlackUserAccount<TArgs extends Prisma.SlackUserAccountFindManyArgs, TQueryFnData = Array<Prisma.SlackUserAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findMany`, args, options, fetch);
}

export function useFindUniqueSlackUserAccount<TArgs extends Prisma.SlackUserAccountFindUniqueArgs, TQueryFnData = Prisma.SlackUserAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueSlackUserAccount<TArgs extends Prisma.SlackUserAccountFindUniqueArgs, TQueryFnData = Prisma.SlackUserAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findUnique`, args, options, fetch);
}

export function useFindFirstSlackUserAccount<TArgs extends Prisma.SlackUserAccountFindFirstArgs, TQueryFnData = Prisma.SlackUserAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstSlackUserAccount<TArgs extends Prisma.SlackUserAccountFindFirstArgs, TQueryFnData = Prisma.SlackUserAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/findFirst`, args, options, fetch);
}

export function useUpdateSlackUserAccount(options?: Omit<(UseMutationOptions<(SlackUserAccount | undefined), DefaultError, Prisma.SlackUserAccountUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountUpdateArgs, DefaultError, SlackUserAccount, true>('SlackUserAccount', 'PUT', `${endpoint}/slackUserAccount/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySlackUserAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SlackUserAccountUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('SlackUserAccount', 'PUT', `${endpoint}/slackUserAccount/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSlackUserAccount(options?: Omit<(UseMutationOptions<(SlackUserAccount | undefined), DefaultError, Prisma.SlackUserAccountUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountUpsertArgs, DefaultError, SlackUserAccount, true>('SlackUserAccount', 'POST', `${endpoint}/slackUserAccount/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSlackUserAccount(options?: Omit<(UseMutationOptions<(SlackUserAccount | undefined), DefaultError, Prisma.SlackUserAccountDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountDeleteArgs, DefaultError, SlackUserAccount, true>('SlackUserAccount', 'DELETE', `${endpoint}/slackUserAccount/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackUserAccount, Prisma.SlackUserAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySlackUserAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SlackUserAccountDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackUserAccountDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('SlackUserAccount', 'DELETE', `${endpoint}/slackUserAccount/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackUserAccountDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackUserAccountDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SlackUserAccountDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSlackUserAccount<TArgs extends Prisma.SlackUserAccountAggregateArgs, TQueryFnData = Prisma.GetSlackUserAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSlackUserAccount<TArgs extends Prisma.SlackUserAccountAggregateArgs, TQueryFnData = Prisma.GetSlackUserAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/aggregate`, args, options, fetch);
}

export function useGroupBySlackUserAccount<TArgs extends Prisma.SlackUserAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SlackUserAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.SlackUserAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SlackUserAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SlackUserAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackUserAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackUserAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SlackUserAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBySlackUserAccount<TArgs extends Prisma.SlackUserAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SlackUserAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.SlackUserAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SlackUserAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SlackUserAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackUserAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackUserAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SlackUserAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/groupBy`, args, options, fetch);
}

export function useCountSlackUserAccount<TArgs extends Prisma.SlackUserAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SlackUserAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/count`, args, options, fetch);
}

export function useSuspenseCountSlackUserAccount<TArgs extends Prisma.SlackUserAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SlackUserAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackUserAccountCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/count`, args, options, fetch);
}

export function useCheckSlackUserAccount<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; isReauthRequired?: boolean; accessToken?: string; refreshToken?: string; scope?: string; slackUserId?: string; dmChannelId?: string; slackWorkspaceId?: string; workspaceUserId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('SlackUserAccount', `${endpoint}/slackUserAccount/check`, args, options, fetch);
}
