/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, IntentCategory } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateIntentCategory(options?: Omit<(UseMutationOptions<(IntentCategory | undefined), DefaultError, Prisma.IntentCategoryCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryCreateArgs, DefaultError, IntentCategory, true>('IntentCategory', 'POST', `${endpoint}/intentCategory/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyIntentCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.IntentCategoryCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('IntentCategory', 'POST', `${endpoint}/intentCategory/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyIntentCategory<TArgs extends Prisma.IntentCategoryFindManyArgs, TQueryFnData = Array<Prisma.IntentCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findMany`, args, options, fetch);
}

export function useInfiniteFindManyIntentCategory<TArgs extends Prisma.IntentCategoryFindManyArgs, TQueryFnData = Array<Prisma.IntentCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findMany`, args, options, fetch);
}

export function useSuspenseFindManyIntentCategory<TArgs extends Prisma.IntentCategoryFindManyArgs, TQueryFnData = Array<Prisma.IntentCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyIntentCategory<TArgs extends Prisma.IntentCategoryFindManyArgs, TQueryFnData = Array<Prisma.IntentCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findMany`, args, options, fetch);
}

export function useFindUniqueIntentCategory<TArgs extends Prisma.IntentCategoryFindUniqueArgs, TQueryFnData = Prisma.IntentCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueIntentCategory<TArgs extends Prisma.IntentCategoryFindUniqueArgs, TQueryFnData = Prisma.IntentCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findUnique`, args, options, fetch);
}

export function useFindFirstIntentCategory<TArgs extends Prisma.IntentCategoryFindFirstArgs, TQueryFnData = Prisma.IntentCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstIntentCategory<TArgs extends Prisma.IntentCategoryFindFirstArgs, TQueryFnData = Prisma.IntentCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/findFirst`, args, options, fetch);
}

export function useUpdateIntentCategory(options?: Omit<(UseMutationOptions<(IntentCategory | undefined), DefaultError, Prisma.IntentCategoryUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryUpdateArgs, DefaultError, IntentCategory, true>('IntentCategory', 'PUT', `${endpoint}/intentCategory/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyIntentCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.IntentCategoryUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('IntentCategory', 'PUT', `${endpoint}/intentCategory/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertIntentCategory(options?: Omit<(UseMutationOptions<(IntentCategory | undefined), DefaultError, Prisma.IntentCategoryUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryUpsertArgs, DefaultError, IntentCategory, true>('IntentCategory', 'POST', `${endpoint}/intentCategory/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteIntentCategory(options?: Omit<(UseMutationOptions<(IntentCategory | undefined), DefaultError, Prisma.IntentCategoryDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryDeleteArgs, DefaultError, IntentCategory, true>('IntentCategory', 'DELETE', `${endpoint}/intentCategory/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, IntentCategory, Prisma.IntentCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyIntentCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.IntentCategoryDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.IntentCategoryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('IntentCategory', 'DELETE', `${endpoint}/intentCategory/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.IntentCategoryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.IntentCategoryDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.IntentCategoryDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateIntentCategory<TArgs extends Prisma.IntentCategoryAggregateArgs, TQueryFnData = Prisma.GetIntentCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateIntentCategory<TArgs extends Prisma.IntentCategoryAggregateArgs, TQueryFnData = Prisma.GetIntentCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/aggregate`, args, options, fetch);
}

export function useGroupByIntentCategory<TArgs extends Prisma.IntentCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.IntentCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.IntentCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.IntentCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.IntentCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.IntentCategoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByIntentCategory<TArgs extends Prisma.IntentCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.IntentCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.IntentCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.IntentCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.IntentCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.IntentCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.IntentCategoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/groupBy`, args, options, fetch);
}

export function useCountIntentCategory<TArgs extends Prisma.IntentCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.IntentCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/count`, args, options, fetch);
}

export function useSuspenseCountIntentCategory<TArgs extends Prisma.IntentCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.IntentCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.IntentCategoryCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('IntentCategory', `${endpoint}/intentCategory/count`, args, options, fetch);
}

export function useCheckIntentCategory<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; title?: string; description?: string; icon?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('IntentCategory', `${endpoint}/intentCategory/check`, args, options, fetch);
}
