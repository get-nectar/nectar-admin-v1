/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalCommunityMember } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalCommunityMember(options?: Omit<(UseMutationOptions<(GlobalCommunityMember | undefined), DefaultError, Prisma.GlobalCommunityMemberCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberCreateArgs, DefaultError, GlobalCommunityMember, true>('GlobalCommunityMember', 'POST', `${endpoint}/globalCommunityMember/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMember', 'POST', `${endpoint}/globalCommunityMember/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindUniqueArgs, TQueryFnData = Prisma.GlobalCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindUniqueArgs, TQueryFnData = Prisma.GlobalCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindFirstArgs, TQueryFnData = Prisma.GlobalCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberFindFirstArgs, TQueryFnData = Prisma.GlobalCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/findFirst`, args, options, fetch);
}

export function useUpdateGlobalCommunityMember(options?: Omit<(UseMutationOptions<(GlobalCommunityMember | undefined), DefaultError, Prisma.GlobalCommunityMemberUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberUpdateArgs, DefaultError, GlobalCommunityMember, true>('GlobalCommunityMember', 'PUT', `${endpoint}/globalCommunityMember/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMember', 'PUT', `${endpoint}/globalCommunityMember/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalCommunityMember(options?: Omit<(UseMutationOptions<(GlobalCommunityMember | undefined), DefaultError, Prisma.GlobalCommunityMemberUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberUpsertArgs, DefaultError, GlobalCommunityMember, true>('GlobalCommunityMember', 'POST', `${endpoint}/globalCommunityMember/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalCommunityMember(options?: Omit<(UseMutationOptions<(GlobalCommunityMember | undefined), DefaultError, Prisma.GlobalCommunityMemberDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberDeleteArgs, DefaultError, GlobalCommunityMember, true>('GlobalCommunityMember', 'DELETE', `${endpoint}/globalCommunityMember/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMember, Prisma.GlobalCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMember', 'DELETE', `${endpoint}/globalCommunityMember/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberAggregateArgs, TQueryFnData = Prisma.GetGlobalCommunityMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberAggregateArgs, TQueryFnData = Prisma.GetGlobalCommunityMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/aggregate`, args, options, fetch);
}

export function useGroupByGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalCommunityMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalCommunityMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalCommunityMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalCommunityMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalCommunityMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalCommunityMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalCommunityMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalCommunityMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalCommunityMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalCommunityMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/groupBy`, args, options, fetch);
}

export function useCountGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalCommunityMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/count`, args, options, fetch);
}

export function useSuspenseCountGlobalCommunityMember<TArgs extends Prisma.GlobalCommunityMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalCommunityMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/count`, args, options, fetch);
}
import type { Platform } from '@prisma/client';

export function useCheckGlobalCommunityMember<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; engagedPlatforms?: Platform; identifier?: string; firstName?: string; lastName?: string; streetAddress?: string; city?: string; state?: string; country?: string; zipCode?: string; phoneNumber?: string; location?: string; profilePictureUri?: string; instagramHandle?: string; tiktokUsername?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalCommunityMember', `${endpoint}/globalCommunityMember/check`, args, options, fetch);
}
