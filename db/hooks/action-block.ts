/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ActionBlock } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateActionBlock(options?: Omit<(UseMutationOptions<(ActionBlock | undefined), DefaultError, Prisma.ActionBlockCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockCreateArgs, DefaultError, ActionBlock, true>('ActionBlock', 'POST', `${endpoint}/actionBlock/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyActionBlock(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ActionBlockCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ActionBlock', 'POST', `${endpoint}/actionBlock/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyActionBlock<TArgs extends Prisma.ActionBlockFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findMany`, args, options, fetch);
}

export function useInfiniteFindManyActionBlock<TArgs extends Prisma.ActionBlockFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findMany`, args, options, fetch);
}

export function useSuspenseFindManyActionBlock<TArgs extends Prisma.ActionBlockFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyActionBlock<TArgs extends Prisma.ActionBlockFindManyArgs, TQueryFnData = Array<Prisma.ActionBlockGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findMany`, args, options, fetch);
}

export function useFindUniqueActionBlock<TArgs extends Prisma.ActionBlockFindUniqueArgs, TQueryFnData = Prisma.ActionBlockGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueActionBlock<TArgs extends Prisma.ActionBlockFindUniqueArgs, TQueryFnData = Prisma.ActionBlockGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findUnique`, args, options, fetch);
}

export function useFindFirstActionBlock<TArgs extends Prisma.ActionBlockFindFirstArgs, TQueryFnData = Prisma.ActionBlockGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstActionBlock<TArgs extends Prisma.ActionBlockFindFirstArgs, TQueryFnData = Prisma.ActionBlockGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/findFirst`, args, options, fetch);
}

export function useUpdateActionBlock(options?: Omit<(UseMutationOptions<(ActionBlock | undefined), DefaultError, Prisma.ActionBlockUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockUpdateArgs, DefaultError, ActionBlock, true>('ActionBlock', 'PUT', `${endpoint}/actionBlock/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyActionBlock(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ActionBlockUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ActionBlock', 'PUT', `${endpoint}/actionBlock/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertActionBlock(options?: Omit<(UseMutationOptions<(ActionBlock | undefined), DefaultError, Prisma.ActionBlockUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockUpsertArgs, DefaultError, ActionBlock, true>('ActionBlock', 'POST', `${endpoint}/actionBlock/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteActionBlock(options?: Omit<(UseMutationOptions<(ActionBlock | undefined), DefaultError, Prisma.ActionBlockDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockDeleteArgs, DefaultError, ActionBlock, true>('ActionBlock', 'DELETE', `${endpoint}/actionBlock/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ActionBlock, Prisma.ActionBlockGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyActionBlock(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ActionBlockDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ActionBlockDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ActionBlock', 'DELETE', `${endpoint}/actionBlock/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ActionBlockDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ActionBlockDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ActionBlockDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateActionBlock<TArgs extends Prisma.ActionBlockAggregateArgs, TQueryFnData = Prisma.GetActionBlockAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateActionBlock<TArgs extends Prisma.ActionBlockAggregateArgs, TQueryFnData = Prisma.GetActionBlockAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ActionBlockAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/aggregate`, args, options, fetch);
}

export function useGroupByActionBlock<TArgs extends Prisma.ActionBlockGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ActionBlockGroupByArgs['orderBy'] } : { orderBy?: Prisma.ActionBlockGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ActionBlockGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ActionBlockGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ActionBlockGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByActionBlock<TArgs extends Prisma.ActionBlockGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ActionBlockGroupByArgs['orderBy'] } : { orderBy?: Prisma.ActionBlockGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ActionBlockGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ActionBlockGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ActionBlockGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ActionBlockGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/groupBy`, args, options, fetch);
}

export function useCountActionBlock<TArgs extends Prisma.ActionBlockCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ActionBlockCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/count`, args, options, fetch);
}

export function useSuspenseCountActionBlock<TArgs extends Prisma.ActionBlockCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ActionBlockCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ActionBlockCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ActionBlock', `${endpoint}/actionBlock/count`, args, options, fetch);
}
import type { ActionBlockType } from '@prisma/client';

export function useCheckActionBlock<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; type?: ActionBlockType; prompt?: string; responseJourneyId?: string; journeyId?: string; inboxRuleId?: string; intentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ActionBlock', `${endpoint}/actionBlock/check`, args, options, fetch);
}
