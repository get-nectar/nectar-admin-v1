/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkspaceUser } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkspaceUser(options?: Omit<(UseMutationOptions<(WorkspaceUser | undefined), DefaultError, Prisma.WorkspaceUserCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserCreateArgs, DefaultError, WorkspaceUser, true>('WorkspaceUser', 'POST', `${endpoint}/workspaceUser/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkspaceUser(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUser', 'POST', `${endpoint}/workspaceUser/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findMany`, args, options, fetch);
}

export function useFindUniqueWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findUnique`, args, options, fetch);
}

export function useFindFirstWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkspaceUser<TArgs extends Prisma.WorkspaceUserFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/findFirst`, args, options, fetch);
}

export function useUpdateWorkspaceUser(options?: Omit<(UseMutationOptions<(WorkspaceUser | undefined), DefaultError, Prisma.WorkspaceUserUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserUpdateArgs, DefaultError, WorkspaceUser, true>('WorkspaceUser', 'PUT', `${endpoint}/workspaceUser/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkspaceUser(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUser', 'PUT', `${endpoint}/workspaceUser/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkspaceUser(options?: Omit<(UseMutationOptions<(WorkspaceUser | undefined), DefaultError, Prisma.WorkspaceUserUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserUpsertArgs, DefaultError, WorkspaceUser, true>('WorkspaceUser', 'POST', `${endpoint}/workspaceUser/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkspaceUser(options?: Omit<(UseMutationOptions<(WorkspaceUser | undefined), DefaultError, Prisma.WorkspaceUserDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserDeleteArgs, DefaultError, WorkspaceUser, true>('WorkspaceUser', 'DELETE', `${endpoint}/workspaceUser/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUser, Prisma.WorkspaceUserGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkspaceUser(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUser', 'DELETE', `${endpoint}/workspaceUser/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkspaceUser<TArgs extends Prisma.WorkspaceUserAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkspaceUser<TArgs extends Prisma.WorkspaceUserAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/aggregate`, args, options, fetch);
}

export function useGroupByWorkspaceUser<TArgs extends Prisma.WorkspaceUserGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkspaceUser<TArgs extends Prisma.WorkspaceUserGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/groupBy`, args, options, fetch);
}

export function useCountWorkspaceUser<TArgs extends Prisma.WorkspaceUserCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/count`, args, options, fetch);
}

export function useSuspenseCountWorkspaceUser<TArgs extends Prisma.WorkspaceUserCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUser', `${endpoint}/workspaceUser/count`, args, options, fetch);
}
import type { WorkspaceRole, WorkspaceUserStatus } from '@prisma/client';

export function useCheckWorkspaceUser<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; userId?: string; activeUserId?: string; role?: WorkspaceRole; status?: WorkspaceUserStatus; accessRoleId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkspaceUser', `${endpoint}/workspaceUser/check`, args, options, fetch);
}
