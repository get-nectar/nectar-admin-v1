/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, LabelAssignmentMetadata } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<(LabelAssignmentMetadata | undefined), DefaultError, Prisma.LabelAssignmentMetadataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataCreateArgs, DefaultError, LabelAssignmentMetadata, true>('LabelAssignmentMetadata', 'POST', `${endpoint}/labelAssignmentMetadata/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabelAssignmentMetadataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('LabelAssignmentMetadata', 'POST', `${endpoint}/labelAssignmentMetadata/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindManyArgs, TQueryFnData = Array<Prisma.LabelAssignmentMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findMany`, args, options, fetch);
}

export function useInfiniteFindManyLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindManyArgs, TQueryFnData = Array<Prisma.LabelAssignmentMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findMany`, args, options, fetch);
}

export function useSuspenseFindManyLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindManyArgs, TQueryFnData = Array<Prisma.LabelAssignmentMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindManyArgs, TQueryFnData = Array<Prisma.LabelAssignmentMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findMany`, args, options, fetch);
}

export function useFindUniqueLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindUniqueArgs, TQueryFnData = Prisma.LabelAssignmentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindUniqueArgs, TQueryFnData = Prisma.LabelAssignmentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findUnique`, args, options, fetch);
}

export function useFindFirstLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindFirstArgs, TQueryFnData = Prisma.LabelAssignmentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataFindFirstArgs, TQueryFnData = Prisma.LabelAssignmentMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/findFirst`, args, options, fetch);
}

export function useUpdateLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<(LabelAssignmentMetadata | undefined), DefaultError, Prisma.LabelAssignmentMetadataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataUpdateArgs, DefaultError, LabelAssignmentMetadata, true>('LabelAssignmentMetadata', 'PUT', `${endpoint}/labelAssignmentMetadata/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabelAssignmentMetadataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('LabelAssignmentMetadata', 'PUT', `${endpoint}/labelAssignmentMetadata/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<(LabelAssignmentMetadata | undefined), DefaultError, Prisma.LabelAssignmentMetadataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataUpsertArgs, DefaultError, LabelAssignmentMetadata, true>('LabelAssignmentMetadata', 'POST', `${endpoint}/labelAssignmentMetadata/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<(LabelAssignmentMetadata | undefined), DefaultError, Prisma.LabelAssignmentMetadataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataDeleteArgs, DefaultError, LabelAssignmentMetadata, true>('LabelAssignmentMetadata', 'DELETE', `${endpoint}/labelAssignmentMetadata/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LabelAssignmentMetadata, Prisma.LabelAssignmentMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyLabelAssignmentMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LabelAssignmentMetadataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LabelAssignmentMetadataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('LabelAssignmentMetadata', 'DELETE', `${endpoint}/labelAssignmentMetadata/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LabelAssignmentMetadataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LabelAssignmentMetadataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataAggregateArgs, TQueryFnData = Prisma.GetLabelAssignmentMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataAggregateArgs, TQueryFnData = Prisma.GetLabelAssignmentMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/aggregate`, args, options, fetch);
}

export function useGroupByLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LabelAssignmentMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.LabelAssignmentMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LabelAssignmentMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.LabelAssignmentMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.LabelAssignmentMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.LabelAssignmentMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LabelAssignmentMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LabelAssignmentMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.LabelAssignmentMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LabelAssignmentMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.LabelAssignmentMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.LabelAssignmentMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.LabelAssignmentMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LabelAssignmentMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/groupBy`, args, options, fetch);
}

export function useCountLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LabelAssignmentMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/count`, args, options, fetch);
}

export function useSuspenseCountLabelAssignmentMetadata<TArgs extends Prisma.LabelAssignmentMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LabelAssignmentMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LabelAssignmentMetadataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/count`, args, options, fetch);
}
import type { LabelAssignmentMethod } from '@prisma/client';

export function useCheckLabelAssignmentMetadata<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; labelId?: string; conversationId?: string; inboxFeedItemId?: string; communityMemberId?: string; limitedCommunityMemberId?: string; contentId?: string; addedBy?: string; lastUpdatedMethod?: LabelAssignmentMethod }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('LabelAssignmentMetadata', `${endpoint}/labelAssignmentMetadata/check`, args, options, fetch);
}
