/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InsightGroup } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInsightGroup(options?: Omit<(UseMutationOptions<(InsightGroup | undefined), DefaultError, Prisma.InsightGroupCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupCreateArgs, DefaultError, InsightGroup, true>('InsightGroup', 'POST', `${endpoint}/insightGroup/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInsightGroup(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InsightGroupCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InsightGroup', 'POST', `${endpoint}/insightGroup/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInsightGroup<TArgs extends Prisma.InsightGroupFindManyArgs, TQueryFnData = Array<Prisma.InsightGroupGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInsightGroup<TArgs extends Prisma.InsightGroupFindManyArgs, TQueryFnData = Array<Prisma.InsightGroupGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInsightGroup<TArgs extends Prisma.InsightGroupFindManyArgs, TQueryFnData = Array<Prisma.InsightGroupGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInsightGroup<TArgs extends Prisma.InsightGroupFindManyArgs, TQueryFnData = Array<Prisma.InsightGroupGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findMany`, args, options, fetch);
}

export function useFindUniqueInsightGroup<TArgs extends Prisma.InsightGroupFindUniqueArgs, TQueryFnData = Prisma.InsightGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInsightGroup<TArgs extends Prisma.InsightGroupFindUniqueArgs, TQueryFnData = Prisma.InsightGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findUnique`, args, options, fetch);
}

export function useFindFirstInsightGroup<TArgs extends Prisma.InsightGroupFindFirstArgs, TQueryFnData = Prisma.InsightGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInsightGroup<TArgs extends Prisma.InsightGroupFindFirstArgs, TQueryFnData = Prisma.InsightGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/findFirst`, args, options, fetch);
}

export function useUpdateInsightGroup(options?: Omit<(UseMutationOptions<(InsightGroup | undefined), DefaultError, Prisma.InsightGroupUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupUpdateArgs, DefaultError, InsightGroup, true>('InsightGroup', 'PUT', `${endpoint}/insightGroup/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInsightGroup(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InsightGroupUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InsightGroup', 'PUT', `${endpoint}/insightGroup/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInsightGroup(options?: Omit<(UseMutationOptions<(InsightGroup | undefined), DefaultError, Prisma.InsightGroupUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupUpsertArgs, DefaultError, InsightGroup, true>('InsightGroup', 'POST', `${endpoint}/insightGroup/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInsightGroup(options?: Omit<(UseMutationOptions<(InsightGroup | undefined), DefaultError, Prisma.InsightGroupDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupDeleteArgs, DefaultError, InsightGroup, true>('InsightGroup', 'DELETE', `${endpoint}/insightGroup/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InsightGroup, Prisma.InsightGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInsightGroup(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InsightGroupDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InsightGroupDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InsightGroup', 'DELETE', `${endpoint}/insightGroup/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InsightGroupDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InsightGroupDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InsightGroupDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInsightGroup<TArgs extends Prisma.InsightGroupAggregateArgs, TQueryFnData = Prisma.GetInsightGroupAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightGroupAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInsightGroup<TArgs extends Prisma.InsightGroupAggregateArgs, TQueryFnData = Prisma.GetInsightGroupAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InsightGroupAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/aggregate`, args, options, fetch);
}

export function useGroupByInsightGroup<TArgs extends Prisma.InsightGroupGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InsightGroupGroupByArgs['orderBy'] } : { orderBy?: Prisma.InsightGroupGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InsightGroupGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InsightGroupGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightGroupGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightGroupGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InsightGroupGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInsightGroup<TArgs extends Prisma.InsightGroupGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InsightGroupGroupByArgs['orderBy'] } : { orderBy?: Prisma.InsightGroupGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InsightGroupGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InsightGroupGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightGroupGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InsightGroupGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InsightGroupGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/groupBy`, args, options, fetch);
}

export function useCountInsightGroup<TArgs extends Prisma.InsightGroupCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InsightGroupCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/count`, args, options, fetch);
}

export function useSuspenseCountInsightGroup<TArgs extends Prisma.InsightGroupCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InsightGroupCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InsightGroupCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InsightGroup', `${endpoint}/insightGroup/count`, args, options, fetch);
}
import type { CommunityInsightBin, Sentiment, InsightGroupStatus } from '@prisma/client';

export function useCheckInsightGroup<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; title?: string; categoryId?: string; bin?: CommunityInsightBin; bins?: CommunityInsightBin; sentiment?: Sentiment; status?: InsightGroupStatus }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InsightGroup', `${endpoint}/insightGroup/check`, args, options, fetch);
}
