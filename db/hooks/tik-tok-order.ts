/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokOrder } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokOrder(options?: Omit<(UseMutationOptions<(TikTokOrder | undefined), DefaultError, Prisma.TikTokOrderCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderCreateArgs, DefaultError, TikTokOrder, true>('TikTokOrder', 'POST', `${endpoint}/tikTokOrder/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokOrder(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrder', 'POST', `${endpoint}/tikTokOrder/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokOrder<TArgs extends Prisma.TikTokOrderFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokOrder<TArgs extends Prisma.TikTokOrderFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokOrder<TArgs extends Prisma.TikTokOrderFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokOrder<TArgs extends Prisma.TikTokOrderFindManyArgs, TQueryFnData = Array<Prisma.TikTokOrderGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokOrder<TArgs extends Prisma.TikTokOrderFindUniqueArgs, TQueryFnData = Prisma.TikTokOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokOrder<TArgs extends Prisma.TikTokOrderFindUniqueArgs, TQueryFnData = Prisma.TikTokOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokOrder<TArgs extends Prisma.TikTokOrderFindFirstArgs, TQueryFnData = Prisma.TikTokOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokOrder<TArgs extends Prisma.TikTokOrderFindFirstArgs, TQueryFnData = Prisma.TikTokOrderGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/findFirst`, args, options, fetch);
}

export function useUpdateTikTokOrder(options?: Omit<(UseMutationOptions<(TikTokOrder | undefined), DefaultError, Prisma.TikTokOrderUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderUpdateArgs, DefaultError, TikTokOrder, true>('TikTokOrder', 'PUT', `${endpoint}/tikTokOrder/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokOrder(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrder', 'PUT', `${endpoint}/tikTokOrder/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokOrder(options?: Omit<(UseMutationOptions<(TikTokOrder | undefined), DefaultError, Prisma.TikTokOrderUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderUpsertArgs, DefaultError, TikTokOrder, true>('TikTokOrder', 'POST', `${endpoint}/tikTokOrder/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokOrder(options?: Omit<(UseMutationOptions<(TikTokOrder | undefined), DefaultError, Prisma.TikTokOrderDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderDeleteArgs, DefaultError, TikTokOrder, true>('TikTokOrder', 'DELETE', `${endpoint}/tikTokOrder/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokOrder, Prisma.TikTokOrderGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokOrder(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokOrderDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokOrderDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokOrder', 'DELETE', `${endpoint}/tikTokOrder/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokOrderDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokOrderDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokOrderDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokOrder<TArgs extends Prisma.TikTokOrderAggregateArgs, TQueryFnData = Prisma.GetTikTokOrderAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokOrder<TArgs extends Prisma.TikTokOrderAggregateArgs, TQueryFnData = Prisma.GetTikTokOrderAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/aggregate`, args, options, fetch);
}

export function useGroupByTikTokOrder<TArgs extends Prisma.TikTokOrderGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokOrderGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokOrderGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokOrderGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokOrderGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokOrderGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokOrder<TArgs extends Prisma.TikTokOrderGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokOrderGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokOrderGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokOrderGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokOrderGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokOrderGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokOrderGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/groupBy`, args, options, fetch);
}

export function useCountTikTokOrder<TArgs extends Prisma.TikTokOrderCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokOrderCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/count`, args, options, fetch);
}

export function useSuspenseCountTikTokOrder<TArgs extends Prisma.TikTokOrderCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokOrderCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokOrderCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokOrder', `${endpoint}/tikTokOrder/count`, args, options, fetch);
}
import type { TikTokOrderStatus } from '@prisma/client';

export function useCheckTikTokOrder<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; tiktokShopId?: string; orderId?: string; displayStatus?: TikTokOrderStatus; trackingNumber?: string; shippingProvider?: string; currency?: string; subTotal?: string; shippingFee?: string; originalTotalProductPrice?: string; originalShippingFee?: string; sellerDiscount?: string; platformDiscount?: string; shippingFeeSellerDiscount?: string; shippingFeePlatformDiscount?: string; tax?: string; shippingFeeTax?: string; productTax?: string; retailDeliveryFee?: string; addressLine1?: string; addressLine2?: string; fullAddress?: string; city?: string; state?: string; country?: string; postalCode?: string; name?: string; buyerId?: string; height?: number; width?: number; url?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokOrder', `${endpoint}/tikTokOrder/check`, args, options, fetch);
}
