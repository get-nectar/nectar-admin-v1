/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, RecentActivity } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateRecentActivity(options?: Omit<(UseMutationOptions<(RecentActivity | undefined), DefaultError, Prisma.RecentActivityCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityCreateArgs, DefaultError, RecentActivity, true>('RecentActivity', 'POST', `${endpoint}/recentActivity/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRecentActivity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RecentActivityCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RecentActivity', 'POST', `${endpoint}/recentActivity/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRecentActivity<TArgs extends Prisma.RecentActivityFindManyArgs, TQueryFnData = Array<Prisma.RecentActivityGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRecentActivity<TArgs extends Prisma.RecentActivityFindManyArgs, TQueryFnData = Array<Prisma.RecentActivityGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findMany`, args, options, fetch);
}

export function useSuspenseFindManyRecentActivity<TArgs extends Prisma.RecentActivityFindManyArgs, TQueryFnData = Array<Prisma.RecentActivityGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyRecentActivity<TArgs extends Prisma.RecentActivityFindManyArgs, TQueryFnData = Array<Prisma.RecentActivityGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findMany`, args, options, fetch);
}

export function useFindUniqueRecentActivity<TArgs extends Prisma.RecentActivityFindUniqueArgs, TQueryFnData = Prisma.RecentActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueRecentActivity<TArgs extends Prisma.RecentActivityFindUniqueArgs, TQueryFnData = Prisma.RecentActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findUnique`, args, options, fetch);
}

export function useFindFirstRecentActivity<TArgs extends Prisma.RecentActivityFindFirstArgs, TQueryFnData = Prisma.RecentActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstRecentActivity<TArgs extends Prisma.RecentActivityFindFirstArgs, TQueryFnData = Prisma.RecentActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/findFirst`, args, options, fetch);
}

export function useUpdateRecentActivity(options?: Omit<(UseMutationOptions<(RecentActivity | undefined), DefaultError, Prisma.RecentActivityUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityUpdateArgs, DefaultError, RecentActivity, true>('RecentActivity', 'PUT', `${endpoint}/recentActivity/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRecentActivity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RecentActivityUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RecentActivity', 'PUT', `${endpoint}/recentActivity/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRecentActivity(options?: Omit<(UseMutationOptions<(RecentActivity | undefined), DefaultError, Prisma.RecentActivityUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityUpsertArgs, DefaultError, RecentActivity, true>('RecentActivity', 'POST', `${endpoint}/recentActivity/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRecentActivity(options?: Omit<(UseMutationOptions<(RecentActivity | undefined), DefaultError, Prisma.RecentActivityDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityDeleteArgs, DefaultError, RecentActivity, true>('RecentActivity', 'DELETE', `${endpoint}/recentActivity/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RecentActivity, Prisma.RecentActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRecentActivity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RecentActivityDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RecentActivityDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RecentActivity', 'DELETE', `${endpoint}/recentActivity/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RecentActivityDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RecentActivityDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RecentActivityDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRecentActivity<TArgs extends Prisma.RecentActivityAggregateArgs, TQueryFnData = Prisma.GetRecentActivityAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RecentActivityAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateRecentActivity<TArgs extends Prisma.RecentActivityAggregateArgs, TQueryFnData = Prisma.GetRecentActivityAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RecentActivityAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/aggregate`, args, options, fetch);
}

export function useGroupByRecentActivity<TArgs extends Prisma.RecentActivityGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RecentActivityGroupByArgs['orderBy'] } : { orderBy?: Prisma.RecentActivityGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RecentActivityGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RecentActivityGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RecentActivityGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RecentActivityGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RecentActivityGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByRecentActivity<TArgs extends Prisma.RecentActivityGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RecentActivityGroupByArgs['orderBy'] } : { orderBy?: Prisma.RecentActivityGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RecentActivityGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RecentActivityGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RecentActivityGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RecentActivityGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RecentActivityGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/groupBy`, args, options, fetch);
}

export function useCountRecentActivity<TArgs extends Prisma.RecentActivityCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RecentActivityCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/count`, args, options, fetch);
}

export function useSuspenseCountRecentActivity<TArgs extends Prisma.RecentActivityCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RecentActivityCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RecentActivityCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RecentActivity', `${endpoint}/recentActivity/count`, args, options, fetch);
}
import type { Platform, ActivityType } from '@prisma/client';

export function useCheckRecentActivity<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; communityMemberId?: string; platform?: Platform; type?: ActivityType; inboxItemId?: string; originContentId?: string; shortcodeUrl?: string; pixelClientId?: string; shortLinkId?: string; shopifyOrderId?: string; shopifyAccountId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RecentActivity', `${endpoint}/recentActivity/check`, args, options, fetch);
}
