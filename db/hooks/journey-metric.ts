/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, JourneyMetric } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateJourneyMetric(options?: Omit<(UseMutationOptions<(JourneyMetric | undefined), DefaultError, Prisma.JourneyMetricCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricCreateArgs, DefaultError, JourneyMetric, true>('JourneyMetric', 'POST', `${endpoint}/journeyMetric/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyJourneyMetric(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyMetricCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyMetric', 'POST', `${endpoint}/journeyMetric/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyJourneyMetric<TArgs extends Prisma.JourneyMetricFindManyArgs, TQueryFnData = Array<Prisma.JourneyMetricGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findMany`, args, options, fetch);
}

export function useInfiniteFindManyJourneyMetric<TArgs extends Prisma.JourneyMetricFindManyArgs, TQueryFnData = Array<Prisma.JourneyMetricGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findMany`, args, options, fetch);
}

export function useSuspenseFindManyJourneyMetric<TArgs extends Prisma.JourneyMetricFindManyArgs, TQueryFnData = Array<Prisma.JourneyMetricGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyJourneyMetric<TArgs extends Prisma.JourneyMetricFindManyArgs, TQueryFnData = Array<Prisma.JourneyMetricGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findMany`, args, options, fetch);
}

export function useFindUniqueJourneyMetric<TArgs extends Prisma.JourneyMetricFindUniqueArgs, TQueryFnData = Prisma.JourneyMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueJourneyMetric<TArgs extends Prisma.JourneyMetricFindUniqueArgs, TQueryFnData = Prisma.JourneyMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findUnique`, args, options, fetch);
}

export function useFindFirstJourneyMetric<TArgs extends Prisma.JourneyMetricFindFirstArgs, TQueryFnData = Prisma.JourneyMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstJourneyMetric<TArgs extends Prisma.JourneyMetricFindFirstArgs, TQueryFnData = Prisma.JourneyMetricGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/findFirst`, args, options, fetch);
}

export function useUpdateJourneyMetric(options?: Omit<(UseMutationOptions<(JourneyMetric | undefined), DefaultError, Prisma.JourneyMetricUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricUpdateArgs, DefaultError, JourneyMetric, true>('JourneyMetric', 'PUT', `${endpoint}/journeyMetric/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyJourneyMetric(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyMetricUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyMetric', 'PUT', `${endpoint}/journeyMetric/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertJourneyMetric(options?: Omit<(UseMutationOptions<(JourneyMetric | undefined), DefaultError, Prisma.JourneyMetricUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricUpsertArgs, DefaultError, JourneyMetric, true>('JourneyMetric', 'POST', `${endpoint}/journeyMetric/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteJourneyMetric(options?: Omit<(UseMutationOptions<(JourneyMetric | undefined), DefaultError, Prisma.JourneyMetricDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricDeleteArgs, DefaultError, JourneyMetric, true>('JourneyMetric', 'DELETE', `${endpoint}/journeyMetric/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneyMetric, Prisma.JourneyMetricGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyJourneyMetric(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneyMetricDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneyMetricDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneyMetric', 'DELETE', `${endpoint}/journeyMetric/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneyMetricDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneyMetricDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneyMetricDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateJourneyMetric<TArgs extends Prisma.JourneyMetricAggregateArgs, TQueryFnData = Prisma.GetJourneyMetricAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateJourneyMetric<TArgs extends Prisma.JourneyMetricAggregateArgs, TQueryFnData = Prisma.GetJourneyMetricAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/aggregate`, args, options, fetch);
}

export function useGroupByJourneyMetric<TArgs extends Prisma.JourneyMetricGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneyMetricGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneyMetricGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneyMetricGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneyMetricGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyMetricGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyMetricGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneyMetricGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByJourneyMetric<TArgs extends Prisma.JourneyMetricGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneyMetricGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneyMetricGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneyMetricGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneyMetricGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyMetricGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneyMetricGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneyMetricGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/groupBy`, args, options, fetch);
}

export function useCountJourneyMetric<TArgs extends Prisma.JourneyMetricCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneyMetricCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/count`, args, options, fetch);
}

export function useSuspenseCountJourneyMetric<TArgs extends Prisma.JourneyMetricCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneyMetricCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneyMetricCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneyMetric', `${endpoint}/journeyMetric/count`, args, options, fetch);
}
import type { JourneyMetricType, MetricAggregationType, MetricDisplayFormat, MetricTimePeriod } from '@prisma/client';

export function useCheckJourneyMetric<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; journeyId?: string; name?: JourneyMetricType; aggregationType?: MetricAggregationType; displayFormat?: MetricDisplayFormat; timePeriod?: MetricTimePeriod }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('JourneyMetric', `${endpoint}/journeyMetric/check`, args, options, fetch);
}
