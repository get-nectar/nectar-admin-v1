/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, HashtagTrackerToAccounts } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<(HashtagTrackerToAccounts | undefined), DefaultError, Prisma.HashtagTrackerToAccountsCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsCreateArgs, DefaultError, HashtagTrackerToAccounts, true>('HashtagTrackerToAccounts', 'POST', `${endpoint}/hashtagTrackerToAccounts/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.HashtagTrackerToAccountsCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('HashtagTrackerToAccounts', 'POST', `${endpoint}/hashtagTrackerToAccounts/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findMany`, args, options, fetch);
}

export function useInfiniteFindManyHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerToAccountsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findMany`, args, options, fetch);
}

export function useSuspenseFindManyHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindManyArgs, TQueryFnData = Array<Prisma.HashtagTrackerToAccountsGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findMany`, args, options, fetch);
}

export function useFindUniqueHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindUniqueArgs, TQueryFnData = Prisma.HashtagTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindUniqueArgs, TQueryFnData = Prisma.HashtagTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findUnique`, args, options, fetch);
}

export function useFindFirstHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindFirstArgs, TQueryFnData = Prisma.HashtagTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsFindFirstArgs, TQueryFnData = Prisma.HashtagTrackerToAccountsGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/findFirst`, args, options, fetch);
}

export function useUpdateHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<(HashtagTrackerToAccounts | undefined), DefaultError, Prisma.HashtagTrackerToAccountsUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsUpdateArgs, DefaultError, HashtagTrackerToAccounts, true>('HashtagTrackerToAccounts', 'PUT', `${endpoint}/hashtagTrackerToAccounts/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.HashtagTrackerToAccountsUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('HashtagTrackerToAccounts', 'PUT', `${endpoint}/hashtagTrackerToAccounts/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<(HashtagTrackerToAccounts | undefined), DefaultError, Prisma.HashtagTrackerToAccountsUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsUpsertArgs, DefaultError, HashtagTrackerToAccounts, true>('HashtagTrackerToAccounts', 'POST', `${endpoint}/hashtagTrackerToAccounts/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<(HashtagTrackerToAccounts | undefined), DefaultError, Prisma.HashtagTrackerToAccountsDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsDeleteArgs, DefaultError, HashtagTrackerToAccounts, true>('HashtagTrackerToAccounts', 'DELETE', `${endpoint}/hashtagTrackerToAccounts/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, HashtagTrackerToAccounts, Prisma.HashtagTrackerToAccountsGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyHashtagTrackerToAccounts(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.HashtagTrackerToAccountsDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.HashtagTrackerToAccountsDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('HashtagTrackerToAccounts', 'DELETE', `${endpoint}/hashtagTrackerToAccounts/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.HashtagTrackerToAccountsDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.HashtagTrackerToAccountsDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsAggregateArgs, TQueryFnData = Prisma.GetHashtagTrackerToAccountsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsAggregateArgs, TQueryFnData = Prisma.GetHashtagTrackerToAccountsAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/aggregate`, args, options, fetch);
}

export function useGroupByHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.HashtagTrackerToAccountsGroupByArgs['orderBy'] } : { orderBy?: Prisma.HashtagTrackerToAccountsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.HashtagTrackerToAccountsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.HashtagTrackerToAccountsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerToAccountsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerToAccountsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.HashtagTrackerToAccountsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.HashtagTrackerToAccountsGroupByArgs['orderBy'] } : { orderBy?: Prisma.HashtagTrackerToAccountsGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.HashtagTrackerToAccountsGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.HashtagTrackerToAccountsGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerToAccountsGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.HashtagTrackerToAccountsGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.HashtagTrackerToAccountsGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/groupBy`, args, options, fetch);
}

export function useCountHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.HashtagTrackerToAccountsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/count`, args, options, fetch);
}

export function useSuspenseCountHashtagTrackerToAccounts<TArgs extends Prisma.HashtagTrackerToAccountsCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.HashtagTrackerToAccountsCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.HashtagTrackerToAccountsCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/count`, args, options, fetch);
}
import type { HashtagTrackerPriority, HashtagTrackingAccountStatus, HashtagTrackerSource } from '@prisma/client';

export function useCheckHashtagTrackerToAccounts<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; hashtagTrackerId?: string; tiktokAccountId?: string; instagramAccountId?: string; priority?: HashtagTrackerPriority; status?: HashtagTrackingAccountStatus; source?: HashtagTrackerSource }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('HashtagTrackerToAccounts', `${endpoint}/hashtagTrackerToAccounts/check`, args, options, fetch);
}
