/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ModerationKeywordsConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateModerationKeywordsConfig(options?: Omit<(UseMutationOptions<(ModerationKeywordsConfig | undefined), DefaultError, Prisma.ModerationKeywordsConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigCreateArgs, DefaultError, ModerationKeywordsConfig, true>('ModerationKeywordsConfig', 'POST', `${endpoint}/moderationKeywordsConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyModerationKeywordsConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationKeywordsConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationKeywordsConfig', 'POST', `${endpoint}/moderationKeywordsConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationKeywordsConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationKeywordsConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationKeywordsConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindManyArgs, TQueryFnData = Array<Prisma.ModerationKeywordsConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findMany`, args, options, fetch);
}

export function useFindUniqueModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindUniqueArgs, TQueryFnData = Prisma.ModerationKeywordsConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindUniqueArgs, TQueryFnData = Prisma.ModerationKeywordsConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findUnique`, args, options, fetch);
}

export function useFindFirstModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindFirstArgs, TQueryFnData = Prisma.ModerationKeywordsConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigFindFirstArgs, TQueryFnData = Prisma.ModerationKeywordsConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/findFirst`, args, options, fetch);
}

export function useUpdateModerationKeywordsConfig(options?: Omit<(UseMutationOptions<(ModerationKeywordsConfig | undefined), DefaultError, Prisma.ModerationKeywordsConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigUpdateArgs, DefaultError, ModerationKeywordsConfig, true>('ModerationKeywordsConfig', 'PUT', `${endpoint}/moderationKeywordsConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyModerationKeywordsConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationKeywordsConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationKeywordsConfig', 'PUT', `${endpoint}/moderationKeywordsConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertModerationKeywordsConfig(options?: Omit<(UseMutationOptions<(ModerationKeywordsConfig | undefined), DefaultError, Prisma.ModerationKeywordsConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigUpsertArgs, DefaultError, ModerationKeywordsConfig, true>('ModerationKeywordsConfig', 'POST', `${endpoint}/moderationKeywordsConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteModerationKeywordsConfig(options?: Omit<(UseMutationOptions<(ModerationKeywordsConfig | undefined), DefaultError, Prisma.ModerationKeywordsConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigDeleteArgs, DefaultError, ModerationKeywordsConfig, true>('ModerationKeywordsConfig', 'DELETE', `${endpoint}/moderationKeywordsConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModerationKeywordsConfig, Prisma.ModerationKeywordsConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyModerationKeywordsConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModerationKeywordsConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModerationKeywordsConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ModerationKeywordsConfig', 'DELETE', `${endpoint}/moderationKeywordsConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModerationKeywordsConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModerationKeywordsConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigAggregateArgs, TQueryFnData = Prisma.GetModerationKeywordsConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigAggregateArgs, TQueryFnData = Prisma.GetModerationKeywordsConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/aggregate`, args, options, fetch);
}

export function useGroupByModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationKeywordsConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationKeywordsConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationKeywordsConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationKeywordsConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationKeywordsConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationKeywordsConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationKeywordsConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModerationKeywordsConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModerationKeywordsConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModerationKeywordsConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModerationKeywordsConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationKeywordsConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModerationKeywordsConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModerationKeywordsConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/groupBy`, args, options, fetch);
}

export function useCountModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationKeywordsConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/count`, args, options, fetch);
}

export function useSuspenseCountModerationKeywordsConfig<TArgs extends Prisma.ModerationKeywordsConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModerationKeywordsConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModerationKeywordsConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/count`, args, options, fetch);
}

export function useCheckModerationKeywordsConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; keywords?: string; isAutomated?: boolean; moderationRuleId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ModerationKeywordsConfig', `${endpoint}/moderationKeywordsConfig/check`, args, options, fetch);
}
