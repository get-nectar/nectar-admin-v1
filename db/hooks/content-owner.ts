/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ContentOwner } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateContentOwner(options?: Omit<(UseMutationOptions<(ContentOwner | undefined), DefaultError, Prisma.ContentOwnerCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerCreateArgs, DefaultError, ContentOwner, true>('ContentOwner', 'POST', `${endpoint}/contentOwner/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyContentOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentOwnerCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentOwner', 'POST', `${endpoint}/contentOwner/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyContentOwner<TArgs extends Prisma.ContentOwnerFindManyArgs, TQueryFnData = Array<Prisma.ContentOwnerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findMany`, args, options, fetch);
}

export function useInfiniteFindManyContentOwner<TArgs extends Prisma.ContentOwnerFindManyArgs, TQueryFnData = Array<Prisma.ContentOwnerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findMany`, args, options, fetch);
}

export function useSuspenseFindManyContentOwner<TArgs extends Prisma.ContentOwnerFindManyArgs, TQueryFnData = Array<Prisma.ContentOwnerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyContentOwner<TArgs extends Prisma.ContentOwnerFindManyArgs, TQueryFnData = Array<Prisma.ContentOwnerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findMany`, args, options, fetch);
}

export function useFindUniqueContentOwner<TArgs extends Prisma.ContentOwnerFindUniqueArgs, TQueryFnData = Prisma.ContentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueContentOwner<TArgs extends Prisma.ContentOwnerFindUniqueArgs, TQueryFnData = Prisma.ContentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findUnique`, args, options, fetch);
}

export function useFindFirstContentOwner<TArgs extends Prisma.ContentOwnerFindFirstArgs, TQueryFnData = Prisma.ContentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstContentOwner<TArgs extends Prisma.ContentOwnerFindFirstArgs, TQueryFnData = Prisma.ContentOwnerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/findFirst`, args, options, fetch);
}

export function useUpdateContentOwner(options?: Omit<(UseMutationOptions<(ContentOwner | undefined), DefaultError, Prisma.ContentOwnerUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerUpdateArgs, DefaultError, ContentOwner, true>('ContentOwner', 'PUT', `${endpoint}/contentOwner/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyContentOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentOwnerUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentOwner', 'PUT', `${endpoint}/contentOwner/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertContentOwner(options?: Omit<(UseMutationOptions<(ContentOwner | undefined), DefaultError, Prisma.ContentOwnerUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerUpsertArgs, DefaultError, ContentOwner, true>('ContentOwner', 'POST', `${endpoint}/contentOwner/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteContentOwner(options?: Omit<(UseMutationOptions<(ContentOwner | undefined), DefaultError, Prisma.ContentOwnerDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerDeleteArgs, DefaultError, ContentOwner, true>('ContentOwner', 'DELETE', `${endpoint}/contentOwner/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ContentOwner, Prisma.ContentOwnerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyContentOwner(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ContentOwnerDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ContentOwnerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ContentOwner', 'DELETE', `${endpoint}/contentOwner/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ContentOwnerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ContentOwnerDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ContentOwnerDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateContentOwner<TArgs extends Prisma.ContentOwnerAggregateArgs, TQueryFnData = Prisma.GetContentOwnerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateContentOwner<TArgs extends Prisma.ContentOwnerAggregateArgs, TQueryFnData = Prisma.GetContentOwnerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/aggregate`, args, options, fetch);
}

export function useGroupByContentOwner<TArgs extends Prisma.ContentOwnerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentOwnerGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentOwnerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentOwnerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentOwnerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentOwnerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentOwnerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentOwnerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByContentOwner<TArgs extends Prisma.ContentOwnerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ContentOwnerGroupByArgs['orderBy'] } : { orderBy?: Prisma.ContentOwnerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ContentOwnerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ContentOwnerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentOwnerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ContentOwnerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ContentOwnerGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/groupBy`, args, options, fetch);
}

export function useCountContentOwner<TArgs extends Prisma.ContentOwnerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentOwnerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/count`, args, options, fetch);
}

export function useSuspenseCountContentOwner<TArgs extends Prisma.ContentOwnerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ContentOwnerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ContentOwnerCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ContentOwner', `${endpoint}/contentOwner/count`, args, options, fetch);
}
import type { Platform } from '@prisma/client';

export function useCheckContentOwner<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; platform?: Platform; instagramAccountId?: string; communityMemberId?: string; limitedCommunityMemberId?: string; facebookAccountId?: string; tiktokAccountId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ContentOwner', `${endpoint}/contentOwner/check`, args, options, fetch);
}
