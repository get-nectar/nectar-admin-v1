/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokShop } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokShop(options?: Omit<(UseMutationOptions<(TikTokShop | undefined), DefaultError, Prisma.TikTokShopCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopCreateArgs, DefaultError, TikTokShop, true>('TikTokShop', 'POST', `${endpoint}/tikTokShop/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokShop(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokShopCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokShop', 'POST', `${endpoint}/tikTokShop/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokShop<TArgs extends Prisma.TikTokShopFindManyArgs, TQueryFnData = Array<Prisma.TikTokShopGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokShop<TArgs extends Prisma.TikTokShopFindManyArgs, TQueryFnData = Array<Prisma.TikTokShopGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokShop<TArgs extends Prisma.TikTokShopFindManyArgs, TQueryFnData = Array<Prisma.TikTokShopGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokShop<TArgs extends Prisma.TikTokShopFindManyArgs, TQueryFnData = Array<Prisma.TikTokShopGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokShop<TArgs extends Prisma.TikTokShopFindUniqueArgs, TQueryFnData = Prisma.TikTokShopGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokShop<TArgs extends Prisma.TikTokShopFindUniqueArgs, TQueryFnData = Prisma.TikTokShopGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokShop<TArgs extends Prisma.TikTokShopFindFirstArgs, TQueryFnData = Prisma.TikTokShopGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokShop<TArgs extends Prisma.TikTokShopFindFirstArgs, TQueryFnData = Prisma.TikTokShopGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/findFirst`, args, options, fetch);
}

export function useUpdateTikTokShop(options?: Omit<(UseMutationOptions<(TikTokShop | undefined), DefaultError, Prisma.TikTokShopUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopUpdateArgs, DefaultError, TikTokShop, true>('TikTokShop', 'PUT', `${endpoint}/tikTokShop/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokShop(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokShopUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokShop', 'PUT', `${endpoint}/tikTokShop/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokShop(options?: Omit<(UseMutationOptions<(TikTokShop | undefined), DefaultError, Prisma.TikTokShopUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopUpsertArgs, DefaultError, TikTokShop, true>('TikTokShop', 'POST', `${endpoint}/tikTokShop/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokShop(options?: Omit<(UseMutationOptions<(TikTokShop | undefined), DefaultError, Prisma.TikTokShopDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopDeleteArgs, DefaultError, TikTokShop, true>('TikTokShop', 'DELETE', `${endpoint}/tikTokShop/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokShop, Prisma.TikTokShopGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokShop(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokShopDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokShopDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokShop', 'DELETE', `${endpoint}/tikTokShop/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokShopDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokShopDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokShopDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokShop<TArgs extends Prisma.TikTokShopAggregateArgs, TQueryFnData = Prisma.GetTikTokShopAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokShopAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokShop<TArgs extends Prisma.TikTokShopAggregateArgs, TQueryFnData = Prisma.GetTikTokShopAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokShopAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/aggregate`, args, options, fetch);
}

export function useGroupByTikTokShop<TArgs extends Prisma.TikTokShopGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokShopGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokShopGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokShopGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokShopGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokShopGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokShopGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokShopGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokShop<TArgs extends Prisma.TikTokShopGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokShopGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokShopGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokShopGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokShopGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokShopGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokShopGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokShopGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/groupBy`, args, options, fetch);
}

export function useCountTikTokShop<TArgs extends Prisma.TikTokShopCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokShopCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/count`, args, options, fetch);
}

export function useSuspenseCountTikTokShop<TArgs extends Prisma.TikTokShopCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokShopCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokShopCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokShop', `${endpoint}/tikTokShop/count`, args, options, fetch);
}
import type { TikTokShopSellerType } from '@prisma/client';

export function useCheckTikTokShop<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; tiktokAccountId?: string; shopId?: string; sellerType?: TikTokShopSellerType; cipher?: string; code?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokShop', `${endpoint}/tikTokShop/check`, args, options, fetch);
}
