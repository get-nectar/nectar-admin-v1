/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, SlackWorkspace } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateSlackWorkspace(options?: Omit<(UseMutationOptions<(SlackWorkspace | undefined), DefaultError, Prisma.SlackWorkspaceCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceCreateArgs, DefaultError, SlackWorkspace, true>('SlackWorkspace', 'POST', `${endpoint}/slackWorkspace/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySlackWorkspace(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SlackWorkspaceCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('SlackWorkspace', 'POST', `${endpoint}/slackWorkspace/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindManyArgs, TQueryFnData = Array<Prisma.SlackWorkspaceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findMany`, args, options, fetch);
}

export function useInfiniteFindManySlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindManyArgs, TQueryFnData = Array<Prisma.SlackWorkspaceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findMany`, args, options, fetch);
}

export function useSuspenseFindManySlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindManyArgs, TQueryFnData = Array<Prisma.SlackWorkspaceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManySlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindManyArgs, TQueryFnData = Array<Prisma.SlackWorkspaceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findMany`, args, options, fetch);
}

export function useFindUniqueSlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindUniqueArgs, TQueryFnData = Prisma.SlackWorkspaceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueSlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindUniqueArgs, TQueryFnData = Prisma.SlackWorkspaceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findUnique`, args, options, fetch);
}

export function useFindFirstSlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindFirstArgs, TQueryFnData = Prisma.SlackWorkspaceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstSlackWorkspace<TArgs extends Prisma.SlackWorkspaceFindFirstArgs, TQueryFnData = Prisma.SlackWorkspaceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/findFirst`, args, options, fetch);
}

export function useUpdateSlackWorkspace(options?: Omit<(UseMutationOptions<(SlackWorkspace | undefined), DefaultError, Prisma.SlackWorkspaceUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceUpdateArgs, DefaultError, SlackWorkspace, true>('SlackWorkspace', 'PUT', `${endpoint}/slackWorkspace/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySlackWorkspace(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SlackWorkspaceUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('SlackWorkspace', 'PUT', `${endpoint}/slackWorkspace/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSlackWorkspace(options?: Omit<(UseMutationOptions<(SlackWorkspace | undefined), DefaultError, Prisma.SlackWorkspaceUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceUpsertArgs, DefaultError, SlackWorkspace, true>('SlackWorkspace', 'POST', `${endpoint}/slackWorkspace/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSlackWorkspace(options?: Omit<(UseMutationOptions<(SlackWorkspace | undefined), DefaultError, Prisma.SlackWorkspaceDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceDeleteArgs, DefaultError, SlackWorkspace, true>('SlackWorkspace', 'DELETE', `${endpoint}/slackWorkspace/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, SlackWorkspace, Prisma.SlackWorkspaceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySlackWorkspace(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SlackWorkspaceDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SlackWorkspaceDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('SlackWorkspace', 'DELETE', `${endpoint}/slackWorkspace/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SlackWorkspaceDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SlackWorkspaceDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SlackWorkspaceDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSlackWorkspace<TArgs extends Prisma.SlackWorkspaceAggregateArgs, TQueryFnData = Prisma.GetSlackWorkspaceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateSlackWorkspace<TArgs extends Prisma.SlackWorkspaceAggregateArgs, TQueryFnData = Prisma.GetSlackWorkspaceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/aggregate`, args, options, fetch);
}

export function useGroupBySlackWorkspace<TArgs extends Prisma.SlackWorkspaceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SlackWorkspaceGroupByArgs['orderBy'] } : { orderBy?: Prisma.SlackWorkspaceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SlackWorkspaceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SlackWorkspaceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackWorkspaceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackWorkspaceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SlackWorkspaceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBySlackWorkspace<TArgs extends Prisma.SlackWorkspaceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SlackWorkspaceGroupByArgs['orderBy'] } : { orderBy?: Prisma.SlackWorkspaceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SlackWorkspaceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SlackWorkspaceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackWorkspaceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SlackWorkspaceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SlackWorkspaceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/groupBy`, args, options, fetch);
}

export function useCountSlackWorkspace<TArgs extends Prisma.SlackWorkspaceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SlackWorkspaceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/count`, args, options, fetch);
}

export function useSuspenseCountSlackWorkspace<TArgs extends Prisma.SlackWorkspaceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SlackWorkspaceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.SlackWorkspaceCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/count`, args, options, fetch);
}

export function useCheckSlackWorkspace<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; isReauthRequired?: boolean; accessToken?: string; refreshToken?: string; scope?: string; teamName?: string; teamId?: string; botUserId?: string; appId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('SlackWorkspace', `${endpoint}/slackWorkspace/check`, args, options, fetch);
}
