/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PersonaChannelSetting } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePersonaChannelSetting(options?: Omit<(UseMutationOptions<(PersonaChannelSetting | undefined), DefaultError, Prisma.PersonaChannelSettingCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingCreateArgs, DefaultError, PersonaChannelSetting, true>('PersonaChannelSetting', 'POST', `${endpoint}/personaChannelSetting/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPersonaChannelSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelSettingCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelSetting', 'POST', `${endpoint}/personaChannelSetting/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findMany`, args, options, fetch);
}

export function useFindUniquePersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindUniqueArgs, TQueryFnData = Prisma.PersonaChannelSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindUniqueArgs, TQueryFnData = Prisma.PersonaChannelSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findUnique`, args, options, fetch);
}

export function useFindFirstPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindFirstArgs, TQueryFnData = Prisma.PersonaChannelSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingFindFirstArgs, TQueryFnData = Prisma.PersonaChannelSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/findFirst`, args, options, fetch);
}

export function useUpdatePersonaChannelSetting(options?: Omit<(UseMutationOptions<(PersonaChannelSetting | undefined), DefaultError, Prisma.PersonaChannelSettingUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingUpdateArgs, DefaultError, PersonaChannelSetting, true>('PersonaChannelSetting', 'PUT', `${endpoint}/personaChannelSetting/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPersonaChannelSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelSettingUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelSetting', 'PUT', `${endpoint}/personaChannelSetting/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPersonaChannelSetting(options?: Omit<(UseMutationOptions<(PersonaChannelSetting | undefined), DefaultError, Prisma.PersonaChannelSettingUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingUpsertArgs, DefaultError, PersonaChannelSetting, true>('PersonaChannelSetting', 'POST', `${endpoint}/personaChannelSetting/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePersonaChannelSetting(options?: Omit<(UseMutationOptions<(PersonaChannelSetting | undefined), DefaultError, Prisma.PersonaChannelSettingDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingDeleteArgs, DefaultError, PersonaChannelSetting, true>('PersonaChannelSetting', 'DELETE', `${endpoint}/personaChannelSetting/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelSetting, Prisma.PersonaChannelSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPersonaChannelSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelSettingDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelSettingDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelSetting', 'DELETE', `${endpoint}/personaChannelSetting/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelSettingDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelSettingDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelSettingDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingAggregateArgs, TQueryFnData = Prisma.GetPersonaChannelSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingAggregateArgs, TQueryFnData = Prisma.GetPersonaChannelSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/aggregate`, args, options, fetch);
}

export function useGroupByPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaChannelSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaChannelSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaChannelSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaChannelSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaChannelSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaChannelSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaChannelSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaChannelSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaChannelSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaChannelSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/groupBy`, args, options, fetch);
}

export function useCountPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaChannelSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/count`, args, options, fetch);
}

export function useSuspenseCountPersonaChannelSetting<TArgs extends Prisma.PersonaChannelSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaChannelSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelSettingCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/count`, args, options, fetch);
}
import type { PersonaChannelBusinessHoursOptions } from '@prisma/client';

export function useCheckPersonaChannelSetting<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; parentConfigId?: string; aiPersonaId?: string; instagramAccountId?: string; facebookPageAccountId?: string; tiktokAccountId?: string; businessHoursOption?: PersonaChannelBusinessHoursOptions }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PersonaChannelSetting', `${endpoint}/personaChannelSetting/check`, args, options, fetch);
}
