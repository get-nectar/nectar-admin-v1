/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PersonaEscalationSetting } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePersonaEscalationSetting(options?: Omit<(UseMutationOptions<(PersonaEscalationSetting | undefined), DefaultError, Prisma.PersonaEscalationSettingCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingCreateArgs, DefaultError, PersonaEscalationSetting, true>('PersonaEscalationSetting', 'POST', `${endpoint}/personaEscalationSetting/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPersonaEscalationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaEscalationSettingCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaEscalationSetting', 'POST', `${endpoint}/personaEscalationSetting/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaEscalationSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindManyArgs, TQueryFnData = Array<Prisma.PersonaEscalationSettingGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findMany`, args, options, fetch);
}

export function useFindUniquePersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindUniqueArgs, TQueryFnData = Prisma.PersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindUniqueArgs, TQueryFnData = Prisma.PersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findUnique`, args, options, fetch);
}

export function useFindFirstPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindFirstArgs, TQueryFnData = Prisma.PersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingFindFirstArgs, TQueryFnData = Prisma.PersonaEscalationSettingGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/findFirst`, args, options, fetch);
}

export function useUpdatePersonaEscalationSetting(options?: Omit<(UseMutationOptions<(PersonaEscalationSetting | undefined), DefaultError, Prisma.PersonaEscalationSettingUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingUpdateArgs, DefaultError, PersonaEscalationSetting, true>('PersonaEscalationSetting', 'PUT', `${endpoint}/personaEscalationSetting/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPersonaEscalationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaEscalationSettingUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaEscalationSetting', 'PUT', `${endpoint}/personaEscalationSetting/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPersonaEscalationSetting(options?: Omit<(UseMutationOptions<(PersonaEscalationSetting | undefined), DefaultError, Prisma.PersonaEscalationSettingUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingUpsertArgs, DefaultError, PersonaEscalationSetting, true>('PersonaEscalationSetting', 'POST', `${endpoint}/personaEscalationSetting/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePersonaEscalationSetting(options?: Omit<(UseMutationOptions<(PersonaEscalationSetting | undefined), DefaultError, Prisma.PersonaEscalationSettingDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingDeleteArgs, DefaultError, PersonaEscalationSetting, true>('PersonaEscalationSetting', 'DELETE', `${endpoint}/personaEscalationSetting/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaEscalationSetting, Prisma.PersonaEscalationSettingGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPersonaEscalationSetting(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaEscalationSettingDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaEscalationSettingDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaEscalationSetting', 'DELETE', `${endpoint}/personaEscalationSetting/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaEscalationSettingDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaEscalationSettingDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingAggregateArgs, TQueryFnData = Prisma.GetPersonaEscalationSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingAggregateArgs, TQueryFnData = Prisma.GetPersonaEscalationSettingAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/aggregate`, args, options, fetch);
}

export function useGroupByPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaEscalationSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaEscalationSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaEscalationSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaEscalationSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaEscalationSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaEscalationSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaEscalationSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaEscalationSettingGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaEscalationSettingGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaEscalationSettingGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaEscalationSettingGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaEscalationSettingGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaEscalationSettingGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaEscalationSettingGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/groupBy`, args, options, fetch);
}

export function useCountPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaEscalationSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/count`, args, options, fetch);
}

export function useSuspenseCountPersonaEscalationSetting<TArgs extends Prisma.PersonaEscalationSettingCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaEscalationSettingCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaEscalationSettingCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/count`, args, options, fetch);
}
import type { PersonaEscalationOption } from '@prisma/client';

export function useCheckPersonaEscalationSetting<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; channelSettingId?: string; escalationOptions?: PersonaEscalationOption; keywords?: string; instructionsEnabled?: boolean; instructions?: string; assigneeId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PersonaEscalationSetting', `${endpoint}/personaEscalationSetting/check`, args, options, fetch);
}
