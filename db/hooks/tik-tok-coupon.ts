/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokCoupon } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokCoupon(options?: Omit<(UseMutationOptions<(TikTokCoupon | undefined), DefaultError, Prisma.TikTokCouponCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponCreateArgs, DefaultError, TikTokCoupon, true>('TikTokCoupon', 'POST', `${endpoint}/tikTokCoupon/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokCoupon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCouponCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCoupon', 'POST', `${endpoint}/tikTokCoupon/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokCoupon<TArgs extends Prisma.TikTokCouponFindManyArgs, TQueryFnData = Array<Prisma.TikTokCouponGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokCoupon<TArgs extends Prisma.TikTokCouponFindManyArgs, TQueryFnData = Array<Prisma.TikTokCouponGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokCoupon<TArgs extends Prisma.TikTokCouponFindManyArgs, TQueryFnData = Array<Prisma.TikTokCouponGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokCoupon<TArgs extends Prisma.TikTokCouponFindManyArgs, TQueryFnData = Array<Prisma.TikTokCouponGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokCoupon<TArgs extends Prisma.TikTokCouponFindUniqueArgs, TQueryFnData = Prisma.TikTokCouponGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokCoupon<TArgs extends Prisma.TikTokCouponFindUniqueArgs, TQueryFnData = Prisma.TikTokCouponGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokCoupon<TArgs extends Prisma.TikTokCouponFindFirstArgs, TQueryFnData = Prisma.TikTokCouponGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokCoupon<TArgs extends Prisma.TikTokCouponFindFirstArgs, TQueryFnData = Prisma.TikTokCouponGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/findFirst`, args, options, fetch);
}

export function useUpdateTikTokCoupon(options?: Omit<(UseMutationOptions<(TikTokCoupon | undefined), DefaultError, Prisma.TikTokCouponUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponUpdateArgs, DefaultError, TikTokCoupon, true>('TikTokCoupon', 'PUT', `${endpoint}/tikTokCoupon/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokCoupon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCouponUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCoupon', 'PUT', `${endpoint}/tikTokCoupon/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokCoupon(options?: Omit<(UseMutationOptions<(TikTokCoupon | undefined), DefaultError, Prisma.TikTokCouponUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponUpsertArgs, DefaultError, TikTokCoupon, true>('TikTokCoupon', 'POST', `${endpoint}/tikTokCoupon/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokCoupon(options?: Omit<(UseMutationOptions<(TikTokCoupon | undefined), DefaultError, Prisma.TikTokCouponDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponDeleteArgs, DefaultError, TikTokCoupon, true>('TikTokCoupon', 'DELETE', `${endpoint}/tikTokCoupon/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCoupon, Prisma.TikTokCouponGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokCoupon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCouponDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCouponDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCoupon', 'DELETE', `${endpoint}/tikTokCoupon/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCouponDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCouponDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCouponDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokCoupon<TArgs extends Prisma.TikTokCouponAggregateArgs, TQueryFnData = Prisma.GetTikTokCouponAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokCoupon<TArgs extends Prisma.TikTokCouponAggregateArgs, TQueryFnData = Prisma.GetTikTokCouponAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/aggregate`, args, options, fetch);
}

export function useGroupByTikTokCoupon<TArgs extends Prisma.TikTokCouponGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokCouponGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokCouponGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokCouponGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokCouponGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCouponGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCouponGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokCouponGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokCoupon<TArgs extends Prisma.TikTokCouponGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokCouponGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokCouponGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokCouponGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokCouponGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCouponGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCouponGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokCouponGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/groupBy`, args, options, fetch);
}

export function useCountTikTokCoupon<TArgs extends Prisma.TikTokCouponCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokCouponCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/count`, args, options, fetch);
}

export function useSuspenseCountTikTokCoupon<TArgs extends Prisma.TikTokCouponCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokCouponCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCouponCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/count`, args, options, fetch);
}
import type { TikTokCouponRedemptionType, TikTokCouponDiscountType, TikTokCouponDisplayType, TikTokCouponStatus, TikTokCouponCreationSource, TikTokTargetBuyerSegment } from '@prisma/client';

export function useCheckTikTokCoupon<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; tiktokShopId?: string; couponId?: string; title?: string; sellerTnc?: string; redemptionType?: TikTokCouponRedemptionType; redemptionRelativeTime?: number; discountType?: TikTokCouponDiscountType; amount?: string; currency?: string; percentage?: string; maxAmount?: string; thresholdAmount?: string; displayType?: TikTokCouponDisplayType; status?: TikTokCouponStatus; creationSource?: TikTokCouponCreationSource; targetBuyerSegment?: TikTokTargetBuyerSegment }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokCoupon', `${endpoint}/tikTokCoupon/check`, args, options, fetch);
}
