/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, FacebookPageAccount } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateFacebookPageAccount(options?: Omit<(UseMutationOptions<(FacebookPageAccount | undefined), DefaultError, Prisma.FacebookPageAccountCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountCreateArgs, DefaultError, FacebookPageAccount, true>('FacebookPageAccount', 'POST', `${endpoint}/facebookPageAccount/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyFacebookPageAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookPageAccountCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookPageAccount', 'POST', `${endpoint}/facebookPageAccount/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindManyArgs, TQueryFnData = Array<Prisma.FacebookPageAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findMany`, args, options, fetch);
}

export function useInfiniteFindManyFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindManyArgs, TQueryFnData = Array<Prisma.FacebookPageAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findMany`, args, options, fetch);
}

export function useSuspenseFindManyFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindManyArgs, TQueryFnData = Array<Prisma.FacebookPageAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindManyArgs, TQueryFnData = Array<Prisma.FacebookPageAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findMany`, args, options, fetch);
}

export function useFindUniqueFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindUniqueArgs, TQueryFnData = Prisma.FacebookPageAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindUniqueArgs, TQueryFnData = Prisma.FacebookPageAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findUnique`, args, options, fetch);
}

export function useFindFirstFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindFirstArgs, TQueryFnData = Prisma.FacebookPageAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountFindFirstArgs, TQueryFnData = Prisma.FacebookPageAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/findFirst`, args, options, fetch);
}

export function useUpdateFacebookPageAccount(options?: Omit<(UseMutationOptions<(FacebookPageAccount | undefined), DefaultError, Prisma.FacebookPageAccountUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountUpdateArgs, DefaultError, FacebookPageAccount, true>('FacebookPageAccount', 'PUT', `${endpoint}/facebookPageAccount/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyFacebookPageAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookPageAccountUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookPageAccount', 'PUT', `${endpoint}/facebookPageAccount/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertFacebookPageAccount(options?: Omit<(UseMutationOptions<(FacebookPageAccount | undefined), DefaultError, Prisma.FacebookPageAccountUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountUpsertArgs, DefaultError, FacebookPageAccount, true>('FacebookPageAccount', 'POST', `${endpoint}/facebookPageAccount/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteFacebookPageAccount(options?: Omit<(UseMutationOptions<(FacebookPageAccount | undefined), DefaultError, Prisma.FacebookPageAccountDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountDeleteArgs, DefaultError, FacebookPageAccount, true>('FacebookPageAccount', 'DELETE', `${endpoint}/facebookPageAccount/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, FacebookPageAccount, Prisma.FacebookPageAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyFacebookPageAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.FacebookPageAccountDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.FacebookPageAccountDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('FacebookPageAccount', 'DELETE', `${endpoint}/facebookPageAccount/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.FacebookPageAccountDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.FacebookPageAccountDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.FacebookPageAccountDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountAggregateArgs, TQueryFnData = Prisma.GetFacebookPageAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountAggregateArgs, TQueryFnData = Prisma.GetFacebookPageAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/aggregate`, args, options, fetch);
}

export function useGroupByFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookPageAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookPageAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookPageAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookPageAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookPageAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookPageAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookPageAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.FacebookPageAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.FacebookPageAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.FacebookPageAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.FacebookPageAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookPageAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.FacebookPageAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.FacebookPageAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/groupBy`, args, options, fetch);
}

export function useCountFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookPageAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/count`, args, options, fetch);
}

export function useSuspenseCountFacebookPageAccount<TArgs extends Prisma.FacebookPageAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.FacebookPageAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.FacebookPageAccountCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/count`, args, options, fetch);
}

export function useCheckFacebookPageAccount<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; isReauthRequired?: boolean; facebookPageId?: string; facebookPageName?: string; facebookAccountId?: string; userAccessToken?: string; pageAccessToken?: string; fullName?: string; profilePictureUri?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('FacebookPageAccount', `${endpoint}/facebookPageAccount/check`, args, options, fetch);
}
