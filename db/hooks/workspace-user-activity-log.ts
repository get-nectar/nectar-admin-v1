/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkspaceUserActivityLog } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<(WorkspaceUserActivityLog | undefined), DefaultError, Prisma.WorkspaceUserActivityLogCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogCreateArgs, DefaultError, WorkspaceUserActivityLog, true>('WorkspaceUserActivityLog', 'POST', `${endpoint}/workspaceUserActivityLog/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserActivityLogCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserActivityLog', 'POST', `${endpoint}/workspaceUserActivityLog/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActivityLogGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActivityLogGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActivityLogGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindManyArgs, TQueryFnData = Array<Prisma.WorkspaceUserActivityLogGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findMany`, args, options, fetch);
}

export function useFindUniqueWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserActivityLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindUniqueArgs, TQueryFnData = Prisma.WorkspaceUserActivityLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findUnique`, args, options, fetch);
}

export function useFindFirstWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserActivityLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogFindFirstArgs, TQueryFnData = Prisma.WorkspaceUserActivityLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/findFirst`, args, options, fetch);
}

export function useUpdateWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<(WorkspaceUserActivityLog | undefined), DefaultError, Prisma.WorkspaceUserActivityLogUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogUpdateArgs, DefaultError, WorkspaceUserActivityLog, true>('WorkspaceUserActivityLog', 'PUT', `${endpoint}/workspaceUserActivityLog/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserActivityLogUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserActivityLog', 'PUT', `${endpoint}/workspaceUserActivityLog/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<(WorkspaceUserActivityLog | undefined), DefaultError, Prisma.WorkspaceUserActivityLogUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogUpsertArgs, DefaultError, WorkspaceUserActivityLog, true>('WorkspaceUserActivityLog', 'POST', `${endpoint}/workspaceUserActivityLog/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<(WorkspaceUserActivityLog | undefined), DefaultError, Prisma.WorkspaceUserActivityLogDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogDeleteArgs, DefaultError, WorkspaceUserActivityLog, true>('WorkspaceUserActivityLog', 'DELETE', `${endpoint}/workspaceUserActivityLog/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkspaceUserActivityLog, Prisma.WorkspaceUserActivityLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkspaceUserActivityLog(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkspaceUserActivityLogDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkspaceUserActivityLogDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkspaceUserActivityLog', 'DELETE', `${endpoint}/workspaceUserActivityLog/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkspaceUserActivityLogDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkspaceUserActivityLogDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserActivityLogAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogAggregateArgs, TQueryFnData = Prisma.GetWorkspaceUserActivityLogAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/aggregate`, args, options, fetch);
}

export function useGroupByWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserActivityLogGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserActivityLogGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserActivityLogGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserActivityLogGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActivityLogGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActivityLogGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserActivityLogGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkspaceUserActivityLogGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkspaceUserActivityLogGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkspaceUserActivityLogGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkspaceUserActivityLogGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActivityLogGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkspaceUserActivityLogGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkspaceUserActivityLogGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/groupBy`, args, options, fetch);
}

export function useCountWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserActivityLogCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/count`, args, options, fetch);
}

export function useSuspenseCountWorkspaceUserActivityLog<TArgs extends Prisma.WorkspaceUserActivityLogCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkspaceUserActivityLogCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkspaceUserActivityLogCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/count`, args, options, fetch);
}
import type { WorkspaceUserActivityLogAction } from '@prisma/client';

export function useCheckWorkspaceUserActivityLog<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceUserId?: string; action?: WorkspaceUserActivityLogAction; pagePathname?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkspaceUserActivityLog', `${endpoint}/workspaceUserActivityLog/check`, args, options, fetch);
}
