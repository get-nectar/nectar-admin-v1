/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ShopifyAbandonedCheckoutLineItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckoutLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemCreateArgs, DefaultError, ShopifyAbandonedCheckoutLineItem, true>('ShopifyAbandonedCheckoutLineItem', 'POST', `${endpoint}/shopifyAbandonedCheckoutLineItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCheckoutLineItem', 'POST', `${endpoint}/shopifyAbandonedCheckoutLineItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs, TQueryFnData = Array<Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findMany`, args, options, fetch);
}

export function useFindUniqueShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindUniqueArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findUnique`, args, options, fetch);
}

export function useFindFirstShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemFindFirstArgs, TQueryFnData = Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/findFirst`, args, options, fetch);
}

export function useUpdateShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckoutLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemUpdateArgs, DefaultError, ShopifyAbandonedCheckoutLineItem, true>('ShopifyAbandonedCheckoutLineItem', 'PUT', `${endpoint}/shopifyAbandonedCheckoutLineItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCheckoutLineItem', 'PUT', `${endpoint}/shopifyAbandonedCheckoutLineItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckoutLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemUpsertArgs, DefaultError, ShopifyAbandonedCheckoutLineItem, true>('ShopifyAbandonedCheckoutLineItem', 'POST', `${endpoint}/shopifyAbandonedCheckoutLineItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<(ShopifyAbandonedCheckoutLineItem | undefined), DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemDeleteArgs, DefaultError, ShopifyAbandonedCheckoutLineItem, true>('ShopifyAbandonedCheckoutLineItem', 'DELETE', `${endpoint}/shopifyAbandonedCheckoutLineItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ShopifyAbandonedCheckoutLineItem, Prisma.ShopifyAbandonedCheckoutLineItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyShopifyAbandonedCheckoutLineItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ShopifyAbandonedCheckoutLineItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ShopifyAbandonedCheckoutLineItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ShopifyAbandonedCheckoutLineItem', 'DELETE', `${endpoint}/shopifyAbandonedCheckoutLineItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ShopifyAbandonedCheckoutLineItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ShopifyAbandonedCheckoutLineItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCheckoutLineItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemAggregateArgs, TQueryFnData = Prisma.GetShopifyAbandonedCheckoutLineItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/aggregate`, args, options, fetch);
}

export function useGroupByShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ShopifyAbandonedCheckoutLineItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/groupBy`, args, options, fetch);
}

export function useCountShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCheckoutLineItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/count`, args, options, fetch);
}

export function useSuspenseCountShopifyAbandonedCheckoutLineItem<TArgs extends Prisma.ShopifyAbandonedCheckoutLineItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ShopifyAbandonedCheckoutLineItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ShopifyAbandonedCheckoutLineItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/count`, args, options, fetch);
}
import type { CurrencyCode } from '@prisma/client';

export function useCheckShopifyAbandonedCheckoutLineItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; checkoutId?: string; productId?: string; title?: string; quantity?: number; price?: string; currency?: CurrencyCode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ShopifyAbandonedCheckoutLineItem', `${endpoint}/shopifyAbandonedCheckoutLineItem/check`, args, options, fetch);
}
