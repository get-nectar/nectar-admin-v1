/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ConversationEventActivity } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateConversationEventActivity(options?: Omit<(UseMutationOptions<(ConversationEventActivity | undefined), DefaultError, Prisma.ConversationEventActivityCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityCreateArgs, DefaultError, ConversationEventActivity, true>('ConversationEventActivity', 'POST', `${endpoint}/conversationEventActivity/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyConversationEventActivity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationEventActivityCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationEventActivity', 'POST', `${endpoint}/conversationEventActivity/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindManyArgs, TQueryFnData = Array<Prisma.ConversationEventActivityGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findMany`, args, options, fetch);
}

export function useInfiniteFindManyConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindManyArgs, TQueryFnData = Array<Prisma.ConversationEventActivityGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findMany`, args, options, fetch);
}

export function useSuspenseFindManyConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindManyArgs, TQueryFnData = Array<Prisma.ConversationEventActivityGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindManyArgs, TQueryFnData = Array<Prisma.ConversationEventActivityGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findMany`, args, options, fetch);
}

export function useFindUniqueConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindUniqueArgs, TQueryFnData = Prisma.ConversationEventActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindUniqueArgs, TQueryFnData = Prisma.ConversationEventActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findUnique`, args, options, fetch);
}

export function useFindFirstConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindFirstArgs, TQueryFnData = Prisma.ConversationEventActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstConversationEventActivity<TArgs extends Prisma.ConversationEventActivityFindFirstArgs, TQueryFnData = Prisma.ConversationEventActivityGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/findFirst`, args, options, fetch);
}

export function useUpdateConversationEventActivity(options?: Omit<(UseMutationOptions<(ConversationEventActivity | undefined), DefaultError, Prisma.ConversationEventActivityUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityUpdateArgs, DefaultError, ConversationEventActivity, true>('ConversationEventActivity', 'PUT', `${endpoint}/conversationEventActivity/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyConversationEventActivity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationEventActivityUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationEventActivity', 'PUT', `${endpoint}/conversationEventActivity/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertConversationEventActivity(options?: Omit<(UseMutationOptions<(ConversationEventActivity | undefined), DefaultError, Prisma.ConversationEventActivityUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityUpsertArgs, DefaultError, ConversationEventActivity, true>('ConversationEventActivity', 'POST', `${endpoint}/conversationEventActivity/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteConversationEventActivity(options?: Omit<(UseMutationOptions<(ConversationEventActivity | undefined), DefaultError, Prisma.ConversationEventActivityDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityDeleteArgs, DefaultError, ConversationEventActivity, true>('ConversationEventActivity', 'DELETE', `${endpoint}/conversationEventActivity/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ConversationEventActivity, Prisma.ConversationEventActivityGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyConversationEventActivity(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ConversationEventActivityDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ConversationEventActivityDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ConversationEventActivity', 'DELETE', `${endpoint}/conversationEventActivity/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ConversationEventActivityDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ConversationEventActivityDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ConversationEventActivityDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateConversationEventActivity<TArgs extends Prisma.ConversationEventActivityAggregateArgs, TQueryFnData = Prisma.GetConversationEventActivityAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateConversationEventActivity<TArgs extends Prisma.ConversationEventActivityAggregateArgs, TQueryFnData = Prisma.GetConversationEventActivityAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/aggregate`, args, options, fetch);
}

export function useGroupByConversationEventActivity<TArgs extends Prisma.ConversationEventActivityGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationEventActivityGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationEventActivityGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationEventActivityGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationEventActivityGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationEventActivityGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationEventActivityGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationEventActivityGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByConversationEventActivity<TArgs extends Prisma.ConversationEventActivityGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ConversationEventActivityGroupByArgs['orderBy'] } : { orderBy?: Prisma.ConversationEventActivityGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ConversationEventActivityGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ConversationEventActivityGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationEventActivityGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ConversationEventActivityGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ConversationEventActivityGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/groupBy`, args, options, fetch);
}

export function useCountConversationEventActivity<TArgs extends Prisma.ConversationEventActivityCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationEventActivityCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/count`, args, options, fetch);
}

export function useSuspenseCountConversationEventActivity<TArgs extends Prisma.ConversationEventActivityCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ConversationEventActivityCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ConversationEventActivityCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/count`, args, options, fetch);
}
import type { ConversationEventActivityType } from '@prisma/client';

export function useCheckConversationEventActivity<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; activityType?: ConversationEventActivityType; notificationMessage?: string; conversationId?: string; primaryParticipantId?: string; secondaryParticipantId?: string; aiPersonaId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ConversationEventActivity', `${endpoint}/conversationEventActivity/check`, args, options, fetch);
}
