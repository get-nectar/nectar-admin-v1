/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ModeratedItem } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateModeratedItem(options?: Omit<(UseMutationOptions<(ModeratedItem | undefined), DefaultError, Prisma.ModeratedItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemCreateArgs, DefaultError, ModeratedItem, true>('ModeratedItem', 'POST', `${endpoint}/moderatedItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyModeratedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModeratedItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModeratedItem', 'POST', `${endpoint}/moderatedItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyModeratedItem<TArgs extends Prisma.ModeratedItemFindManyArgs, TQueryFnData = Array<Prisma.ModeratedItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyModeratedItem<TArgs extends Prisma.ModeratedItemFindManyArgs, TQueryFnData = Array<Prisma.ModeratedItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyModeratedItem<TArgs extends Prisma.ModeratedItemFindManyArgs, TQueryFnData = Array<Prisma.ModeratedItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyModeratedItem<TArgs extends Prisma.ModeratedItemFindManyArgs, TQueryFnData = Array<Prisma.ModeratedItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findMany`, args, options, fetch);
}

export function useFindUniqueModeratedItem<TArgs extends Prisma.ModeratedItemFindUniqueArgs, TQueryFnData = Prisma.ModeratedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueModeratedItem<TArgs extends Prisma.ModeratedItemFindUniqueArgs, TQueryFnData = Prisma.ModeratedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findUnique`, args, options, fetch);
}

export function useFindFirstModeratedItem<TArgs extends Prisma.ModeratedItemFindFirstArgs, TQueryFnData = Prisma.ModeratedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstModeratedItem<TArgs extends Prisma.ModeratedItemFindFirstArgs, TQueryFnData = Prisma.ModeratedItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/findFirst`, args, options, fetch);
}

export function useUpdateModeratedItem(options?: Omit<(UseMutationOptions<(ModeratedItem | undefined), DefaultError, Prisma.ModeratedItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemUpdateArgs, DefaultError, ModeratedItem, true>('ModeratedItem', 'PUT', `${endpoint}/moderatedItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyModeratedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModeratedItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ModeratedItem', 'PUT', `${endpoint}/moderatedItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertModeratedItem(options?: Omit<(UseMutationOptions<(ModeratedItem | undefined), DefaultError, Prisma.ModeratedItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemUpsertArgs, DefaultError, ModeratedItem, true>('ModeratedItem', 'POST', `${endpoint}/moderatedItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteModeratedItem(options?: Omit<(UseMutationOptions<(ModeratedItem | undefined), DefaultError, Prisma.ModeratedItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemDeleteArgs, DefaultError, ModeratedItem, true>('ModeratedItem', 'DELETE', `${endpoint}/moderatedItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ModeratedItem, Prisma.ModeratedItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyModeratedItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ModeratedItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ModeratedItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ModeratedItem', 'DELETE', `${endpoint}/moderatedItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ModeratedItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ModeratedItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ModeratedItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateModeratedItem<TArgs extends Prisma.ModeratedItemAggregateArgs, TQueryFnData = Prisma.GetModeratedItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateModeratedItem<TArgs extends Prisma.ModeratedItemAggregateArgs, TQueryFnData = Prisma.GetModeratedItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/aggregate`, args, options, fetch);
}

export function useGroupByModeratedItem<TArgs extends Prisma.ModeratedItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModeratedItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModeratedItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModeratedItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModeratedItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModeratedItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModeratedItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModeratedItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByModeratedItem<TArgs extends Prisma.ModeratedItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ModeratedItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.ModeratedItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ModeratedItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ModeratedItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ModeratedItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ModeratedItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ModeratedItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/groupBy`, args, options, fetch);
}

export function useCountModeratedItem<TArgs extends Prisma.ModeratedItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModeratedItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/count`, args, options, fetch);
}

export function useSuspenseCountModeratedItem<TArgs extends Prisma.ModeratedItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ModeratedItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ModeratedItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ModeratedItem', `${endpoint}/moderatedItem/count`, args, options, fetch);
}
import type { ModeratedItemType, ModeratedItemVisibility, ModerationFlagType } from '@prisma/client';

export function useCheckModeratedItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; type?: ModeratedItemType; visibility?: ModeratedItemVisibility; isHidden?: boolean; isCreatedManually?: boolean; commentId?: string; communityMemberId?: string; limitedCommunityMemberId?: string; conversationId?: string; workspaceId?: string; matchedFlags?: ModerationFlagType; matchedKeywords?: string; matchedIntents?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ModeratedItem', `${endpoint}/moderatedItem/check`, args, options, fetch);
}
