/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, WorkingHours } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateWorkingHours(options?: Omit<(UseMutationOptions<(WorkingHours | undefined), DefaultError, Prisma.WorkingHoursCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursCreateArgs, DefaultError, WorkingHours, true>('WorkingHours', 'POST', `${endpoint}/workingHours/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyWorkingHours(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkingHoursCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkingHours', 'POST', `${endpoint}/workingHours/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyWorkingHours<TArgs extends Prisma.WorkingHoursFindManyArgs, TQueryFnData = Array<Prisma.WorkingHoursGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findMany`, args, options, fetch);
}

export function useInfiniteFindManyWorkingHours<TArgs extends Prisma.WorkingHoursFindManyArgs, TQueryFnData = Array<Prisma.WorkingHoursGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findMany`, args, options, fetch);
}

export function useSuspenseFindManyWorkingHours<TArgs extends Prisma.WorkingHoursFindManyArgs, TQueryFnData = Array<Prisma.WorkingHoursGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyWorkingHours<TArgs extends Prisma.WorkingHoursFindManyArgs, TQueryFnData = Array<Prisma.WorkingHoursGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findMany`, args, options, fetch);
}

export function useFindUniqueWorkingHours<TArgs extends Prisma.WorkingHoursFindUniqueArgs, TQueryFnData = Prisma.WorkingHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueWorkingHours<TArgs extends Prisma.WorkingHoursFindUniqueArgs, TQueryFnData = Prisma.WorkingHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findUnique`, args, options, fetch);
}

export function useFindFirstWorkingHours<TArgs extends Prisma.WorkingHoursFindFirstArgs, TQueryFnData = Prisma.WorkingHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstWorkingHours<TArgs extends Prisma.WorkingHoursFindFirstArgs, TQueryFnData = Prisma.WorkingHoursGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/findFirst`, args, options, fetch);
}

export function useUpdateWorkingHours(options?: Omit<(UseMutationOptions<(WorkingHours | undefined), DefaultError, Prisma.WorkingHoursUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursUpdateArgs, DefaultError, WorkingHours, true>('WorkingHours', 'PUT', `${endpoint}/workingHours/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyWorkingHours(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkingHoursUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkingHours', 'PUT', `${endpoint}/workingHours/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertWorkingHours(options?: Omit<(UseMutationOptions<(WorkingHours | undefined), DefaultError, Prisma.WorkingHoursUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursUpsertArgs, DefaultError, WorkingHours, true>('WorkingHours', 'POST', `${endpoint}/workingHours/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteWorkingHours(options?: Omit<(UseMutationOptions<(WorkingHours | undefined), DefaultError, Prisma.WorkingHoursDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursDeleteArgs, DefaultError, WorkingHours, true>('WorkingHours', 'DELETE', `${endpoint}/workingHours/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, WorkingHours, Prisma.WorkingHoursGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyWorkingHours(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.WorkingHoursDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.WorkingHoursDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('WorkingHours', 'DELETE', `${endpoint}/workingHours/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.WorkingHoursDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.WorkingHoursDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.WorkingHoursDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateWorkingHours<TArgs extends Prisma.WorkingHoursAggregateArgs, TQueryFnData = Prisma.GetWorkingHoursAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateWorkingHours<TArgs extends Prisma.WorkingHoursAggregateArgs, TQueryFnData = Prisma.GetWorkingHoursAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/aggregate`, args, options, fetch);
}

export function useGroupByWorkingHours<TArgs extends Prisma.WorkingHoursGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkingHoursGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkingHoursGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkingHoursGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkingHoursGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkingHoursGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkingHoursGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkingHoursGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByWorkingHours<TArgs extends Prisma.WorkingHoursGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.WorkingHoursGroupByArgs['orderBy'] } : { orderBy?: Prisma.WorkingHoursGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.WorkingHoursGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.WorkingHoursGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkingHoursGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.WorkingHoursGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.WorkingHoursGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/groupBy`, args, options, fetch);
}

export function useCountWorkingHours<TArgs extends Prisma.WorkingHoursCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkingHoursCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/count`, args, options, fetch);
}

export function useSuspenseCountWorkingHours<TArgs extends Prisma.WorkingHoursCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.WorkingHoursCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.WorkingHoursCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('WorkingHours', `${endpoint}/workingHours/count`, args, options, fetch);
}

export function useCheckWorkingHours<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; timeZone?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('WorkingHours', `${endpoint}/workingHours/check`, args, options, fetch);
}
