/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokAccount } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokAccount(options?: Omit<(UseMutationOptions<(TikTokAccount | undefined), DefaultError, Prisma.TikTokAccountCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountCreateArgs, DefaultError, TikTokAccount, true>('TikTokAccount', 'POST', `${endpoint}/tikTokAccount/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokAccountCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokAccount', 'POST', `${endpoint}/tikTokAccount/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokAccount<TArgs extends Prisma.TikTokAccountFindManyArgs, TQueryFnData = Array<Prisma.TikTokAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokAccount<TArgs extends Prisma.TikTokAccountFindManyArgs, TQueryFnData = Array<Prisma.TikTokAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokAccount<TArgs extends Prisma.TikTokAccountFindManyArgs, TQueryFnData = Array<Prisma.TikTokAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokAccount<TArgs extends Prisma.TikTokAccountFindManyArgs, TQueryFnData = Array<Prisma.TikTokAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokAccount<TArgs extends Prisma.TikTokAccountFindUniqueArgs, TQueryFnData = Prisma.TikTokAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokAccount<TArgs extends Prisma.TikTokAccountFindUniqueArgs, TQueryFnData = Prisma.TikTokAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokAccount<TArgs extends Prisma.TikTokAccountFindFirstArgs, TQueryFnData = Prisma.TikTokAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokAccount<TArgs extends Prisma.TikTokAccountFindFirstArgs, TQueryFnData = Prisma.TikTokAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/findFirst`, args, options, fetch);
}

export function useUpdateTikTokAccount(options?: Omit<(UseMutationOptions<(TikTokAccount | undefined), DefaultError, Prisma.TikTokAccountUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountUpdateArgs, DefaultError, TikTokAccount, true>('TikTokAccount', 'PUT', `${endpoint}/tikTokAccount/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokAccountUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokAccount', 'PUT', `${endpoint}/tikTokAccount/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokAccount(options?: Omit<(UseMutationOptions<(TikTokAccount | undefined), DefaultError, Prisma.TikTokAccountUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountUpsertArgs, DefaultError, TikTokAccount, true>('TikTokAccount', 'POST', `${endpoint}/tikTokAccount/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokAccount(options?: Omit<(UseMutationOptions<(TikTokAccount | undefined), DefaultError, Prisma.TikTokAccountDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountDeleteArgs, DefaultError, TikTokAccount, true>('TikTokAccount', 'DELETE', `${endpoint}/tikTokAccount/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokAccount, Prisma.TikTokAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokAccountDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokAccountDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokAccount', 'DELETE', `${endpoint}/tikTokAccount/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokAccountDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokAccountDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokAccountDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokAccount<TArgs extends Prisma.TikTokAccountAggregateArgs, TQueryFnData = Prisma.GetTikTokAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokAccount<TArgs extends Prisma.TikTokAccountAggregateArgs, TQueryFnData = Prisma.GetTikTokAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/aggregate`, args, options, fetch);
}

export function useGroupByTikTokAccount<TArgs extends Prisma.TikTokAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokAccount<TArgs extends Prisma.TikTokAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/groupBy`, args, options, fetch);
}

export function useCountTikTokAccount<TArgs extends Prisma.TikTokAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/count`, args, options, fetch);
}

export function useSuspenseCountTikTokAccount<TArgs extends Prisma.TikTokAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokAccountCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokAccount', `${endpoint}/tikTokAccount/count`, args, options, fetch);
}
import type { TikTokAccountType, TikTokUserType } from '@prisma/client';

export function useCheckTikTokAccount<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; isReauthRequired?: boolean; tiktokBusinessId?: string; userAccessToken?: string; userRefreshToken?: string; username?: string; fullName?: string; profilePictureUri?: string; baseRegion?: string; accountType?: TikTokAccountType; userType?: TikTokUserType }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokAccount', `${endpoint}/tikTokAccount/check`, args, options, fetch);
}
