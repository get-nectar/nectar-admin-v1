/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalCommunityMemberInstagramProfileData } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataCreateArgs, DefaultError, GlobalCommunityMemberInstagramProfileData, true>('GlobalCommunityMemberInstagramProfileData', 'POST', `${endpoint}/globalCommunityMemberInstagramProfileData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMemberInstagramProfileData', 'POST', `${endpoint}/globalCommunityMemberInstagramProfileData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindUniqueArgs, TQueryFnData = Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindUniqueArgs, TQueryFnData = Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindFirstArgs, TQueryFnData = Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataFindFirstArgs, TQueryFnData = Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/findFirst`, args, options, fetch);
}

export function useUpdateGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataUpdateArgs, DefaultError, GlobalCommunityMemberInstagramProfileData, true>('GlobalCommunityMemberInstagramProfileData', 'PUT', `${endpoint}/globalCommunityMemberInstagramProfileData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMemberInstagramProfileData', 'PUT', `${endpoint}/globalCommunityMemberInstagramProfileData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataUpsertArgs, DefaultError, GlobalCommunityMemberInstagramProfileData, true>('GlobalCommunityMemberInstagramProfileData', 'POST', `${endpoint}/globalCommunityMemberInstagramProfileData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(GlobalCommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataDeleteArgs, DefaultError, GlobalCommunityMemberInstagramProfileData, true>('GlobalCommunityMemberInstagramProfileData', 'DELETE', `${endpoint}/globalCommunityMemberInstagramProfileData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalCommunityMemberInstagramProfileData, Prisma.GlobalCommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalCommunityMemberInstagramProfileDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalCommunityMemberInstagramProfileDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalCommunityMemberInstagramProfileData', 'DELETE', `${endpoint}/globalCommunityMemberInstagramProfileData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalCommunityMemberInstagramProfileDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalCommunityMemberInstagramProfileDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataAggregateArgs, TQueryFnData = Prisma.GetGlobalCommunityMemberInstagramProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataAggregateArgs, TQueryFnData = Prisma.GetGlobalCommunityMemberInstagramProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/aggregate`, args, options, fetch);
}

export function useGroupByGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalCommunityMemberInstagramProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/groupBy`, args, options, fetch);
}

export function useCountGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalCommunityMemberInstagramProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/count`, args, options, fetch);
}

export function useSuspenseCountGlobalCommunityMemberInstagramProfileData<TArgs extends Prisma.GlobalCommunityMemberInstagramProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalCommunityMemberInstagramProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalCommunityMemberInstagramProfileDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/count`, args, options, fetch);
}
import type { InstagramAccountType } from '@prisma/client';

export function useCheckGlobalCommunityMemberInstagramProfileData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; instagramUniversalId?: string; profileName?: string; isVerified?: boolean; accountType?: InstagramAccountType; biography?: string; followerCount?: number; mediaCount?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalCommunityMemberInstagramProfileData', `${endpoint}/globalCommunityMemberInstagramProfileData/check`, args, options, fetch);
}
