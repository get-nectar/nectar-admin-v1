/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MFAFactor } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMFAFactor(options?: Omit<(UseMutationOptions<(MFAFactor | undefined), DefaultError, Prisma.MFAFactorCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorCreateArgs, DefaultError, MFAFactor, true>('MFAFactor', 'POST', `${endpoint}/mFAFactor/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMFAFactor(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MFAFactorCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MFAFactor', 'POST', `${endpoint}/mFAFactor/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMFAFactor<TArgs extends Prisma.MFAFactorFindManyArgs, TQueryFnData = Array<Prisma.MFAFactorGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMFAFactor<TArgs extends Prisma.MFAFactorFindManyArgs, TQueryFnData = Array<Prisma.MFAFactorGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMFAFactor<TArgs extends Prisma.MFAFactorFindManyArgs, TQueryFnData = Array<Prisma.MFAFactorGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMFAFactor<TArgs extends Prisma.MFAFactorFindManyArgs, TQueryFnData = Array<Prisma.MFAFactorGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findMany`, args, options, fetch);
}

export function useFindUniqueMFAFactor<TArgs extends Prisma.MFAFactorFindUniqueArgs, TQueryFnData = Prisma.MFAFactorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMFAFactor<TArgs extends Prisma.MFAFactorFindUniqueArgs, TQueryFnData = Prisma.MFAFactorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findUnique`, args, options, fetch);
}

export function useFindFirstMFAFactor<TArgs extends Prisma.MFAFactorFindFirstArgs, TQueryFnData = Prisma.MFAFactorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMFAFactor<TArgs extends Prisma.MFAFactorFindFirstArgs, TQueryFnData = Prisma.MFAFactorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/findFirst`, args, options, fetch);
}

export function useUpdateMFAFactor(options?: Omit<(UseMutationOptions<(MFAFactor | undefined), DefaultError, Prisma.MFAFactorUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorUpdateArgs, DefaultError, MFAFactor, true>('MFAFactor', 'PUT', `${endpoint}/mFAFactor/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMFAFactor(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MFAFactorUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MFAFactor', 'PUT', `${endpoint}/mFAFactor/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMFAFactor(options?: Omit<(UseMutationOptions<(MFAFactor | undefined), DefaultError, Prisma.MFAFactorUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorUpsertArgs, DefaultError, MFAFactor, true>('MFAFactor', 'POST', `${endpoint}/mFAFactor/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMFAFactor(options?: Omit<(UseMutationOptions<(MFAFactor | undefined), DefaultError, Prisma.MFAFactorDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorDeleteArgs, DefaultError, MFAFactor, true>('MFAFactor', 'DELETE', `${endpoint}/mFAFactor/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MFAFactor, Prisma.MFAFactorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMFAFactor(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MFAFactorDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MFAFactorDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MFAFactor', 'DELETE', `${endpoint}/mFAFactor/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MFAFactorDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MFAFactorDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MFAFactorDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMFAFactor<TArgs extends Prisma.MFAFactorAggregateArgs, TQueryFnData = Prisma.GetMFAFactorAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MFAFactorAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMFAFactor<TArgs extends Prisma.MFAFactorAggregateArgs, TQueryFnData = Prisma.GetMFAFactorAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MFAFactorAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/aggregate`, args, options, fetch);
}

export function useGroupByMFAFactor<TArgs extends Prisma.MFAFactorGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MFAFactorGroupByArgs['orderBy'] } : { orderBy?: Prisma.MFAFactorGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MFAFactorGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MFAFactorGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MFAFactorGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MFAFactorGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MFAFactorGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMFAFactor<TArgs extends Prisma.MFAFactorGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MFAFactorGroupByArgs['orderBy'] } : { orderBy?: Prisma.MFAFactorGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MFAFactorGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MFAFactorGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MFAFactorGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MFAFactorGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MFAFactorGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/groupBy`, args, options, fetch);
}

export function useCountMFAFactor<TArgs extends Prisma.MFAFactorCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MFAFactorCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/count`, args, options, fetch);
}

export function useSuspenseCountMFAFactor<TArgs extends Prisma.MFAFactorCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MFAFactorCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MFAFactorCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MFAFactor', `${endpoint}/mFAFactor/count`, args, options, fetch);
}
import type { MFAFactorType, MFAFactorStatus } from '@prisma/client';

export function useCheckMFAFactor<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; userId?: string; type?: MFAFactorType; status?: MFAFactorStatus; secret?: string; phoneNumber?: string; friendlyName?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MFAFactor', `${endpoint}/mFAFactor/check`, args, options, fetch);
}
