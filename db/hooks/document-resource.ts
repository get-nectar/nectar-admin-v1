/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DocumentResource } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateDocumentResource(options?: Omit<(UseMutationOptions<(DocumentResource | undefined), DefaultError, Prisma.DocumentResourceCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceCreateArgs, DefaultError, DocumentResource, true>('DocumentResource', 'POST', `${endpoint}/documentResource/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDocumentResource(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DocumentResourceCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DocumentResource', 'POST', `${endpoint}/documentResource/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDocumentResource<TArgs extends Prisma.DocumentResourceFindManyArgs, TQueryFnData = Array<Prisma.DocumentResourceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDocumentResource<TArgs extends Prisma.DocumentResourceFindManyArgs, TQueryFnData = Array<Prisma.DocumentResourceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findMany`, args, options, fetch);
}

export function useSuspenseFindManyDocumentResource<TArgs extends Prisma.DocumentResourceFindManyArgs, TQueryFnData = Array<Prisma.DocumentResourceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyDocumentResource<TArgs extends Prisma.DocumentResourceFindManyArgs, TQueryFnData = Array<Prisma.DocumentResourceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findMany`, args, options, fetch);
}

export function useFindUniqueDocumentResource<TArgs extends Prisma.DocumentResourceFindUniqueArgs, TQueryFnData = Prisma.DocumentResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueDocumentResource<TArgs extends Prisma.DocumentResourceFindUniqueArgs, TQueryFnData = Prisma.DocumentResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findUnique`, args, options, fetch);
}

export function useFindFirstDocumentResource<TArgs extends Prisma.DocumentResourceFindFirstArgs, TQueryFnData = Prisma.DocumentResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstDocumentResource<TArgs extends Prisma.DocumentResourceFindFirstArgs, TQueryFnData = Prisma.DocumentResourceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/findFirst`, args, options, fetch);
}

export function useUpdateDocumentResource(options?: Omit<(UseMutationOptions<(DocumentResource | undefined), DefaultError, Prisma.DocumentResourceUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceUpdateArgs, DefaultError, DocumentResource, true>('DocumentResource', 'PUT', `${endpoint}/documentResource/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDocumentResource(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DocumentResourceUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DocumentResource', 'PUT', `${endpoint}/documentResource/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDocumentResource(options?: Omit<(UseMutationOptions<(DocumentResource | undefined), DefaultError, Prisma.DocumentResourceUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceUpsertArgs, DefaultError, DocumentResource, true>('DocumentResource', 'POST', `${endpoint}/documentResource/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDocumentResource(options?: Omit<(UseMutationOptions<(DocumentResource | undefined), DefaultError, Prisma.DocumentResourceDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceDeleteArgs, DefaultError, DocumentResource, true>('DocumentResource', 'DELETE', `${endpoint}/documentResource/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DocumentResource, Prisma.DocumentResourceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDocumentResource(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DocumentResourceDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DocumentResourceDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DocumentResource', 'DELETE', `${endpoint}/documentResource/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DocumentResourceDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DocumentResourceDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DocumentResourceDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDocumentResource<TArgs extends Prisma.DocumentResourceAggregateArgs, TQueryFnData = Prisma.GetDocumentResourceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateDocumentResource<TArgs extends Prisma.DocumentResourceAggregateArgs, TQueryFnData = Prisma.GetDocumentResourceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/aggregate`, args, options, fetch);
}

export function useGroupByDocumentResource<TArgs extends Prisma.DocumentResourceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DocumentResourceGroupByArgs['orderBy'] } : { orderBy?: Prisma.DocumentResourceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DocumentResourceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DocumentResourceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DocumentResourceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DocumentResourceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DocumentResourceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByDocumentResource<TArgs extends Prisma.DocumentResourceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DocumentResourceGroupByArgs['orderBy'] } : { orderBy?: Prisma.DocumentResourceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DocumentResourceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DocumentResourceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DocumentResourceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DocumentResourceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DocumentResourceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/groupBy`, args, options, fetch);
}

export function useCountDocumentResource<TArgs extends Prisma.DocumentResourceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DocumentResourceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/count`, args, options, fetch);
}

export function useSuspenseCountDocumentResource<TArgs extends Prisma.DocumentResourceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DocumentResourceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DocumentResourceCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DocumentResource', `${endpoint}/documentResource/count`, args, options, fetch);
}
import type { KnowledgeResourceType, UploadStatus } from '@prisma/client';

export function useCheckDocumentResource<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; type?: KnowledgeResourceType; status?: UploadStatus; customNotes?: string; knowledgeBaseId?: string; resourceUrl?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DocumentResource', `${endpoint}/documentResource/check`, args, options, fetch);
}
