/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TikTokCustomerService } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTikTokCustomerService(options?: Omit<(UseMutationOptions<(TikTokCustomerService | undefined), DefaultError, Prisma.TikTokCustomerServiceCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceCreateArgs, DefaultError, TikTokCustomerService, true>('TikTokCustomerService', 'POST', `${endpoint}/tikTokCustomerService/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTikTokCustomerService(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCustomerServiceCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCustomerService', 'POST', `${endpoint}/tikTokCustomerService/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindManyArgs, TQueryFnData = Array<Prisma.TikTokCustomerServiceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindManyArgs, TQueryFnData = Array<Prisma.TikTokCustomerServiceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindManyArgs, TQueryFnData = Array<Prisma.TikTokCustomerServiceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindManyArgs, TQueryFnData = Array<Prisma.TikTokCustomerServiceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findMany`, args, options, fetch);
}

export function useFindUniqueTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindUniqueArgs, TQueryFnData = Prisma.TikTokCustomerServiceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindUniqueArgs, TQueryFnData = Prisma.TikTokCustomerServiceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findUnique`, args, options, fetch);
}

export function useFindFirstTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindFirstArgs, TQueryFnData = Prisma.TikTokCustomerServiceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceFindFirstArgs, TQueryFnData = Prisma.TikTokCustomerServiceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/findFirst`, args, options, fetch);
}

export function useUpdateTikTokCustomerService(options?: Omit<(UseMutationOptions<(TikTokCustomerService | undefined), DefaultError, Prisma.TikTokCustomerServiceUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceUpdateArgs, DefaultError, TikTokCustomerService, true>('TikTokCustomerService', 'PUT', `${endpoint}/tikTokCustomerService/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTikTokCustomerService(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCustomerServiceUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCustomerService', 'PUT', `${endpoint}/tikTokCustomerService/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTikTokCustomerService(options?: Omit<(UseMutationOptions<(TikTokCustomerService | undefined), DefaultError, Prisma.TikTokCustomerServiceUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceUpsertArgs, DefaultError, TikTokCustomerService, true>('TikTokCustomerService', 'POST', `${endpoint}/tikTokCustomerService/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTikTokCustomerService(options?: Omit<(UseMutationOptions<(TikTokCustomerService | undefined), DefaultError, Prisma.TikTokCustomerServiceDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceDeleteArgs, DefaultError, TikTokCustomerService, true>('TikTokCustomerService', 'DELETE', `${endpoint}/tikTokCustomerService/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TikTokCustomerService, Prisma.TikTokCustomerServiceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTikTokCustomerService(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TikTokCustomerServiceDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TikTokCustomerServiceDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TikTokCustomerService', 'DELETE', `${endpoint}/tikTokCustomerService/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TikTokCustomerServiceDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TikTokCustomerServiceDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceAggregateArgs, TQueryFnData = Prisma.GetTikTokCustomerServiceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceAggregateArgs, TQueryFnData = Prisma.GetTikTokCustomerServiceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/aggregate`, args, options, fetch);
}

export function useGroupByTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokCustomerServiceGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokCustomerServiceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokCustomerServiceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokCustomerServiceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCustomerServiceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCustomerServiceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokCustomerServiceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TikTokCustomerServiceGroupByArgs['orderBy'] } : { orderBy?: Prisma.TikTokCustomerServiceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TikTokCustomerServiceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TikTokCustomerServiceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCustomerServiceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TikTokCustomerServiceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TikTokCustomerServiceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/groupBy`, args, options, fetch);
}

export function useCountTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokCustomerServiceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/count`, args, options, fetch);
}

export function useSuspenseCountTikTokCustomerService<TArgs extends Prisma.TikTokCustomerServiceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TikTokCustomerServiceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TikTokCustomerServiceCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/count`, args, options, fetch);
}

export function useCheckTikTokCustomerService<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; userId?: string; avatar?: string; nickname?: string; tiktokShopId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TikTokCustomerService', `${endpoint}/tikTokCustomerService/check`, args, options, fetch);
}
