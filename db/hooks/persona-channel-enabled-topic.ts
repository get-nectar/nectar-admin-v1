/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PersonaChannelEnabledTopic } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<(PersonaChannelEnabledTopic | undefined), DefaultError, Prisma.PersonaChannelEnabledTopicCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicCreateArgs, DefaultError, PersonaChannelEnabledTopic, true>('PersonaChannelEnabledTopic', 'POST', `${endpoint}/personaChannelEnabledTopic/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelEnabledTopicCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelEnabledTopic', 'POST', `${endpoint}/personaChannelEnabledTopic/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelEnabledTopicGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelEnabledTopicGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelEnabledTopicGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindManyArgs, TQueryFnData = Array<Prisma.PersonaChannelEnabledTopicGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findMany`, args, options, fetch);
}

export function useFindUniquePersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindUniqueArgs, TQueryFnData = Prisma.PersonaChannelEnabledTopicGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindUniqueArgs, TQueryFnData = Prisma.PersonaChannelEnabledTopicGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findUnique`, args, options, fetch);
}

export function useFindFirstPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindFirstArgs, TQueryFnData = Prisma.PersonaChannelEnabledTopicGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicFindFirstArgs, TQueryFnData = Prisma.PersonaChannelEnabledTopicGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/findFirst`, args, options, fetch);
}

export function useUpdatePersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<(PersonaChannelEnabledTopic | undefined), DefaultError, Prisma.PersonaChannelEnabledTopicUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicUpdateArgs, DefaultError, PersonaChannelEnabledTopic, true>('PersonaChannelEnabledTopic', 'PUT', `${endpoint}/personaChannelEnabledTopic/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelEnabledTopicUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelEnabledTopic', 'PUT', `${endpoint}/personaChannelEnabledTopic/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<(PersonaChannelEnabledTopic | undefined), DefaultError, Prisma.PersonaChannelEnabledTopicUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicUpsertArgs, DefaultError, PersonaChannelEnabledTopic, true>('PersonaChannelEnabledTopic', 'POST', `${endpoint}/personaChannelEnabledTopic/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<(PersonaChannelEnabledTopic | undefined), DefaultError, Prisma.PersonaChannelEnabledTopicDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicDeleteArgs, DefaultError, PersonaChannelEnabledTopic, true>('PersonaChannelEnabledTopic', 'DELETE', `${endpoint}/personaChannelEnabledTopic/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PersonaChannelEnabledTopic, Prisma.PersonaChannelEnabledTopicGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPersonaChannelEnabledTopic(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PersonaChannelEnabledTopicDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PersonaChannelEnabledTopicDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PersonaChannelEnabledTopic', 'DELETE', `${endpoint}/personaChannelEnabledTopic/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PersonaChannelEnabledTopicDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PersonaChannelEnabledTopicDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicAggregateArgs, TQueryFnData = Prisma.GetPersonaChannelEnabledTopicAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicAggregateArgs, TQueryFnData = Prisma.GetPersonaChannelEnabledTopicAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/aggregate`, args, options, fetch);
}

export function useGroupByPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaChannelEnabledTopicGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaChannelEnabledTopicGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaChannelEnabledTopicGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaChannelEnabledTopicGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelEnabledTopicGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelEnabledTopicGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaChannelEnabledTopicGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PersonaChannelEnabledTopicGroupByArgs['orderBy'] } : { orderBy?: Prisma.PersonaChannelEnabledTopicGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PersonaChannelEnabledTopicGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PersonaChannelEnabledTopicGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelEnabledTopicGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PersonaChannelEnabledTopicGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PersonaChannelEnabledTopicGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/groupBy`, args, options, fetch);
}

export function useCountPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaChannelEnabledTopicCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/count`, args, options, fetch);
}

export function useSuspenseCountPersonaChannelEnabledTopic<TArgs extends Prisma.PersonaChannelEnabledTopicCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PersonaChannelEnabledTopicCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PersonaChannelEnabledTopicCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/count`, args, options, fetch);
}
import type { PersonaTopicChannel, PersonaChannelTopicReplyMode } from '@prisma/client';

export function useCheckPersonaChannelEnabledTopic<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; personaChannelSettingId?: string; topicId?: string; allowUntrainedTopics?: boolean; enableAllTopics?: boolean; channel?: PersonaTopicChannel; mode?: PersonaChannelTopicReplyMode }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PersonaChannelEnabledTopic', `${endpoint}/personaChannelEnabledTopic/check`, args, options, fetch);
}
