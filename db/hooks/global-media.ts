/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalMedia } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalMedia(options?: Omit<(UseMutationOptions<(GlobalMedia | undefined), DefaultError, Prisma.GlobalMediaCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaCreateArgs, DefaultError, GlobalMedia, true>('GlobalMedia', 'POST', `${endpoint}/globalMedia/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalMedia(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalMediaCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalMedia', 'POST', `${endpoint}/globalMedia/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalMedia<TArgs extends Prisma.GlobalMediaFindManyArgs, TQueryFnData = Array<Prisma.GlobalMediaGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalMedia<TArgs extends Prisma.GlobalMediaFindManyArgs, TQueryFnData = Array<Prisma.GlobalMediaGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalMedia<TArgs extends Prisma.GlobalMediaFindManyArgs, TQueryFnData = Array<Prisma.GlobalMediaGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalMedia<TArgs extends Prisma.GlobalMediaFindManyArgs, TQueryFnData = Array<Prisma.GlobalMediaGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalMedia<TArgs extends Prisma.GlobalMediaFindUniqueArgs, TQueryFnData = Prisma.GlobalMediaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalMedia<TArgs extends Prisma.GlobalMediaFindUniqueArgs, TQueryFnData = Prisma.GlobalMediaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalMedia<TArgs extends Prisma.GlobalMediaFindFirstArgs, TQueryFnData = Prisma.GlobalMediaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalMedia<TArgs extends Prisma.GlobalMediaFindFirstArgs, TQueryFnData = Prisma.GlobalMediaGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/findFirst`, args, options, fetch);
}

export function useUpdateGlobalMedia(options?: Omit<(UseMutationOptions<(GlobalMedia | undefined), DefaultError, Prisma.GlobalMediaUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaUpdateArgs, DefaultError, GlobalMedia, true>('GlobalMedia', 'PUT', `${endpoint}/globalMedia/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalMedia(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalMediaUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalMedia', 'PUT', `${endpoint}/globalMedia/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalMedia(options?: Omit<(UseMutationOptions<(GlobalMedia | undefined), DefaultError, Prisma.GlobalMediaUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaUpsertArgs, DefaultError, GlobalMedia, true>('GlobalMedia', 'POST', `${endpoint}/globalMedia/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalMedia(options?: Omit<(UseMutationOptions<(GlobalMedia | undefined), DefaultError, Prisma.GlobalMediaDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaDeleteArgs, DefaultError, GlobalMedia, true>('GlobalMedia', 'DELETE', `${endpoint}/globalMedia/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalMedia, Prisma.GlobalMediaGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalMedia(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalMediaDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalMediaDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalMedia', 'DELETE', `${endpoint}/globalMedia/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalMediaDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalMediaDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalMediaDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalMedia<TArgs extends Prisma.GlobalMediaAggregateArgs, TQueryFnData = Prisma.GetGlobalMediaAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalMedia<TArgs extends Prisma.GlobalMediaAggregateArgs, TQueryFnData = Prisma.GetGlobalMediaAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/aggregate`, args, options, fetch);
}

export function useGroupByGlobalMedia<TArgs extends Prisma.GlobalMediaGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalMediaGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalMediaGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalMediaGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalMediaGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalMediaGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalMediaGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalMediaGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalMedia<TArgs extends Prisma.GlobalMediaGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalMediaGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalMediaGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalMediaGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalMediaGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalMediaGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalMediaGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalMediaGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/groupBy`, args, options, fetch);
}

export function useCountGlobalMedia<TArgs extends Prisma.GlobalMediaCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalMediaCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/count`, args, options, fetch);
}

export function useSuspenseCountGlobalMedia<TArgs extends Prisma.GlobalMediaCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalMediaCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalMediaCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalMedia', `${endpoint}/globalMedia/count`, args, options, fetch);
}
import type { Platform, MediaStatus, ContentType } from '@prisma/client';

export function useCheckGlobalMedia<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; platform?: Platform; platformMediaId?: string; sourceUri?: string; thumbnailUri?: string; status?: MediaStatus; type?: ContentType; height?: number; width?: number; globalContentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalMedia', `${endpoint}/globalMedia/check`, args, options, fetch);
}
