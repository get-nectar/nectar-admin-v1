/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GlobalLLMAnalysisMetadata } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(GlobalLLMAnalysisMetadata | undefined), DefaultError, Prisma.GlobalLLMAnalysisMetadataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataCreateArgs, DefaultError, GlobalLLMAnalysisMetadata, true>('GlobalLLMAnalysisMetadata', 'POST', `${endpoint}/globalLLMAnalysisMetadata/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalLLMAnalysisMetadataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalLLMAnalysisMetadata', 'POST', `${endpoint}/globalLLMAnalysisMetadata/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindManyArgs, TQueryFnData = Array<Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findMany`, args, options, fetch);
}

export function useFindUniqueGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindUniqueArgs, TQueryFnData = Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindUniqueArgs, TQueryFnData = Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findUnique`, args, options, fetch);
}

export function useFindFirstGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindFirstArgs, TQueryFnData = Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataFindFirstArgs, TQueryFnData = Prisma.GlobalLLMAnalysisMetadataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/findFirst`, args, options, fetch);
}

export function useUpdateGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(GlobalLLMAnalysisMetadata | undefined), DefaultError, Prisma.GlobalLLMAnalysisMetadataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataUpdateArgs, DefaultError, GlobalLLMAnalysisMetadata, true>('GlobalLLMAnalysisMetadata', 'PUT', `${endpoint}/globalLLMAnalysisMetadata/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalLLMAnalysisMetadataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalLLMAnalysisMetadata', 'PUT', `${endpoint}/globalLLMAnalysisMetadata/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(GlobalLLMAnalysisMetadata | undefined), DefaultError, Prisma.GlobalLLMAnalysisMetadataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataUpsertArgs, DefaultError, GlobalLLMAnalysisMetadata, true>('GlobalLLMAnalysisMetadata', 'POST', `${endpoint}/globalLLMAnalysisMetadata/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<(GlobalLLMAnalysisMetadata | undefined), DefaultError, Prisma.GlobalLLMAnalysisMetadataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataDeleteArgs, DefaultError, GlobalLLMAnalysisMetadata, true>('GlobalLLMAnalysisMetadata', 'DELETE', `${endpoint}/globalLLMAnalysisMetadata/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GlobalLLMAnalysisMetadata, Prisma.GlobalLLMAnalysisMetadataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGlobalLLMAnalysisMetadata(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GlobalLLMAnalysisMetadataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GlobalLLMAnalysisMetadataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GlobalLLMAnalysisMetadata', 'DELETE', `${endpoint}/globalLLMAnalysisMetadata/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GlobalLLMAnalysisMetadataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GlobalLLMAnalysisMetadataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataAggregateArgs, TQueryFnData = Prisma.GetGlobalLLMAnalysisMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataAggregateArgs, TQueryFnData = Prisma.GetGlobalLLMAnalysisMetadataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/aggregate`, args, options, fetch);
}

export function useGroupByGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalLLMAnalysisMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalLLMAnalysisMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalLLMAnalysisMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalLLMAnalysisMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalLLMAnalysisMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalLLMAnalysisMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalLLMAnalysisMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GlobalLLMAnalysisMetadataGroupByArgs['orderBy'] } : { orderBy?: Prisma.GlobalLLMAnalysisMetadataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GlobalLLMAnalysisMetadataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GlobalLLMAnalysisMetadataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalLLMAnalysisMetadataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GlobalLLMAnalysisMetadataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GlobalLLMAnalysisMetadataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/groupBy`, args, options, fetch);
}

export function useCountGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalLLMAnalysisMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/count`, args, options, fetch);
}

export function useSuspenseCountGlobalLLMAnalysisMetadata<TArgs extends Prisma.GlobalLLMAnalysisMetadataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GlobalLLMAnalysisMetadataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GlobalLLMAnalysisMetadataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/count`, args, options, fetch);
}

export function useCheckGlobalLLMAnalysisMetadata<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; contentId?: string; generatedSummary?: string; sentimentAnalysisId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GlobalLLMAnalysisMetadata', `${endpoint}/globalLLMAnalysisMetadata/check`, args, options, fetch);
}
