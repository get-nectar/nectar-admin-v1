/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CommunityMemberInstagramProfileData } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.CommunityMemberInstagramProfileDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataCreateArgs, DefaultError, CommunityMemberInstagramProfileData, true>('CommunityMemberInstagramProfileData', 'POST', `${endpoint}/communityMemberInstagramProfileData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberInstagramProfileDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberInstagramProfileData', 'POST', `${endpoint}/communityMemberInstagramProfileData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindManyArgs, TQueryFnData = Array<Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findMany`, args, options, fetch);
}

export function useFindUniqueCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindUniqueArgs, TQueryFnData = Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findUnique`, args, options, fetch);
}

export function useFindFirstCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataFindFirstArgs, TQueryFnData = Prisma.CommunityMemberInstagramProfileDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/findFirst`, args, options, fetch);
}

export function useUpdateCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.CommunityMemberInstagramProfileDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataUpdateArgs, DefaultError, CommunityMemberInstagramProfileData, true>('CommunityMemberInstagramProfileData', 'PUT', `${endpoint}/communityMemberInstagramProfileData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberInstagramProfileDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberInstagramProfileData', 'PUT', `${endpoint}/communityMemberInstagramProfileData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.CommunityMemberInstagramProfileDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataUpsertArgs, DefaultError, CommunityMemberInstagramProfileData, true>('CommunityMemberInstagramProfileData', 'POST', `${endpoint}/communityMemberInstagramProfileData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<(CommunityMemberInstagramProfileData | undefined), DefaultError, Prisma.CommunityMemberInstagramProfileDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataDeleteArgs, DefaultError, CommunityMemberInstagramProfileData, true>('CommunityMemberInstagramProfileData', 'DELETE', `${endpoint}/communityMemberInstagramProfileData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CommunityMemberInstagramProfileData, Prisma.CommunityMemberInstagramProfileDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCommunityMemberInstagramProfileData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CommunityMemberInstagramProfileDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CommunityMemberInstagramProfileDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CommunityMemberInstagramProfileData', 'DELETE', `${endpoint}/communityMemberInstagramProfileData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CommunityMemberInstagramProfileDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CommunityMemberInstagramProfileDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberInstagramProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataAggregateArgs, TQueryFnData = Prisma.GetCommunityMemberInstagramProfileDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/aggregate`, args, options, fetch);
}

export function useGroupByCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberInstagramProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberInstagramProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberInstagramProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberInstagramProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberInstagramProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberInstagramProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberInstagramProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CommunityMemberInstagramProfileDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CommunityMemberInstagramProfileDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CommunityMemberInstagramProfileDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CommunityMemberInstagramProfileDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberInstagramProfileDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CommunityMemberInstagramProfileDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CommunityMemberInstagramProfileDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/groupBy`, args, options, fetch);
}

export function useCountCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberInstagramProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/count`, args, options, fetch);
}

export function useSuspenseCountCommunityMemberInstagramProfileData<TArgs extends Prisma.CommunityMemberInstagramProfileDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CommunityMemberInstagramProfileDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CommunityMemberInstagramProfileDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/count`, args, options, fetch);
}
import type { InstagramAccountType } from '@prisma/client';

export function useCheckCommunityMemberInstagramProfileData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; communityMemberId?: string; handle?: string; profileName?: string; instagramUniversalId?: string; isVerified?: boolean; accountType?: InstagramAccountType; biography?: string; profilePictureUri?: string; followerCount?: number; mediaCount?: number; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CommunityMemberInstagramProfileData', `${endpoint}/communityMemberInstagramProfileData/check`, args, options, fetch);
}
