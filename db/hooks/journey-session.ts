/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, JourneySession } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateJourneySession(options?: Omit<(UseMutationOptions<(JourneySession | undefined), DefaultError, Prisma.JourneySessionCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionCreateArgs, DefaultError, JourneySession, true>('JourneySession', 'POST', `${endpoint}/journeySession/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyJourneySession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneySessionCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneySession', 'POST', `${endpoint}/journeySession/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyJourneySession<TArgs extends Prisma.JourneySessionFindManyArgs, TQueryFnData = Array<Prisma.JourneySessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findMany`, args, options, fetch);
}

export function useInfiniteFindManyJourneySession<TArgs extends Prisma.JourneySessionFindManyArgs, TQueryFnData = Array<Prisma.JourneySessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findMany`, args, options, fetch);
}

export function useSuspenseFindManyJourneySession<TArgs extends Prisma.JourneySessionFindManyArgs, TQueryFnData = Array<Prisma.JourneySessionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyJourneySession<TArgs extends Prisma.JourneySessionFindManyArgs, TQueryFnData = Array<Prisma.JourneySessionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findMany`, args, options, fetch);
}

export function useFindUniqueJourneySession<TArgs extends Prisma.JourneySessionFindUniqueArgs, TQueryFnData = Prisma.JourneySessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueJourneySession<TArgs extends Prisma.JourneySessionFindUniqueArgs, TQueryFnData = Prisma.JourneySessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findUnique`, args, options, fetch);
}

export function useFindFirstJourneySession<TArgs extends Prisma.JourneySessionFindFirstArgs, TQueryFnData = Prisma.JourneySessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstJourneySession<TArgs extends Prisma.JourneySessionFindFirstArgs, TQueryFnData = Prisma.JourneySessionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/findFirst`, args, options, fetch);
}

export function useUpdateJourneySession(options?: Omit<(UseMutationOptions<(JourneySession | undefined), DefaultError, Prisma.JourneySessionUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionUpdateArgs, DefaultError, JourneySession, true>('JourneySession', 'PUT', `${endpoint}/journeySession/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyJourneySession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneySessionUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneySession', 'PUT', `${endpoint}/journeySession/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertJourneySession(options?: Omit<(UseMutationOptions<(JourneySession | undefined), DefaultError, Prisma.JourneySessionUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionUpsertArgs, DefaultError, JourneySession, true>('JourneySession', 'POST', `${endpoint}/journeySession/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteJourneySession(options?: Omit<(UseMutationOptions<(JourneySession | undefined), DefaultError, Prisma.JourneySessionDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionDeleteArgs, DefaultError, JourneySession, true>('JourneySession', 'DELETE', `${endpoint}/journeySession/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, JourneySession, Prisma.JourneySessionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyJourneySession(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.JourneySessionDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.JourneySessionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('JourneySession', 'DELETE', `${endpoint}/journeySession/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.JourneySessionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.JourneySessionDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.JourneySessionDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateJourneySession<TArgs extends Prisma.JourneySessionAggregateArgs, TQueryFnData = Prisma.GetJourneySessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneySessionAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateJourneySession<TArgs extends Prisma.JourneySessionAggregateArgs, TQueryFnData = Prisma.GetJourneySessionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.JourneySessionAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/aggregate`, args, options, fetch);
}

export function useGroupByJourneySession<TArgs extends Prisma.JourneySessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneySessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneySessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneySessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneySessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneySessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneySessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneySessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByJourneySession<TArgs extends Prisma.JourneySessionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JourneySessionGroupByArgs['orderBy'] } : { orderBy?: Prisma.JourneySessionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.JourneySessionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.JourneySessionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneySessionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.JourneySessionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.JourneySessionGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/groupBy`, args, options, fetch);
}

export function useCountJourneySession<TArgs extends Prisma.JourneySessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneySessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/count`, args, options, fetch);
}

export function useSuspenseCountJourneySession<TArgs extends Prisma.JourneySessionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.JourneySessionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.JourneySessionCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('JourneySession', `${endpoint}/journeySession/count`, args, options, fetch);
}
import type { JourneySessionStatus, JourneyTriggerEntity } from '@prisma/client';

export function useCheckJourneySession<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; lastActionBlockExecutedId?: string; status?: JourneySessionStatus; journeyId?: string; conversationId?: string; communityMemberId?: string; delayedCommentId?: string; delayedMessageId?: string; validatedTriggerId?: string; triggerEntity?: JourneyTriggerEntity; triggerMessageId?: string; triggeredById?: string; triggerCommentId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('JourneySession', `${endpoint}/journeySession/check`, args, options, fetch);
}
