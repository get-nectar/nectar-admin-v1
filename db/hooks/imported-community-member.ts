/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ImportedCommunityMember } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateImportedCommunityMember(options?: Omit<(UseMutationOptions<(ImportedCommunityMember | undefined), DefaultError, Prisma.ImportedCommunityMemberCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberCreateArgs, DefaultError, ImportedCommunityMember, true>('ImportedCommunityMember', 'POST', `${endpoint}/importedCommunityMember/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyImportedCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ImportedCommunityMemberCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ImportedCommunityMember', 'POST', `${endpoint}/importedCommunityMember/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.ImportedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findMany`, args, options, fetch);
}

export function useInfiniteFindManyImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.ImportedCommunityMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findMany`, args, options, fetch);
}

export function useSuspenseFindManyImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.ImportedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.ImportedCommunityMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findMany`, args, options, fetch);
}

export function useFindUniqueImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindUniqueArgs, TQueryFnData = Prisma.ImportedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindUniqueArgs, TQueryFnData = Prisma.ImportedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findUnique`, args, options, fetch);
}

export function useFindFirstImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindFirstArgs, TQueryFnData = Prisma.ImportedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberFindFirstArgs, TQueryFnData = Prisma.ImportedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/findFirst`, args, options, fetch);
}

export function useUpdateImportedCommunityMember(options?: Omit<(UseMutationOptions<(ImportedCommunityMember | undefined), DefaultError, Prisma.ImportedCommunityMemberUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberUpdateArgs, DefaultError, ImportedCommunityMember, true>('ImportedCommunityMember', 'PUT', `${endpoint}/importedCommunityMember/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyImportedCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ImportedCommunityMemberUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ImportedCommunityMember', 'PUT', `${endpoint}/importedCommunityMember/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertImportedCommunityMember(options?: Omit<(UseMutationOptions<(ImportedCommunityMember | undefined), DefaultError, Prisma.ImportedCommunityMemberUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberUpsertArgs, DefaultError, ImportedCommunityMember, true>('ImportedCommunityMember', 'POST', `${endpoint}/importedCommunityMember/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteImportedCommunityMember(options?: Omit<(UseMutationOptions<(ImportedCommunityMember | undefined), DefaultError, Prisma.ImportedCommunityMemberDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberDeleteArgs, DefaultError, ImportedCommunityMember, true>('ImportedCommunityMember', 'DELETE', `${endpoint}/importedCommunityMember/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImportedCommunityMember, Prisma.ImportedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyImportedCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ImportedCommunityMemberDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImportedCommunityMemberDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ImportedCommunityMember', 'DELETE', `${endpoint}/importedCommunityMember/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImportedCommunityMemberDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ImportedCommunityMemberDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberAggregateArgs, TQueryFnData = Prisma.GetImportedCommunityMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberAggregateArgs, TQueryFnData = Prisma.GetImportedCommunityMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/aggregate`, args, options, fetch);
}

export function useGroupByImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ImportedCommunityMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.ImportedCommunityMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ImportedCommunityMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ImportedCommunityMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ImportedCommunityMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ImportedCommunityMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ImportedCommunityMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ImportedCommunityMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.ImportedCommunityMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ImportedCommunityMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ImportedCommunityMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ImportedCommunityMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ImportedCommunityMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ImportedCommunityMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/groupBy`, args, options, fetch);
}

export function useCountImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ImportedCommunityMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/count`, args, options, fetch);
}

export function useSuspenseCountImportedCommunityMember<TArgs extends Prisma.ImportedCommunityMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ImportedCommunityMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImportedCommunityMemberCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/count`, args, options, fetch);
}
import type { ImportedCommunityMemberStatus } from '@prisma/client';

export function useCheckImportedCommunityMember<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; status?: ImportedCommunityMemberStatus; createdCommunityMemberId?: string; communityImportJobId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ImportedCommunityMember', `${endpoint}/importedCommunityMember/check`, args, options, fetch);
}
