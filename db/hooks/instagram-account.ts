/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InstagramAccount } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInstagramAccount(options?: Omit<(UseMutationOptions<(InstagramAccount | undefined), DefaultError, Prisma.InstagramAccountCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountCreateArgs, DefaultError, InstagramAccount, true>('InstagramAccount', 'POST', `${endpoint}/instagramAccount/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInstagramAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InstagramAccountCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InstagramAccount', 'POST', `${endpoint}/instagramAccount/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInstagramAccount<TArgs extends Prisma.InstagramAccountFindManyArgs, TQueryFnData = Array<Prisma.InstagramAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInstagramAccount<TArgs extends Prisma.InstagramAccountFindManyArgs, TQueryFnData = Array<Prisma.InstagramAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInstagramAccount<TArgs extends Prisma.InstagramAccountFindManyArgs, TQueryFnData = Array<Prisma.InstagramAccountGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInstagramAccount<TArgs extends Prisma.InstagramAccountFindManyArgs, TQueryFnData = Array<Prisma.InstagramAccountGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findMany`, args, options, fetch);
}

export function useFindUniqueInstagramAccount<TArgs extends Prisma.InstagramAccountFindUniqueArgs, TQueryFnData = Prisma.InstagramAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInstagramAccount<TArgs extends Prisma.InstagramAccountFindUniqueArgs, TQueryFnData = Prisma.InstagramAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findUnique`, args, options, fetch);
}

export function useFindFirstInstagramAccount<TArgs extends Prisma.InstagramAccountFindFirstArgs, TQueryFnData = Prisma.InstagramAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInstagramAccount<TArgs extends Prisma.InstagramAccountFindFirstArgs, TQueryFnData = Prisma.InstagramAccountGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/findFirst`, args, options, fetch);
}

export function useUpdateInstagramAccount(options?: Omit<(UseMutationOptions<(InstagramAccount | undefined), DefaultError, Prisma.InstagramAccountUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountUpdateArgs, DefaultError, InstagramAccount, true>('InstagramAccount', 'PUT', `${endpoint}/instagramAccount/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInstagramAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InstagramAccountUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InstagramAccount', 'PUT', `${endpoint}/instagramAccount/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInstagramAccount(options?: Omit<(UseMutationOptions<(InstagramAccount | undefined), DefaultError, Prisma.InstagramAccountUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountUpsertArgs, DefaultError, InstagramAccount, true>('InstagramAccount', 'POST', `${endpoint}/instagramAccount/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInstagramAccount(options?: Omit<(UseMutationOptions<(InstagramAccount | undefined), DefaultError, Prisma.InstagramAccountDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountDeleteArgs, DefaultError, InstagramAccount, true>('InstagramAccount', 'DELETE', `${endpoint}/instagramAccount/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InstagramAccount, Prisma.InstagramAccountGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInstagramAccount(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InstagramAccountDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InstagramAccountDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InstagramAccount', 'DELETE', `${endpoint}/instagramAccount/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InstagramAccountDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InstagramAccountDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InstagramAccountDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInstagramAccount<TArgs extends Prisma.InstagramAccountAggregateArgs, TQueryFnData = Prisma.GetInstagramAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInstagramAccount<TArgs extends Prisma.InstagramAccountAggregateArgs, TQueryFnData = Prisma.GetInstagramAccountAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/aggregate`, args, options, fetch);
}

export function useGroupByInstagramAccount<TArgs extends Prisma.InstagramAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InstagramAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.InstagramAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InstagramAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InstagramAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InstagramAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInstagramAccount<TArgs extends Prisma.InstagramAccountGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InstagramAccountGroupByArgs['orderBy'] } : { orderBy?: Prisma.InstagramAccountGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InstagramAccountGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InstagramAccountGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramAccountGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InstagramAccountGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InstagramAccountGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/groupBy`, args, options, fetch);
}

export function useCountInstagramAccount<TArgs extends Prisma.InstagramAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InstagramAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/count`, args, options, fetch);
}

export function useSuspenseCountInstagramAccount<TArgs extends Prisma.InstagramAccountCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InstagramAccountCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InstagramAccountCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InstagramAccount', `${endpoint}/instagramAccount/count`, args, options, fetch);
}

export function useCheckInstagramAccount<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; isReauthRequired?: boolean; instagramBusinessId?: string; facebookPageId?: string; facebookPageName?: string; facebookAccountId?: string; userAccessToken?: string; pageAccessToken?: string; username?: string; fullName?: string; profilePictureUri?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InstagramAccount', `${endpoint}/instagramAccount/check`, args, options, fetch);
}
