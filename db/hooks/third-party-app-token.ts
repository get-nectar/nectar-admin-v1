/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ThirdPartyAppToken } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateThirdPartyAppToken(options?: Omit<(UseMutationOptions<(ThirdPartyAppToken | undefined), DefaultError, Prisma.ThirdPartyAppTokenCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenCreateArgs, DefaultError, ThirdPartyAppToken, true>('ThirdPartyAppToken', 'POST', `${endpoint}/thirdPartyAppToken/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyThirdPartyAppToken(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ThirdPartyAppTokenCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ThirdPartyAppToken', 'POST', `${endpoint}/thirdPartyAppToken/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppTokenGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findMany`, args, options, fetch);
}

export function useInfiniteFindManyThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppTokenGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findMany`, args, options, fetch);
}

export function useSuspenseFindManyThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppTokenGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindManyArgs, TQueryFnData = Array<Prisma.ThirdPartyAppTokenGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findMany`, args, options, fetch);
}

export function useFindUniqueThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindUniqueArgs, TQueryFnData = Prisma.ThirdPartyAppTokenGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindUniqueArgs, TQueryFnData = Prisma.ThirdPartyAppTokenGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findUnique`, args, options, fetch);
}

export function useFindFirstThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindFirstArgs, TQueryFnData = Prisma.ThirdPartyAppTokenGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenFindFirstArgs, TQueryFnData = Prisma.ThirdPartyAppTokenGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/findFirst`, args, options, fetch);
}

export function useUpdateThirdPartyAppToken(options?: Omit<(UseMutationOptions<(ThirdPartyAppToken | undefined), DefaultError, Prisma.ThirdPartyAppTokenUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenUpdateArgs, DefaultError, ThirdPartyAppToken, true>('ThirdPartyAppToken', 'PUT', `${endpoint}/thirdPartyAppToken/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyThirdPartyAppToken(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ThirdPartyAppTokenUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ThirdPartyAppToken', 'PUT', `${endpoint}/thirdPartyAppToken/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertThirdPartyAppToken(options?: Omit<(UseMutationOptions<(ThirdPartyAppToken | undefined), DefaultError, Prisma.ThirdPartyAppTokenUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenUpsertArgs, DefaultError, ThirdPartyAppToken, true>('ThirdPartyAppToken', 'POST', `${endpoint}/thirdPartyAppToken/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteThirdPartyAppToken(options?: Omit<(UseMutationOptions<(ThirdPartyAppToken | undefined), DefaultError, Prisma.ThirdPartyAppTokenDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenDeleteArgs, DefaultError, ThirdPartyAppToken, true>('ThirdPartyAppToken', 'DELETE', `${endpoint}/thirdPartyAppToken/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ThirdPartyAppToken, Prisma.ThirdPartyAppTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyThirdPartyAppToken(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ThirdPartyAppTokenDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ThirdPartyAppTokenDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ThirdPartyAppToken', 'DELETE', `${endpoint}/thirdPartyAppToken/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ThirdPartyAppTokenDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ThirdPartyAppTokenDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenAggregateArgs, TQueryFnData = Prisma.GetThirdPartyAppTokenAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenAggregateArgs, TQueryFnData = Prisma.GetThirdPartyAppTokenAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/aggregate`, args, options, fetch);
}

export function useGroupByThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ThirdPartyAppTokenGroupByArgs['orderBy'] } : { orderBy?: Prisma.ThirdPartyAppTokenGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ThirdPartyAppTokenGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ThirdPartyAppTokenGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppTokenGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppTokenGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ThirdPartyAppTokenGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ThirdPartyAppTokenGroupByArgs['orderBy'] } : { orderBy?: Prisma.ThirdPartyAppTokenGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ThirdPartyAppTokenGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ThirdPartyAppTokenGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppTokenGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ThirdPartyAppTokenGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ThirdPartyAppTokenGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/groupBy`, args, options, fetch);
}

export function useCountThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ThirdPartyAppTokenCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/count`, args, options, fetch);
}

export function useSuspenseCountThirdPartyAppToken<TArgs extends Prisma.ThirdPartyAppTokenCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ThirdPartyAppTokenCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ThirdPartyAppTokenCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/count`, args, options, fetch);
}
import type { ThirdPartyAppAccessScope } from '@prisma/client';

export function useCheckThirdPartyAppToken<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; accessToken?: string; refreshToken?: string; tokenScope?: ThirdPartyAppAccessScope; workspaceId?: string; thirdPartyAppId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ThirdPartyAppToken', `${endpoint}/thirdPartyAppToken/check`, args, options, fetch);
}
