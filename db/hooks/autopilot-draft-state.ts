/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AutopilotDraftState } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAutopilotDraftState(options?: Omit<(UseMutationOptions<(AutopilotDraftState | undefined), DefaultError, Prisma.AutopilotDraftStateCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateCreateArgs, DefaultError, AutopilotDraftState, true>('AutopilotDraftState', 'POST', `${endpoint}/autopilotDraftState/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAutopilotDraftState(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutopilotDraftStateCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AutopilotDraftState', 'POST', `${endpoint}/autopilotDraftState/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindManyArgs, TQueryFnData = Array<Prisma.AutopilotDraftStateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindManyArgs, TQueryFnData = Array<Prisma.AutopilotDraftStateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindManyArgs, TQueryFnData = Array<Prisma.AutopilotDraftStateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindManyArgs, TQueryFnData = Array<Prisma.AutopilotDraftStateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findMany`, args, options, fetch);
}

export function useFindUniqueAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindUniqueArgs, TQueryFnData = Prisma.AutopilotDraftStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindUniqueArgs, TQueryFnData = Prisma.AutopilotDraftStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findUnique`, args, options, fetch);
}

export function useFindFirstAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindFirstArgs, TQueryFnData = Prisma.AutopilotDraftStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateFindFirstArgs, TQueryFnData = Prisma.AutopilotDraftStateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/findFirst`, args, options, fetch);
}

export function useUpdateAutopilotDraftState(options?: Omit<(UseMutationOptions<(AutopilotDraftState | undefined), DefaultError, Prisma.AutopilotDraftStateUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateUpdateArgs, DefaultError, AutopilotDraftState, true>('AutopilotDraftState', 'PUT', `${endpoint}/autopilotDraftState/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAutopilotDraftState(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutopilotDraftStateUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AutopilotDraftState', 'PUT', `${endpoint}/autopilotDraftState/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAutopilotDraftState(options?: Omit<(UseMutationOptions<(AutopilotDraftState | undefined), DefaultError, Prisma.AutopilotDraftStateUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateUpsertArgs, DefaultError, AutopilotDraftState, true>('AutopilotDraftState', 'POST', `${endpoint}/autopilotDraftState/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAutopilotDraftState(options?: Omit<(UseMutationOptions<(AutopilotDraftState | undefined), DefaultError, Prisma.AutopilotDraftStateDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateDeleteArgs, DefaultError, AutopilotDraftState, true>('AutopilotDraftState', 'DELETE', `${endpoint}/autopilotDraftState/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AutopilotDraftState, Prisma.AutopilotDraftStateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAutopilotDraftState(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AutopilotDraftStateDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AutopilotDraftStateDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AutopilotDraftState', 'DELETE', `${endpoint}/autopilotDraftState/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AutopilotDraftStateDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AutopilotDraftStateDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AutopilotDraftStateDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateAggregateArgs, TQueryFnData = Prisma.GetAutopilotDraftStateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateAggregateArgs, TQueryFnData = Prisma.GetAutopilotDraftStateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/aggregate`, args, options, fetch);
}

export function useGroupByAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AutopilotDraftStateGroupByArgs['orderBy'] } : { orderBy?: Prisma.AutopilotDraftStateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AutopilotDraftStateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AutopilotDraftStateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AutopilotDraftStateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AutopilotDraftStateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AutopilotDraftStateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AutopilotDraftStateGroupByArgs['orderBy'] } : { orderBy?: Prisma.AutopilotDraftStateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AutopilotDraftStateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AutopilotDraftStateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AutopilotDraftStateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AutopilotDraftStateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AutopilotDraftStateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/groupBy`, args, options, fetch);
}

export function useCountAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AutopilotDraftStateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/count`, args, options, fetch);
}

export function useSuspenseCountAutopilotDraftState<TArgs extends Prisma.AutopilotDraftStateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AutopilotDraftStateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AutopilotDraftStateCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/count`, args, options, fetch);
}
import type { AutopilotDraftStatus } from '@prisma/client';

export function useCheckAutopilotDraftState<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; commentId?: string; messageId?: string; originalMessage?: string; editedMessage?: string; status?: AutopilotDraftStatus; intentId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AutopilotDraftState', `${endpoint}/autopilotDraftState/check`, args, options, fetch);
}
