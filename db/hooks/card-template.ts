/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CardTemplate } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCardTemplate(options?: Omit<(UseMutationOptions<(CardTemplate | undefined), DefaultError, Prisma.CardTemplateCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateCreateArgs, DefaultError, CardTemplate, true>('CardTemplate', 'POST', `${endpoint}/cardTemplate/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCardTemplate(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CardTemplateCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CardTemplate', 'POST', `${endpoint}/cardTemplate/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCardTemplate<TArgs extends Prisma.CardTemplateFindManyArgs, TQueryFnData = Array<Prisma.CardTemplateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCardTemplate<TArgs extends Prisma.CardTemplateFindManyArgs, TQueryFnData = Array<Prisma.CardTemplateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCardTemplate<TArgs extends Prisma.CardTemplateFindManyArgs, TQueryFnData = Array<Prisma.CardTemplateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCardTemplate<TArgs extends Prisma.CardTemplateFindManyArgs, TQueryFnData = Array<Prisma.CardTemplateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findMany`, args, options, fetch);
}

export function useFindUniqueCardTemplate<TArgs extends Prisma.CardTemplateFindUniqueArgs, TQueryFnData = Prisma.CardTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCardTemplate<TArgs extends Prisma.CardTemplateFindUniqueArgs, TQueryFnData = Prisma.CardTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findUnique`, args, options, fetch);
}

export function useFindFirstCardTemplate<TArgs extends Prisma.CardTemplateFindFirstArgs, TQueryFnData = Prisma.CardTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCardTemplate<TArgs extends Prisma.CardTemplateFindFirstArgs, TQueryFnData = Prisma.CardTemplateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/findFirst`, args, options, fetch);
}

export function useUpdateCardTemplate(options?: Omit<(UseMutationOptions<(CardTemplate | undefined), DefaultError, Prisma.CardTemplateUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateUpdateArgs, DefaultError, CardTemplate, true>('CardTemplate', 'PUT', `${endpoint}/cardTemplate/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCardTemplate(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CardTemplateUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CardTemplate', 'PUT', `${endpoint}/cardTemplate/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCardTemplate(options?: Omit<(UseMutationOptions<(CardTemplate | undefined), DefaultError, Prisma.CardTemplateUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateUpsertArgs, DefaultError, CardTemplate, true>('CardTemplate', 'POST', `${endpoint}/cardTemplate/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCardTemplate(options?: Omit<(UseMutationOptions<(CardTemplate | undefined), DefaultError, Prisma.CardTemplateDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateDeleteArgs, DefaultError, CardTemplate, true>('CardTemplate', 'DELETE', `${endpoint}/cardTemplate/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CardTemplate, Prisma.CardTemplateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCardTemplate(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CardTemplateDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CardTemplateDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CardTemplate', 'DELETE', `${endpoint}/cardTemplate/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CardTemplateDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CardTemplateDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CardTemplateDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCardTemplate<TArgs extends Prisma.CardTemplateAggregateArgs, TQueryFnData = Prisma.GetCardTemplateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CardTemplateAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCardTemplate<TArgs extends Prisma.CardTemplateAggregateArgs, TQueryFnData = Prisma.GetCardTemplateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CardTemplateAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/aggregate`, args, options, fetch);
}

export function useGroupByCardTemplate<TArgs extends Prisma.CardTemplateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CardTemplateGroupByArgs['orderBy'] } : { orderBy?: Prisma.CardTemplateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CardTemplateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CardTemplateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CardTemplateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CardTemplateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CardTemplateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCardTemplate<TArgs extends Prisma.CardTemplateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CardTemplateGroupByArgs['orderBy'] } : { orderBy?: Prisma.CardTemplateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CardTemplateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CardTemplateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CardTemplateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CardTemplateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CardTemplateGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/groupBy`, args, options, fetch);
}

export function useCountCardTemplate<TArgs extends Prisma.CardTemplateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CardTemplateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/count`, args, options, fetch);
}

export function useSuspenseCountCardTemplate<TArgs extends Prisma.CardTemplateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CardTemplateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CardTemplateCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CardTemplate', `${endpoint}/cardTemplate/count`, args, options, fetch);
}
import type { CardTemplateType } from '@prisma/client';

export function useCheckCardTemplate<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; description?: string; ctaUrl?: string; ctaText?: string; pictureSrc?: string; type?: CardTemplateType; shopifyResourceId?: string; workspaceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CardTemplate', `${endpoint}/cardTemplate/check`, args, options, fetch);
}
