/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, LimitedCommunityMember } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateLimitedCommunityMember(options?: Omit<(UseMutationOptions<(LimitedCommunityMember | undefined), DefaultError, Prisma.LimitedCommunityMemberCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberCreateArgs, DefaultError, LimitedCommunityMember, true>('LimitedCommunityMember', 'POST', `${endpoint}/limitedCommunityMember/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyLimitedCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LimitedCommunityMemberCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('LimitedCommunityMember', 'POST', `${endpoint}/limitedCommunityMember/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.LimitedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findMany`, args, options, fetch);
}

export function useInfiniteFindManyLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.LimitedCommunityMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findMany`, args, options, fetch);
}

export function useSuspenseFindManyLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.LimitedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindManyArgs, TQueryFnData = Array<Prisma.LimitedCommunityMemberGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findMany`, args, options, fetch);
}

export function useFindUniqueLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindUniqueArgs, TQueryFnData = Prisma.LimitedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindUniqueArgs, TQueryFnData = Prisma.LimitedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findUnique`, args, options, fetch);
}

export function useFindFirstLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindFirstArgs, TQueryFnData = Prisma.LimitedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberFindFirstArgs, TQueryFnData = Prisma.LimitedCommunityMemberGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/findFirst`, args, options, fetch);
}

export function useUpdateLimitedCommunityMember(options?: Omit<(UseMutationOptions<(LimitedCommunityMember | undefined), DefaultError, Prisma.LimitedCommunityMemberUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberUpdateArgs, DefaultError, LimitedCommunityMember, true>('LimitedCommunityMember', 'PUT', `${endpoint}/limitedCommunityMember/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyLimitedCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LimitedCommunityMemberUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('LimitedCommunityMember', 'PUT', `${endpoint}/limitedCommunityMember/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertLimitedCommunityMember(options?: Omit<(UseMutationOptions<(LimitedCommunityMember | undefined), DefaultError, Prisma.LimitedCommunityMemberUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberUpsertArgs, DefaultError, LimitedCommunityMember, true>('LimitedCommunityMember', 'POST', `${endpoint}/limitedCommunityMember/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteLimitedCommunityMember(options?: Omit<(UseMutationOptions<(LimitedCommunityMember | undefined), DefaultError, Prisma.LimitedCommunityMemberDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberDeleteArgs, DefaultError, LimitedCommunityMember, true>('LimitedCommunityMember', 'DELETE', `${endpoint}/limitedCommunityMember/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, LimitedCommunityMember, Prisma.LimitedCommunityMemberGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyLimitedCommunityMember(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.LimitedCommunityMemberDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.LimitedCommunityMemberDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('LimitedCommunityMember', 'DELETE', `${endpoint}/limitedCommunityMember/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.LimitedCommunityMemberDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.LimitedCommunityMemberDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberAggregateArgs, TQueryFnData = Prisma.GetLimitedCommunityMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberAggregateArgs, TQueryFnData = Prisma.GetLimitedCommunityMemberAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/aggregate`, args, options, fetch);
}

export function useGroupByLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LimitedCommunityMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.LimitedCommunityMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LimitedCommunityMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.LimitedCommunityMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.LimitedCommunityMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.LimitedCommunityMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LimitedCommunityMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.LimitedCommunityMemberGroupByArgs['orderBy'] } : { orderBy?: Prisma.LimitedCommunityMemberGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.LimitedCommunityMemberGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.LimitedCommunityMemberGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.LimitedCommunityMemberGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.LimitedCommunityMemberGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.LimitedCommunityMemberGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/groupBy`, args, options, fetch);
}

export function useCountLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LimitedCommunityMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/count`, args, options, fetch);
}

export function useSuspenseCountLimitedCommunityMember<TArgs extends Prisma.LimitedCommunityMemberCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.LimitedCommunityMemberCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.LimitedCommunityMemberCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/count`, args, options, fetch);
}
import type { Platform } from '@prisma/client';

export function useCheckLimitedCommunityMember<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; workspaceId?: string; identifier?: string; displayName?: string; platform?: Platform; profilePictureUri?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('LimitedCommunityMember', `${endpoint}/limitedCommunityMember/check`, args, options, fetch);
}
