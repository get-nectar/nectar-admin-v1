/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, InboxFeedProfile } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateInboxFeedProfile(options?: Omit<(UseMutationOptions<(InboxFeedProfile | undefined), DefaultError, Prisma.InboxFeedProfileCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileCreateArgs, DefaultError, InboxFeedProfile, true>('InboxFeedProfile', 'POST', `${endpoint}/inboxFeedProfile/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyInboxFeedProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxFeedProfileCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxFeedProfile', 'POST', `${endpoint}/inboxFeedProfile/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedProfileGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findMany`, args, options, fetch);
}

export function useInfiniteFindManyInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedProfileGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findMany`, args, options, fetch);
}

export function useSuspenseFindManyInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedProfileGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindManyArgs, TQueryFnData = Array<Prisma.InboxFeedProfileGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findMany`, args, options, fetch);
}

export function useFindUniqueInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindUniqueArgs, TQueryFnData = Prisma.InboxFeedProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindUniqueArgs, TQueryFnData = Prisma.InboxFeedProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findUnique`, args, options, fetch);
}

export function useFindFirstInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindFirstArgs, TQueryFnData = Prisma.InboxFeedProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileFindFirstArgs, TQueryFnData = Prisma.InboxFeedProfileGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/findFirst`, args, options, fetch);
}

export function useUpdateInboxFeedProfile(options?: Omit<(UseMutationOptions<(InboxFeedProfile | undefined), DefaultError, Prisma.InboxFeedProfileUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileUpdateArgs, DefaultError, InboxFeedProfile, true>('InboxFeedProfile', 'PUT', `${endpoint}/inboxFeedProfile/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyInboxFeedProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxFeedProfileUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxFeedProfile', 'PUT', `${endpoint}/inboxFeedProfile/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertInboxFeedProfile(options?: Omit<(UseMutationOptions<(InboxFeedProfile | undefined), DefaultError, Prisma.InboxFeedProfileUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileUpsertArgs, DefaultError, InboxFeedProfile, true>('InboxFeedProfile', 'POST', `${endpoint}/inboxFeedProfile/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteInboxFeedProfile(options?: Omit<(UseMutationOptions<(InboxFeedProfile | undefined), DefaultError, Prisma.InboxFeedProfileDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileDeleteArgs, DefaultError, InboxFeedProfile, true>('InboxFeedProfile', 'DELETE', `${endpoint}/inboxFeedProfile/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, InboxFeedProfile, Prisma.InboxFeedProfileGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyInboxFeedProfile(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.InboxFeedProfileDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.InboxFeedProfileDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('InboxFeedProfile', 'DELETE', `${endpoint}/inboxFeedProfile/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.InboxFeedProfileDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.InboxFeedProfileDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.InboxFeedProfileDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileAggregateArgs, TQueryFnData = Prisma.GetInboxFeedProfileAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileAggregateArgs, TQueryFnData = Prisma.GetInboxFeedProfileAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/aggregate`, args, options, fetch);
}

export function useGroupByInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxFeedProfileGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxFeedProfileGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxFeedProfileGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxFeedProfileGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedProfileGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedProfileGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxFeedProfileGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.InboxFeedProfileGroupByArgs['orderBy'] } : { orderBy?: Prisma.InboxFeedProfileGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.InboxFeedProfileGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.InboxFeedProfileGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedProfileGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.InboxFeedProfileGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.InboxFeedProfileGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/groupBy`, args, options, fetch);
}

export function useCountInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxFeedProfileCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/count`, args, options, fetch);
}

export function useSuspenseCountInboxFeedProfile<TArgs extends Prisma.InboxFeedProfileCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.InboxFeedProfileCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.InboxFeedProfileCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/count`, args, options, fetch);
}
import type { InboxFeedProfileType } from '@prisma/client';

export function useCheckInboxFeedProfile<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; type?: InboxFeedProfileType; communityMemberId?: string; limitedCommunityMemberId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('InboxFeedProfile', `${endpoint}/inboxFeedProfile/check`, args, options, fetch);
}
