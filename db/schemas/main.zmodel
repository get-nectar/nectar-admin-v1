model User {
  id                String            @id @unique
  email             String            @unique
  name              String?
  profilePictureUri String?

  createdAt         DateTime          @db.Timestamptz(6) @default(now())
  updatedAt         DateTime          @db.Timestamptz(6) @default(now()) @updatedAt

  mfaFactors        MFAFactor[]

  registrationStage RegistrationStage @default(NONE)

  createdWorkspaces Workspace[]
  workspaces        WorkspaceUser[]
  activeWorkspace   WorkspaceUser?    @relation("ActiveWorkspace")

  @@allow('create', true)
  @@allow('all', auth().id == this.id)
  @@allow('read', workspaces?[workspace.members?[auth().id == userId]])
  @@allow('update', workspaces?[workspace.members?[auth().id == userId && role == 'ADMIN']])
}

model Metric {
  id                    String                @id @default(uuid())
  createdAt             DateTime              @db.Timestamptz(6) @default(now())
  updatedAt             DateTime              @db.Timestamptz(6) @default(now()) @updatedAt

  workspaceId           String
  workspace             Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  platform              Platform

  instagramAccountId    String?
  instagramAccount      InstagramAccount?     @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  facebookPageAccountId String?
  facebookPageAccount   FacebookPageAccount?  @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  tiktokAccountId       String?
  tiktokAccount         TikTokAccount?        @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  displayFormat         MetricDisplayFormat
  name                  MetricType
  aggregationType       MetricAggregationType
  value                 Float
  calculatedTimestamp   DateTime              @db.Timestamptz(6)
  timePeriod            MetricTimePeriod

  @@unique([workspaceId, instagramAccountId, name, calculatedTimestamp, timePeriod])
  @@unique([workspaceId, facebookPageAccountId, name, calculatedTimestamp, timePeriod])
  @@unique([workspaceId, tiktokAccountId, name, calculatedTimestamp, timePeriod])
  @@allow('all', true)
}

model JourneyMetric {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamptz(6)

  journeyId           String
  journey             Journey               @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  value               Float
  name                JourneyMetricType
  aggregationType     MetricAggregationType
  displayFormat       MetricDisplayFormat
  calculatedTimestamp DateTime              @db.Timestamptz(6)
  timePeriod          MetricTimePeriod

  @@unique([journeyId, name, calculatedTimestamp, timePeriod])
  @@allow('all', true)
}

model AgentPerformanceMetric {
  id                  String                     @id @default(uuid())
  createdAt           DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                   @default(now()) @updatedAt @db.Timestamptz(6)

  workspaceId         String
  workspace           Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  name                AgentPerformanceMetricType
  displayFormat       MetricDisplayFormat
  aggregationType     MetricAggregationType
  timePeriod          MetricTimePeriod

  value               Float
  calculatedTimestamp DateTime                   @db.Timestamptz(6)

  @@unique([workspaceId, name, calculatedTimestamp, timePeriod])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum MetricTimePeriod {
  HOUR
  DAY
  WEEK
  MONTH // 28 days 
  LIFETIME
  BUSINESS_HOURS
}

enum TimePeriodUnit {
  HOUR
  DAY
  WEEK
  MONTH
  LIFETIME
}

enum MetricDisplayFormat {
  NUMBER
  PERCENTAGE
  CURRENCY
}

enum MetricAggregationType {
  COUNT
  SUM
  AVERAGE
}

enum MetricType {
  POST_LIKES
  POST_COMMENTS
  DIRECT_MESSAGE
  CONVERSATION_RESPONSE_RATE
  COMMENT_RESPONSE_RATE
  TAGGED_AND_MENTIONED
  ACTIVE_COMMUNITY_MEMBERS
  CUSTOMER_COMMUNITY_MEMBERS
  PIXEL_EVENT_REVENUE
  COMMUNITY_REVENUE
  ALL_TIME_REVENUE
  POSITIVE_SENTIMENT
  NEGATIVE_SENTIMENT
  NEUTRAL_SENTIMENT
}

enum JourneyMetricType {
  TOTAL_REVENUE
  MESSAGES_SENT
  COMMENTS_SENT
  CLICKTHROUGH_RATE
  CONVERSION_RATE
  DM_REPLIES
  COMMENT_REPLIES
  ENGAGED_CUSTOMERS
  ORDER_COUNT
  AVERAGE_ORDER_VALUE
  UNIQUE_STARTS
  UNIQUE_COMPLETIONS
  MESSAGES_OPENED
  DATA_COLLECTED
}

enum AgentPerformanceMetricType {
  // Sent metrics
  DMS_SENT
  COMMENTS_SENT

  // Resolved metrics
  CONVERSATIONS_RESOLVED
  COMMENTS_RESOLVED

  // Attributable Revenue metrics
  USER_SALES

  // Messages received metrics
  INSTAGRAM_MESSAGES_RECEIVED
  FACEBOOK_MESSAGES_RECEIVED
  TIKTOK_MESSAGES_RECEIVED

  // Messages replied metrics
  INSTAGRAM_MESSAGES_REPLIED
  FACEBOOK_MESSAGES_REPLIED
  TIKTOK_MESSAGES_REPLIED

  // Messages closed metrics
  INSTAGRAM_MESSAGES_CLOSED
  FACEBOOK_MESSAGES_CLOSED
  TIKTOK_MESSAGES_CLOSED
}



enum AccessLevel {
  NONE
  VIEW
  EDIT
}

enum TabType {
  DASHBOARD
  AGENT_PERFORMANCE
  INBOX_RULES
  INBOX
  ALL_BLASTS
  COMPOSE_NEW_BLAST
  ALL_FLAGGED
  FLAGGED_COMMENTS
  FLAGGED_DMS
  ALL_COMMENTS
  MODERATION_SETTINGS
  SOCIAL_CONTENT
  JOURNEYS
  NEW_JOURNEY
  COMMUNITY
  PERSONAS
  CHANNEL_SETTINGS
  HUMAN_ESCALATION
  ANALYTICS
  RESPONSES
  DATA_SOURCES
  AI_SUGGESTIONS
  INTEGRATIONS
  WORKSPACE
  PUBLISHING
  AUTOPILOT_METRICS
  REPORTS
  COMMUNITY_LISTENING
}


enum RegistrationStage {
  NONE
  WORKSPACE
  META
  PENDING
  COMPLETE
}

enum WorkspaceUserStatus {
  ACTIVE
  INACTIVE
  VACATION
}

model WorkspaceUserActiveTime {
  id                  String        @id @default(uuid())

  timestamp           DateTime      @default(now())

  workspaceUserId     String
  workspaceUser       WorkspaceUser @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  activeTimeInSeconds Int

  @@allow('create', true)
  @@allow('all', workspaceUser.workspace.members?[auth().id == userId])
}

model WorkspacePageAccess {
  id           String              @id @default(uuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  tab          TabType
  accessLevel  AccessLevel
  accessRoleId String

  accessRole   WorkspaceAccessRole @relation(fields: [accessRoleId], references: [id], onDelete: Cascade)

  @@unique([accessRoleId, tab])
  @@allow('read', accessRole.workspace.members?[auth().id == userId])
  @@allow('all', accessRole.workspace.members?[auth().id == userId && role == 'ADMIN'])
}

model WorkspaceAccessRole {
  id             String                @id @default(uuid())

  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  name           String
  description    String?
  workspaceId    String
  isDefault      Boolean?              @default(false)

  workspace      Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceUsers WorkspaceUser[]
  permissions    WorkspacePageAccess[]

  @@unique([workspaceId, name])
  @@allow('read', workspace.members?[auth().id == userId])
  @@allow('all', workspace.members?[auth().id == userId && role == 'ADMIN'])
}

model WorkspaceUser {
  id                             String                       @id @default(uuid())
  createdAt                      DateTime                     @default(now())
  updatedAt                      DateTime                     @default(now()) @updatedAt

  workspaceId                    String
  workspace                      Workspace                    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId                         String
  user                           User                         @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeUserId                   String?                      @unique
  activeUser                     User?                        @relation("ActiveWorkspace", fields: [activeUserId], references: [id], onDelete: SetNull)

  role                           WorkspaceRole
  savedViews                     View[]
  notes                          Note[]
  inboxViewSettings              Json?
  communityColumnSettings        Json?
  escalationDelegate             PersonaEscalationSetting[]  // Deprecated - use personaEscalationDelegate instead
  personaEscalationDelegate      AiPersonaEscalationSetting[]
  assignedInboxItems             InboxFeedItem[]
  defaultView                    DefaultView[]
  inboxItemReadStates            InboxFeedItemRead[]
  sentMessages                   Message[]
  sentComments                   Comment[]
  analyticViewConfig             Json?
  status                         WorkspaceUserStatus?         @default(ACTIVE)

  primaryParticipantActivities   ConversationEventActivity[]  @relation("PrimaryParticipant")
  secondaryParticipantActivities ConversationEventActivity[]  @relation("SecondaryParticipant")

  createdJourneys                Journey[]                    @relation("JourneyCreator")
  updatedJourneys                Journey[]                    @relation("JourneyUpdater")

  createdInboxRules              InboxRule[]                  @relation("RuleCreator")
  updatedInboxRules              InboxRule[]                  @relation("RuleUpdater")

  commentsMarkedAsDone           Comment[]                    @relation("MarkedAsDoneByUser")

  userViewPins                   WorkspaceUserViewPinState[]
  communityMemberBlockState      CommunityMemberBlockState[]

  messageBlastCampaigns          MessageBlastCampaign[]

  activityLogs                   WorkspaceUserActivityLog[]

  activeTime                     WorkspaceUserActiveTime[]

  generatedLinks                 Link[]

  automationMetadata             AutomationMetadata[]

  contentPublishingMetadata      ContentPublishingMetadata[]

  accessRoleId                   String?
  accessRole                     WorkspaceAccessRole?         @relation(fields: [accessRoleId], references: [id], onDelete: SetNull)

  triggeredJourneySessions       JourneySession[]
  triggeredJourneySessionsV2     JourneySessionV2[]

  metricsRefreshRequests         MetricsRefreshRequests[]

  labelAssignments               LabelAssignmentMetadata[]

  slackUserAccounts              SlackUserAccount[]
  notificationSettings           NotificationSetting[]

  @@unique([workspaceId, userId])
  @@allow('create', true)
  @@allow('all', auth().id == this.userId)
  @@allow('all', auth().id == this.workspace.ownerId)
  @@allow('all', workspace.members?[auth().id == userId] && this.role != "INTERNAL")
}


enum WorkspaceUserActivityLogAction {
  PAGE_LOAD
  MOUSE_MOVE
  KEY_DOWN
  MOUSE_DOWN
}

model WorkspaceUserActivityLog {
  id              String                         @id @default(uuid())

  createdAt       DateTime                       @default(now())

  workspaceUserId String
  workspaceUser   WorkspaceUser                  @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  action          WorkspaceUserActivityLogAction

  pagePathname    String


  @@allow('create', true)
  @@allow('all', workspaceUser.workspace.members?[auth().id == userId])
}

enum WorkspaceRole {
  INTERNAL_ADMIN
  INTERNAL
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum IntentChannel {
  ALL
  DM
  COMMENT
}

enum MetricsRefreshRequestEntityType {
  POST_METRICS
}

model MetricsRefreshRequests {
  id              String                          @id @default(uuid())
  createdAt       DateTime                        @default(now())
  updatedAt       DateTime                        @default(now()) @updatedAt

  timestamp       DateTime                        @default(now())

  workspaceId     String
  workspace       Workspace                       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workspaceUserId String
  workspaceUser   WorkspaceUser                   @relation(fields: [workspaceUserId], references: [id], onDelete: SetNull)

  entityType      MetricsRefreshRequestEntityType

  @@allow('create', true)
}


model Workspace {
  id                          String                                @id @default(uuid())
  createdAt                   DateTime                              @default(now())
  updatedAt                   DateTime                              @default(now()) @updatedAt

  companyName                 String                                @length(min: 1)
  industry                    Industry
  ownerId                     String
  shortCode                   String                                @unique @default(cuid())
  teamSize                    Size
  logoUri                     String?
  invitedEmails               Json?
  shortLinkDomainName         String?

  owner                       User                                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members                     WorkspaceUser[]

  communityFields             CustomField[]
  communityMember             CommunityMember[]
  limitedCommunityMember      LimitedCommunityMember[]

  instagramAccount            InstagramAccount[]
  facebookPageAccount         FacebookPageAccount[]
  metaAdAccount               MetaAdAccount[]
  shopifyAccount              ShopifyAccount[]
  tiktokAccount               TikTokAccount[]

  knowledgeBase               KnowledgeBase?
  persona                     Persona[]  // Deprecated - use aiPersona instead
  aiPersona                   AiPersona[]
  personaConfig               PersonaConfig?

  customLabels                Label[]

  intents                     Intent[]
  intentCategory              IntentCategory[]
  responseJourney             ResponseJourney[]
  suggestedIntents            SuggestedIntent[]
  trackedTopics               TrackedTopic[]

  savedViews                  View[]
  metrics                     Metric[]
  agentPerformanceMetrics     AgentPerformanceMetric[]
  links                       Link[]
  recentActivity              RecentActivity[]

  insight                     Insight[]
  insightGroup                InsightGroup[]
  insightCategory             InsightCategory[]
  insightClusterPendingItems  InsightClusterPendingItem[]

  llmAnalysisMetadata         LLMAnalysisMetadata[]

  internalMetadata            WorkspaceInternalMetadata?

  journeys                    Journey[]

  moderatedItems              ModeratedItem[]

  communityMemberEmails       CommunityMemberEmail[]
  communityMemberPhoneNumbers CommunityMemberPhoneNumber[]

  communityImportJobs         CommunityImportJob[]

  autopilotDraftState         AutopilotDraftState[]
  cardTemplates               CardTemplate[]

  klaviyoAccount              KlaviyoAccount[]

  inboxRules                  InboxRule[]

  blastTemplates              BlastTemplate[]
  blastTemplateCategories     BlastTemplateCategory[]

  automationMetadata          AutomationMetadata[]

  workingHours                WorkingHours?

  instagramProfiles           CommunityMemberInstagramProfileData[]
  facebookProfiles            CommunityMemberFacebookProfileData[]
  tiktokProfiles              CommunityMemberTiktokProfileData[]

  conversations               Conversation[]
  comments                    Comment[]
  messages                    Message[]

  accessRoles                 WorkspaceAccessRole[]

  thirdPartyApps              ThirdPartyApp[]

  thirdPartyAppTokens         ThirdPartyAppToken[]

  webhookSubscriptions        WebhookSubscription[]

  keywords                    Keyword[]

  mentionedKeywords           KeywordMention[]

  sentimentAnalysis           SentimentAnalysis[]

  socialListeningTopics       SocialListeningTopic[]

  messageReactions            MessageReaction[]
  isMFAEnabled                Boolean?                              @default(false)

  inboxSettings               InboxSetting[]

  productMentions             ProductMention[]

  content                     Content[]

  metricsRefreshRequests      MetricsRefreshRequests[]

  automationPreviews          AutomationPreview[]

  automationPreviewSessions   AutomationPreviewSession[]

  prompts                     PromptTracker[]

  slackWorkspaces             SlackWorkspace[]
  slackUserAccounts           SlackUserAccount[]
  notificationSettings        NotificationSetting[]

  customProducts              CustomProduct[]
  productTrackings            ProductTracking[]

  // TODO move to field-level policies
  @@allow('all', true)
}

model InboxSetting {
  id          String           @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime         @db.Timestamptz(6) @default(now())
  updatedAt   DateTime         @db.Timestamptz(6) @default(now()) @updatedAt

  settingType InboxSettingType

  isEnabled   Boolean

  workspaceId String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, settingType])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum InboxSettingType {
  AUTO_ASSIGN_CONVERSATION_TO_REPLIER
  AUTO_MARK_DONE_ON_REPLY
  UNASSIGN_CONVERSATION_ON_NEW_MESSAGE
  AUTO_MARK_INBOX_ITEMS_AS_DONE_AFTER_SOME_TIME
}

enum TaskStatus {
  FREE
  LOCKED
}

model TaskLock {
  id             String     @id
  status         TaskStatus @default(FREE)
  info           Json?
  lockAcquiredAt DateTime

  @@index([status, lockAcquiredAt, id])
}

model MFAFactor {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt

  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  type         MFAFactorType

  status       MFAFactorStatus
  secret       String

  phoneNumber  String?
  friendlyName String?

  @@index([userId, status])
  @@allow('create', true)
  @@allow('all', auth().id == this.userId)
}

enum MFAFactorType {
  TOTP
  PHONE
}

enum MFAFactorStatus {
  VERIFIED
  UNVERIFIED
}

model WorkspaceInternalMetadata {
  id                     String             @id @default(uuid())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @default(now()) @updatedAt

  workspaceId            String             @unique
  workspace              Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  contentEmbeddings      ContentEmbedding[]

  lastSuggestedIntentRun DateTime?

  @@allow('all', true)
}

enum Size {
  XSMALL
  SMALL
  MEDIUM
  LARGE
  XLARGE
}


model Note {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  authorId             String
  author               WorkspaceUser         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  communityMemberId    String?
  communityMember      CommunityMember?      @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  content              String
  isPinned             Boolean               @default(false)

  commentId            String?
  comment              Comment?              @relation(fields: [commentId], references: [id], onDelete: Cascade)

  attachments          Json[]

  conversationId       String?
  conversation         Conversation?         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationFeedItem ConversationFeedItem?

  @@allow('create', true)
  @@allow('all', auth().id == author.userId)
  @@allow('all', communityMember.workspace.members?[auth().id == userId && role != "INTERNAL"])
  @@allow('read', communityMember.workspace.members?[auth().id == userId && role == "INTERNAL"])
  @@allow('all', conversation.workspace.members?[auth().id == userId])
}


model WorkspaceUserViewPinState {
  id              String        @id @default(uuid())

  isPinned        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt()

  viewId          String
  view            View          @relation(fields: [viewId], references: [id], onDelete: Cascade)

  workspaceUserId String
  workspaceUser   WorkspaceUser @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  @@unique([workspaceUserId, viewId])
  @@allow('create', true)
  @@allow('all', auth().id == workspaceUser.userId)
}

model View {
  id                    String                      @id @default(uuid())
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @default(now()) @updatedAt

  workspaceUserId       String?
  workspaceUser         WorkspaceUser?              @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  workspace             Workspace?                  @relation(fields: [workspaceId], references: [id])
  workspaceId           String?

  facebookPageAccountId String?
  facebookPageAccount   FacebookPageAccount?        @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  instagramAccountId    String?
  instagramAccount      InstagramAccount?           @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  tiktokAccountId       String?
  tiktokAccount         TikTokAccount?              @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  isDefault             Boolean                     @default(false)
  isPinned              Boolean                     @default(true)
  surface               ViewSurface
  title                 String
  filters               Filter[]

  predefinedList        PredefinedViewType?
  defaultView           DefaultView[]

  viewType              ViewType?                   @default(SHARED)

  columnSettings        Json?

  order                 Int?
  sidebarOrder          Int?

  isPredefined          Boolean?                    @default(false)

  userViewPins          WorkspaceUserViewPinState[]

  socialListeningTopic  SocialListeningTopic?

  @@allow('create', true)
  @@allow('all', auth().id == workspaceUser.userId)
  @@allow('all', workspace.members?[auth().id == userId])
}

model DefaultView {
  workspaceUserId  String            @id @default(uuid())
  viewId           String?
  workspaceUser    WorkspaceUser     @relation(fields: [workspaceUserId], references: [id])
  view             View?             @relation(fields: [viewId], references: [id])
  surface          ViewSurface
  predefinedViewId PredefinedViewId?


  @@unique([surface, workspaceUserId])
  @@allow('create', true)
  @@allow('all', auth().id == workspaceUser.userId)
}

enum ViewType {
  PERSONAL
  SHARED
}

enum PredefinedViewType {
  ALL_DM
  ALL_VERIFIED_PROFESSIONAL_DM
  ALL_FOLLOWERS_ABOVE_X_DM
  ALL_REPLIED_TO_X_POST_STORY
  ALL_MSGED_ORDER
}

enum PredefinedViewId {
  ALL
  ASSIGNED_TO_ME
  SPAM
}

model Filter {
  id         String          @id @default(uuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt

  key        String
  labels     String[]
  condition  FilterCondition
  value      Json

  view       View            @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     String

  queryValue Json?

  @@unique([viewId, key])
  @@allow('create', true)
  @@allow('all', auth().id == view.workspaceUser.userId)
  @@allow('all', view.workspace.members?[auth().id == userId])
}

enum FilterCondition {
  IS
  IS_NOT
  EMPTY
  NOT_EMPTY
  CONTAINS
  NOT_CONTAINS
  BEFORE
  AFTER
  STARTS_WITH
  ENDS_WITH
  GREATER_THAN
  LESS_THAN
  RANGE
}

enum ViewSurface {
  INBOX
  COMMUNITY
  INTENTS
  CONTENT
  BLAST_LISTS
  MODERATION
  ALL_COMMENTS
  TOPIC
}

enum PersonaChannelBusinessHoursOptions {
  BUSINESS_HOURS_ONLY
  OUTSIDE_BUSINESS_HOURS_ONLY
  ALL_HOURS
}

model PersonaConfig {
  id                String                      @id @default(uuid())
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @default(now()) @updatedAt

  workspaceId       String                      @unique
  workspace         Workspace                   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  channelSettings   PersonaChannelSetting[]

  escalationSetting AiPersonaEscalationSetting?  // Moved here from PersonaChannelSetting

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model PersonaChannelSetting {
  id                    String                              @id @default(uuid())
  createdAt             DateTime                            @default(now())
  updatedAt             DateTime                            @default(now()) @updatedAt

  parentConfigId        String
  parentConfig          PersonaConfig                       @relation(fields: [parentConfigId], references: [id], onDelete: Cascade)

  personaId             String?                             @ignore // use aiPersonaId instead
  persona               Persona?                            @relation(fields: [personaId], references: [id], onDelete: SetNull)  @ignore // Deprecated - use aiPersona instead

  aiPersonaId           String?
  aiPersona             AiPersona?                          @relation(fields: [aiPersonaId], references: [id], onDelete: SetNull)

  channel               PersonaChannel?                     @ignore // use enabledTopics.channel instead
  status                PersonaStatus?                      @ignore // use enabledTopics.mode instead

  instagramAccountId    String?
  instagramAccount      InstagramAccount?                   @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  facebookPageAccountId String?
  facebookPageAccount   FacebookPageAccount?                @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  tiktokAccountId       String?
  tiktokAccount         TikTokAccount?                      @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  enabledTopics         PersonaChannelEnabledTopic[]

  responseTime          PersonaChannelResponseTime[]

  businessHoursToggled  Boolean?                            @default(false) @ignore // use 
  businessHoursOption   PersonaChannelBusinessHoursOptions?

  escalationSetting     PersonaEscalationSetting?           @ignore // use personaConfig.escalationSetting instead

  enableAllIntents      Boolean?                            @ignore // use enabledTopics instead
  enabledIntents        Intent[]                            @ignore // use enabledTopics instead

  @@unique([instagramAccountId])
  @@unique([facebookPageAccountId])
  @@unique([tiktokAccountId])
  @@allow('create', true)
  @@allow('all', parentConfig.workspace.members?[auth().id == userId])
}

enum ResponseDelayTime {
  ZERO
  THREE_TO_FIVE_MINUTES
  FIVE_TO_TEN_MINUTES
  TEN_TO_TWENTY_MINUTES
  THIRTY_TO_ONE_HOUR
  ONE_TO_TWO_HOURS
  SIX_TO_TWELVE_HOURS
}

model PersonaChannelResponseTime {
  id               String                @id @default(uuid())
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @default(now()) @updatedAt

  channelSettingId String
  channelSetting   PersonaChannelSetting @relation(fields: [channelSettingId], references: [id], onDelete: Cascade)

  channelType      PersonaItemChannel

  timeDelay        ResponseDelayTime     @default(ZERO)

  @@unique([channelSettingId, channelType])
  @@allow('create', true)
  @@allow('all', channelSetting.parentConfig.workspace.members?[auth().id == userId])
}

enum PersonaChannelTopicReplyMode {
  AUTOPILOT
  SUGGESTION
}

enum PersonaTopicChannel {
  DM
  COMMENT
  ALL
  ORGANIC_COMMENTS
  PAID_COMMENTS
}

model PersonaChannelEnabledTopic {
  id                      String                       @id @default(uuid())
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @default(now()) @updatedAt

  personaChannelSettingId String
  personaChannelSetting   PersonaChannelSetting        @relation(fields: [personaChannelSettingId], references: [id], onDelete: Cascade)

  topicId                 String?
  topic                   Intent?                      @relation(fields: [topicId], references: [id], onDelete: Cascade)

  allowUntrainedTopics    Boolean                      @default(false)

  enableAllTopics         Boolean                      @default(false)  //Deprecated

  channel                 PersonaTopicChannel
  mode                    PersonaChannelTopicReplyMode
  autopilotEnabledAt      DateTime?

  @@unique([personaChannelSettingId, topicId, channel])
  @@allow('create', true)
  @@allow('all', personaChannelSetting.parentConfig.workspace.members?[auth().id == userId])
}

// Deprecated - use AiPersonaEscalationSetting instead
model PersonaEscalationSetting {
  id                  String                    @id @default(uuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now()) @updatedAt

  channelSettingId    String                    @unique
  channelSetting      PersonaChannelSetting     @relation(fields: [channelSettingId], references: [id], onDelete: Cascade)

  escalationOptions   PersonaEscalationOption[]
  keywords            String[]
  instructionsEnabled Boolean                   @default(true)
  instructions        String?

  assigneeId          String?
  assignee            WorkspaceUser?            @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  @@allow('create', true)
  @@allow('all', channelSetting.parentConfig.workspace.members?[auth().id == userId])
}

model AiPersonaEscalationSetting {
  id                  String                    @id @default(uuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now()) @updatedAt

  isEnabled           Boolean                   @default(false)

  personaConfigId     String                    @unique
  personaConfig       PersonaConfig             @relation(fields: [personaConfigId], references: [id], onDelete: Cascade)

  escalationOptions   PersonaEscalationOption[]

  keywords            String[]

  instructionsEnabled Boolean                   @default(true)
  instructions        String?

  assigneeId          String?
  assignee            WorkspaceUser?            @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  @@allow('create', true)
  @@allow('all', personaConfig.workspace.members?[auth().id == userId])
}

enum PersonaEscalationOption {
  REQUEST_HUMAN
  NEGATIVE_SENTIMENT
}

enum PersonaChannel {
  INSTAGRAM_COMMENT
  INSTAGRAM_DM
  FACEBOOK_COMMENT
  FACEBOOK_DM
  TIKTOK_DM
  TIKTOK_COMMENT
  EMAIL
}

enum PersonaStatus {
  INACTIVE
  COPILOT
  AUTOPILOT
}

model CommunityMemberKlaviyoProfile {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  communityMemberId String          @unique
  communityMember   CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)


  klaviyoAccountId  String
  klaviyoAccount    KlaviyoAccount  @relation(fields: [klaviyoAccountId], references: [id], onDelete: Cascade)

  profileId         String

  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model CommunityMemberKlaviyoLinkedProfile {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  communityMemberId String
  communityMember   CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)


  klaviyoAccountId  String
  klaviyoAccount    KlaviyoAccount  @relation(fields: [klaviyoAccountId], references: [id], onDelete: Cascade)

  profileId         String

  @@unique([klaviyoAccountId, profileId, communityMemberId])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}


model KlaviyoAccount extends Account {
  accessToken           String
  refreshToken          String

  organizationName      String
  scope                 String
  accountId             String

  jobs                  KlaviyoJob[]

  emailListId           String?
  smsListId             String?

  klaviyoProfiles       CommunityMemberKlaviyoProfile[]

  klaviyoLinkedProfiles CommunityMemberKlaviyoLinkedProfile[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model KlaviyoJob {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())

  jobId          String

  klaviyoId      String
  klaviyoAccount KlaviyoAccount @relation(fields: [klaviyoId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', klaviyoAccount.workspace.members?[auth().id == userId])
}

model SlackWorkspace {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt

  workspaceId      String
  workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  isReauthRequired Boolean            @default(false)

  accessToken      String
  refreshToken     String

  scope            String

  teamName         String
  teamId           String

  botUserId        String
  appId            String

  members          SlackUserAccount[]

  @@allow('all', workspace.members?[auth().id == userId])
  @@unique([workspaceId, teamId])
}

enum NotificationSubscriptionType {
  ASSIGNED_AN_ISSUE_BY_TEAM_MATE
  ASSIGNED_AN_ISSUE_BY_AUTOMATION
  SOMEONE_LEFT_A_COMMENT_IN_POST
}

model NotificationSetting {
  id                    String                       @id @default(uuid())
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @default(now()) @updatedAt

  workspaceId           String
  workspace             Workspace                    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workspaceUserId       String
  workspaceUser         WorkspaceUser                @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  sendEmailNotification Boolean                      @default(false)
  sendSlackNotification Boolean                      @default(false)

  notificationType      NotificationSubscriptionType

  @@unique([workspaceUserId, notificationType])
  @@allow('all', workspace.members?[auth().id == userId])
}

model SlackUserAccount extends Account {
  accessToken      String?
  refreshToken     String?
  scope            String?

  slackUserId      String
  dmChannelId      String

  slackWorkspaceId String
  slackWorkspace   SlackWorkspace @relation(fields: [slackWorkspaceId], references: [id], onDelete: Cascade)

  workspaceUserId  String
  workspaceUser    WorkspaceUser  @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, slackWorkspaceId, slackUserId])
}


abstract model Account {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt

  workspaceId      String
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  isReauthRequired Boolean   @default(false)

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model InstagramAccount extends Account {
  instagramBusinessId       String
  facebookPageId            String
  facebookPageName          String
  facebookAccountId         String
  userAccessToken           String
  pageAccessToken           String
  username                  String
  fullName                  String?
  profilePictureUri         String?

  conversationOwner         ConversationOwner?
  contentOwner              ContentOwner?
  commentOwner              CommentOwner?

  communityMemberData       CommunityMemberInstagramRelationData[]
  personaChannelSetting     PersonaChannelSetting[]
  inboxFeedItem             InboxFeedItem[]
  messageBlastCampaign      MessageBlastCampaign[]

  metrics                   Metric[]
  views                     View[]

  instagramTriggers         InstagramTrigger[]

  instagramModerationConfig InstagramModerationConfig?

  inboxRules                InboxRule[]

  contentSyncTasks          ContentSyncTask[]

  hashtagTrackers           HashtagTrackerToAccounts[]

  searchQueryTrackers       SearchQueryTrackerToAccounts[]

  @@unique([instagramBusinessId, workspaceId])
}

model MetaAdAccount extends Account {
  accountId    String
  adAccountId  String
  businessName String
  name         String
  ownerId      String

  @@unique([accountId, workspaceId])
}

model FacebookPageAccount extends Account {
  facebookPageId           String
  facebookPageName         String
  facebookAccountId        String
  userAccessToken          String
  pageAccessToken          String
  fullName                 String
  profilePictureUri        String?

  conversationOwner        ConversationOwner?
  contentOwner             ContentOwner?
  commentOwner             CommentOwner?

  relationData             CommunityMemberFacebookRelationData[]
  inboxFeedItem            InboxFeedItem[]
  personaChannelSetting    PersonaChannelSetting[]

  facebookTriggers         FacebookTrigger[]

  metrics                  Metric[]
  views                    View[]

  facebookModerationConfig FacebookModerationConfig?

  contentSyncTasks         ContentSyncTask[]

  inboxRules               InboxRule[]

  @@unique([facebookPageId, workspaceId])
}

model TikTokAccount extends Account {
  tiktokBusinessId       String
  userAccessToken        String
  userRefreshToken       String
  username               String
  fullName               String?
  profilePictureUri      String?
  baseRegion             String?
  accountType            TikTokAccountType                   @default(BUSINESS)
  userType               TikTokUserType?

  conversationOwner      ConversationOwner?
  contentOwner           ContentOwner?
  commentOwner           CommentOwner?

  relationData           CommunityMemberTiktokRelationData[]
  inboxFeedItem          InboxFeedItem[]
  personaChannelSetting  PersonaChannelSetting[]

  metrics                Metric[]
  views                  View[]

  tiktokModerationConfig TiktokModerationConfig?

  trackedHashtags        TikTokHashtagTracker[]
  trackedSearchQueries   TikTokSearchQueryTracker[]
  tiktokShops            TikTokShop[]

  hashtagTrackers        HashtagTrackerToAccounts[]

  searchQueryTrackers    SearchQueryTrackerToAccounts[]

  @@unique([tiktokBusinessId, workspaceId])
}

model TikTokShop {
  id              String                  @id @default(uuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt

  tiktokAccountId String
  tiktokAccount   TikTokAccount           @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  shopId          String
  sellerType      TikTokShopSellerType
  cipher          String
  code            String

  products        TikTokProduct[]
  orders          TikTokOrder[]
  coupons         TikTokCoupon[]
  customerService TikTokCustomerService[]

  @@unique([shopId, tiktokAccountId])
  @@allow('create', true)
  @@allow('all', tiktokAccount.workspace.members?[auth().id == userId])
}

model SocialListeningTopic {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt

  workspaceId          String
  workspace            Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  viewId               String               @unique
  view                 View                 @relation(fields: [viewId], references: [id], onDelete: Cascade)

  conditions           Json?
  conditionsUniqueHash String?              @unique

  hashtags             HashtagTracker[]
  searchQueryTrackers  SearchQueryTracker[]

  prompts              PromptTracker[]

  globalContents       GlobalContent[]
  contents             Content[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum HashtagTrackerStatus {
  NOT_STARTED
  RUNNING
  COMPLETED
  FAILED
}

enum HashtagPriority {
  UNTRACKED
  DEFAULT
  HIGH
}

enum SearchQueryPriority {
  UNTRACKED
  DEFAULT
  HIGH
}

enum HashtagTrackerPriority {
  DEFAULT
  HIGH
}

model HashtagTracker {
  id                    String                     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @default(now()) @updatedAt

  hashtagId             String?                    @unique

  hashtag               String
  platform              Platform
  priority              HashtagPriority            @default(DEFAULT)

  lastRun               DateTime?
  lastRunId             String?
  lastRunStatus         HashtagTrackerStatus       @default(NOT_STARTED)

  // identifies whether to include content associated with this hashtag in the default UGC tab
  isActiveOnBrand       Boolean                    @default(true)

  globalContents        GlobalContent[]            @relation("HashtagTrackerToGlobalContent")

  accounts              HashtagTrackerToAccounts[]

  contents              Content[]                  @relation("HashtagTrackerToContent")

  socialListeningTopics SocialListeningTopic[]

  @@unique([hashtag, platform])

  @@allow('create', true)
  @@allow('all', accounts?[
    instagramAccount.workspace.members?[auth().id == userId] ||
    tiktokAccount.workspace.members?[auth().id == userId]
  ])
}

enum SearchQueryTrackerStatus {
  NOT_STARTED
  RUNNING
  COMPLETED
  FAILED
}

model SearchQueryTracker {
  id                    String                         @id @default(dbgenerated("gen_random_uuid()"))

  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt

  searchQuery           String                         @unique
  platform              Platform
  priority              SearchQueryPriority            @default(DEFAULT)

  lastRun               DateTime?
  lastRunId             String?
  lastRunStatus         SearchQueryTrackerStatus       @default(NOT_STARTED)

  globalContents        GlobalContent[]                @relation("SearchQueryTrackerToGlobalContent")
  contents              Content[]                      @relation("SearchQueryTrackerToContent")

  socialListeningTopics SocialListeningTopic[]

  accounts              SearchQueryTrackerToAccounts[]

  @@unique([searchQuery, platform])
  @@allow('create', true)
  @@allow('all', accounts?[
    instagramAccount.workspace.members?[auth().id == userId] ||
    tiktokAccount.workspace.members?[auth().id == userId]
  ])
}

model PromptTracker {
  id                     String                         @id @default(dbgenerated("gen_random_uuid()"))
  createdAt              DateTime                       @default(now())
  updatedAt              DateTime                       @default(now()) @updatedAt

  prompt                 String

  hashtagsToAccounts     HashtagTrackerToAccounts[]
  searchQueryToAccounts  SearchQueryTrackerToAccounts[]

  workspaceId            String
  workspace              Workspace                      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  socialListeningTopicId String?
  socialListeningTopic   SocialListeningTopic?          @relation(fields: [socialListeningTopicId], references: [id], onDelete: SetNull)

  @@allow('all', workspace.members?[auth().id == userId])
}

enum SearchQueryTrackerSource {
  ACCOUNT
  TOPIC
}

enum SearchQueryAccountTrackerStatus {
  ACTIVE
  INACTIVE
}

enum SearchQueryTrackerPriority {
  DEFAULT
  HIGH
}


model SearchQueryTrackerToAccounts {
  id                   String                          @id @default(dbgenerated("gen_random_uuid()"))

  createdAt            DateTime                        @default(now())
  updatedAt            DateTime                        @default(now()) @updatedAt

  searchQueryTrackerId String
  searchQueryTracker   SearchQueryTracker              @relation(fields: [searchQueryTrackerId], references: [id], onDelete: Cascade)

  tiktokAccountId      String?
  tiktokAccount        TikTokAccount?                  @relation(fields: [tiktokAccountId], references: [id], onDelete: SetNull)

  instagramAccountId   String?
  instagramAccount     InstagramAccount?               @relation(fields: [instagramAccountId], references: [id], onDelete: SetNull)

  priority             SearchQueryTrackerPriority      @default(DEFAULT)

  status               SearchQueryAccountTrackerStatus @default(ACTIVE)

  source               SearchQueryTrackerSource[]      @default([ACCOUNT])

  prompts              PromptTracker[]

  @@unique([searchQueryTrackerId, tiktokAccountId])
  @@unique([searchQueryTrackerId, instagramAccountId])
  @@allow('all', 
    instagramAccount.workspace.members?[auth().id == userId] ||
    tiktokAccount.workspace.members?[auth().id == userId]
  )
}


enum HashtagTrackingAccountStatus {
  ACTIVE
  INACTIVE
}

enum HashtagTrackerSource {
  ACCOUNT
  TOPIC
}

model HashtagTrackerToAccounts {
  id                 String                       @id @default(dbgenerated("gen_random_uuid()"))

  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @default(now()) @updatedAt

  hashtagTrackerId   String
  hashtagTracker     HashtagTracker               @relation(fields: [hashtagTrackerId], references: [id], onDelete: Cascade)

  tiktokAccountId    String?
  tiktokAccount      TikTokAccount?               @relation(fields: [tiktokAccountId], references: [id], onDelete: SetNull)

  instagramAccountId String?
  instagramAccount   InstagramAccount?            @relation(fields: [instagramAccountId], references: [id], onDelete: SetNull)

  priority           HashtagTrackerPriority       @default(DEFAULT)

  status             HashtagTrackingAccountStatus @default(ACTIVE)

  source             HashtagTrackerSource[]       @default([ACCOUNT])

  prompts            PromptTracker[]

  @@unique([hashtagTrackerId, tiktokAccountId])
  @@unique([hashtagTrackerId, instagramAccountId])
  @@allow('all', 
    instagramAccount.workspace.members?[auth().id == userId] ||
    tiktokAccount.workspace.members?[auth().id == userId]
  )
}

model TikTokHashtagTracker {
  id             String              @id @default(dbgenerated("gen_random_uuid()"))
  hashtag        String              @unique
  lastRun        DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  priority       HashtagPriority     @default(DEFAULT)

  lastResults    Json?
  lastRunId      String?
  lastRunStatus  TikTokTrackerStatus @default(NOT_STARTED)
  tiktokAccounts TikTokAccount[]

  contents       Content[]           @relation("TikTokHashtagTrackerToContent")

  @@allow('all', true)
}

model TikTokSearchQueryTracker {
  id              String              @id @default(dbgenerated("gen_random_uuid()"))
  searchQuery     String              @unique
  lastRun         DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  priority        SearchQueryPriority @default(DEFAULT)

  lastResults     Json?
  lastRunId       String?
  lastRunStatus   TikTokTrackerStatus @default(NOT_STARTED)
  tiktokAccounts  TikTokAccount[]

  // identifies whether to include content associated with this query in the default UGC tab
  isActiveOnBrand Boolean             @default(true)

  contents        Content[]           @relation("TikTokSearchQueryTrackerToContent")

  @@allow('all', true)
}

enum TikTokTrackerStatus {
  NOT_STARTED
  RUNNING
  COMPLETED
  FAILED
}

enum TikTokShopSellerType {
  LOCAL
  CROSS_BORDER
}

enum TikTokProductStatus {
  DRAFT
  PENDING
  FAILED
  ACTIVATE
  SELLER_DEACTIVATED
  PLATFORM_DEACTIVATED
  FREEZE
  DELETED
}

model TikTokProduct {
  id              String               @id @default(cuid())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt

  tiktokShopId    String
  tiktokShop      TikTokShop           @relation(fields: [tiktokShopId], references: [id], onDelete: Cascade)

  productId       String               @unique
  title           String
  description     String
  status          TikTokProductStatus  @default(ACTIVATE)
  price           Float
  currency        String               @default("USD")

  imageHeight     Int
  imageWidth      Int
  imageUrl        String

  createTime      DateTime             @default(now())
  updateTime      DateTime             @default(now())

  orders          TikTokOrderProduct[]
  coupons         TikTokCoupon[]
  tiktokCards     TikTokCard[]
  productImages   ProductImage[]
  productTracking ProductTracking?

  @@allow('all', true)
}

enum TikTokOrderStatus {
  UNPAID
  ON_HOLD
  AWAITING_SHIPMENT
  PARTIALLY_SHIPPING
  AWAITING_COLLECTION
  IN_TRANSIT
  DELIVERED
  COMPLETED
  CANCELLED
}

model TikTokOrder {
  id                          String               @id @default(cuid())
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @default(now()) @updatedAt

  tiktokShopId                String
  tiktokShop                  TikTokShop           @relation(fields: [tiktokShopId], references: [id], onDelete: Cascade)

  orderId                     String               @unique
  displayStatus               TikTokOrderStatus    @default(UNPAID)
  trackingNumber              String?
  shippingProvider            String?

  price                       Float
  currency                    String               @default("USD")
  subTotal                    String?
  shippingFee                 String?
  originalTotalProductPrice   String?
  originalShippingFee         String?

  sellerDiscount              String?
  platformDiscount            String?
  shippingFeeSellerDiscount   String?
  shippingFeePlatformDiscount String?

  tax                         String?
  shippingFeeTax              String?
  productTax                  String?
  retailDeliveryFee           String?

  addressLine1                String?
  addressLine2                String?
  fullAddress                 String?
  city                        String?
  state                       String?
  country                     String?
  postalCode                  String?
  name                        String?

  createdTime                 DateTime             @default(now())
  updatedTime                 DateTime             @default(now())

  buyerId                     String?
  buyer                       CommunityMember?     @relation(fields: [buyerId], references: [id], onDelete: SetNull)

  products                    TikTokOrderProduct[]

  height                      Int
  width                       Int
  url                         String

  tiktokCards                 TikTokCard[]

  returnRecords               TikTokOrderReturn[]

  @@allow('all', true)
}

model TikTokOrderProduct {
  id               String                     @id @default(cuid())
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @default(now()) @updatedAt

  orderId          String
  order            TikTokOrder                @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId        String
  product          TikTokProduct              @relation(fields: [productId], references: [id], onDelete: Cascade)

  skuId            String
  salePrice        String?
  originalPrice    String?
  platformDiscount String?
  sellerDiscount   String?

  tiktokCards      TikTokCard[]

  returnItems      TikTokOrderReturnProduct[]

  @@unique([orderId, productId])
  @@allow('all', true)
}

enum TikTokCouponRedemptionType {
  ABSOLUTE
  RELATIVE
}

enum TikTokCouponDiscountType {
  AMOUNT_OFF
  PERCENT_OFF
}

enum TikTokCouponDisplayType {
  REGULAR
  LIVE
  CREATOR_EXCLUSIVE
  CHAT
  PROMO_CODE
}

enum TikTokCouponStatus {
  NOT_START
  ONGOING
  EXPIRED
  DEACTIVATED
}

enum TikTokCouponCreationSource {
  SELLER_CENTER
  SELLER_APP
  TTS_CRM
}

enum TikTokTargetBuyerSegment {
  ALL
  NEW
  REPEAT_CUSTOMERS
  RECENT_CUSTOMERS
  FREQUENT_CUSTOMERS
  LAPSED_CUSTOMERS
  NEW_FOLLOWERS
  EXISTING_ACTIVE_FOLLOWERS
}

model TikTokCoupon {
  id                     String                     @id @default(cuid())
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @default(now()) @updatedAt

  tiktokShopId           String
  tiktokShop             TikTokShop                 @relation(fields: [tiktokShopId], references: [id], onDelete: Cascade)

  couponId               String                     @unique
  title                  String
  sellerTnc              String?

  claimStartTime         DateTime?
  claimEndTime           DateTime?

  redemptionType         TikTokCouponRedemptionType @default(ABSOLUTE)
  redemptionStartTime    DateTime?
  redemptionEndTime      DateTime?
  redemptionRelativeTime Int?

  discountType           TikTokCouponDiscountType   @default(PERCENT_OFF)
  amount                 String?
  currency               String?                    @default("USD")
  percentage             String?
  maxAmount              String?
  thresholdAmount        String?

  displayType            TikTokCouponDisplayType    @default(REGULAR)
  status                 TikTokCouponStatus         @default(ONGOING)
  creationSource         TikTokCouponCreationSource @default(SELLER_CENTER)
  targetBuyerSegment     TikTokTargetBuyerSegment   @default(ALL)

  createTime             DateTime                   @default(now())
  updateTime             DateTime                   @default(now())

  productIds             TikTokProduct[]
  tiktokCards            TikTokCard[]

  @@allow('all', true)
}

model TikTokCard {
  id              String              @id @default(cuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt

  messageId       String              @unique
  message         Message             @relation(fields: [messageId], references: [id], onDelete: Cascade)

  tiktokProductId String?
  tiktokProduct   TikTokProduct?      @relation(fields: [tiktokProductId], references: [id], onDelete: SetNull)

  tiktokOrderId   String?
  tiktokOrder     TikTokOrder?        @relation(fields: [tiktokOrderId], references: [id], onDelete: SetNull)

  tiktokCouponId  String?
  tiktokCoupon    TikTokCoupon?       @relation(fields: [tiktokCouponId], references: [id], onDelete: SetNull)

  refundProductId String?
  refundProduct   TikTokOrderProduct? @relation(fields: [refundProductId], references: [id], onDelete: SetNull)

  @@allow('all', true)
}

enum TikTokOrderReturnType {
  REFUND
  RETURN_AND_REFUND
  REPLACEMENT
}

enum TikTokOrderReturnStatus {
  RETURN_OR_REFUND_REQUEST_PENDING
  REFUND_OR_RETURN_REQUEST_REJECT
  AWAITING_BUYER_SHIP
  BUYER_SHIPPED_ITEM
  REJECT_RECEIVE_PACKAGE
  RETURN_OR_REFUND_REQUEST_SUCCESS
  RETURN_OR_REFUND_REQUEST_CANCEL
  RETURN_OR_REFUND_REQUEST_COMPLETE
  REPLACEMENT_REQUEST_PENDING
  REPLACEMENT_REQUEST_REJECT
  REPLACEMENT_REQUEST_REFUND_SUCCESS
  REPLACEMENT_REQUEST_CANCEL
  REPLACEMENT_REQUEST_COMPLETE
  AWAITING_BUYER_RESPONSE
}

enum TikTokOrderReturnRole {
  BUYER
  SELLER
  OPERATOR
  SYSTEM
}

model TikTokOrderReturn {
  id                   String                     @id @default(cuid())
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @default(now()) @updatedAt

  orderId              String
  order                TikTokOrder                @relation(fields: [orderId], references: [id], onDelete: Cascade)

  returnId             String                     @unique
  returnType           TikTokOrderReturnType      @default(REFUND)
  returnStatus         TikTokOrderReturnStatus    @default(RETURN_OR_REFUND_REQUEST_PENDING)
  role                 TikTokOrderReturnRole      @default(BUYER)
  returnReasonText     String?
  returnTrackingNumber String?
  returnProviderName   String?

  createTime           DateTime                   @default(now())
  updateTime           DateTime                   @default(now())

  currency             CurrencyCode
  refundTotal          String?
  refundSubtotal       String?
  refundShippingFee    String?
  refundTax            String?
  retailDeliveryFee    String?
  buyerServiceFee      String?
  partialRefund        String?

  returnProducts       TikTokOrderReturnProduct[]

  @@allow('all', true)
}

model TikTokOrderReturnProduct {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  returnId          String
  return            TikTokOrderReturn  @relation(fields: [returnId], references: [id], onDelete: Cascade)

  orderProductId    String
  orderProduct      TikTokOrderProduct @relation(fields: [orderProductId], references: [id], onDelete: Cascade)

  refundTotal       String?
  refundSubtotal    String?
  refundShippingFee String?
  refundTax         String?
  retailDeliveryFee String?
  buyerServiceFee   String?

  @@unique([returnId, orderProductId])
  @@allow('all', true)
}

model TikTokCustomerService {
  id           String                         @id @default(uuid())
  createdAt    DateTime                       @default(now())
  updatedAt    DateTime                       @default(now()) @updatedAt

  userId       String                         @unique
  avatar       String?
  nickname     String?

  tiktokShopId String
  tiktokShop   TikTokShop                     @relation(fields: [tiktokShopId], references: [id], onDelete: Cascade)

  messages     TikTokCustomerServiceMessage[]

  @@allow('all', true)
}

model TikTokCustomerServiceMessage {
  id                String                @id @default(uuid())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @updatedAt

  messageId         String                @unique
  message           Message               @relation(fields: [messageId], references: [id], onDelete: Cascade)

  customerServiceId String
  customerService   TikTokCustomerService @relation(fields: [customerServiceId], references: [id], onDelete: Cascade)

  @@allow('all', true)
}

model ShopifyAccount extends Account {
  shopName                          String?
  shopDomain                        String?
  accessToken                       String
  shopifyResource                   ShopifyResource[]
  extractionMetadataKeys            String[]
  customAppClientId                 String?
  customAppClientSecret             String?
  shopifyDiscounts                  ShopifyDiscount[]
  communityMemberShopifyProfileData CommunityMemberShopifyProfileData[]

  recentActivities                  RecentActivity[]

  @@unique([shopName, workspaceId])
}

model ShopifyDiscount {
  id                      String                            @id @default(uuid())
  createdAt               DateTime                          @default(now())
  updatedAt               DateTime                          @default(now()) @updatedAt

  shopifyAccountId        String
  shopifyAccount          ShopifyAccount                    @relation(fields: [shopifyAccountId], references: [id], onDelete: Cascade)

  title                   String
  prefix                  String?
  discountType            ShopifyDiscountType
  discountValue           String?
  minimumRequirement      ShopifyDiscountMinimumRequirement @default(NONE)
  minimumRequirementValue String?
  currency                CurrencyCode                      @default(USD)
  discountResources       ShopifyResource[]
  discountDurationType    DiscountDurationType              @default(INFINITE)
  endsAt                  DateTime?
  duration                Int?
  durationUnit            TimePeriodUnit?


  discountCodes           ShopifyDiscountCode[]

  @@allow('create', true)
  @@allow('all', shopifyAccount.workspace.members?[auth().id == userId])
  @@unique([title, shopifyAccountId])
}

enum DiscountDurationType {
  INFINITE
  FIXED
  RELATIVE
}

model ShopifyDiscountCode {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  code             String
  discountConfigId String
  discountConfig   ShopifyDiscount @relation(fields: [discountConfigId], references: [id], onDelete: Cascade)

  startsAt         DateTime        @default(now())
  endsAt           DateTime

  @@unique([code, discountConfigId])
  @@allow('all', discountConfig.shopifyAccount.workspace.members?[auth().id == userId])
}

enum ShopifyDiscountMinimumRequirement {
  NONE
  MINIMUM_PURCHASE
  MINIMUM_QUANTITY
}

enum ShopifyDiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}



model ShopifyRegistrationConfig {
  id                    String  @id @default(uuid())
  invitationLink        String? @unique
  customAppClientId     String?
  customAppClientSecret String?

  @@allow('all', true)
}

model CardTemplate {
  id                String           @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt

  title             String
  description       String?
  ctaUrl            String?
  ctaText           String
  pictureSrc        String?

  type              CardTemplateType

  shopifyResourceId String?
  shopifyResource   ShopifyResource? @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)
  workspaceId       String
  workspace         Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum CardTemplateType {
  SHOPIFY
  CUSTOM
}

model Embedding {
  id                     String                      @id @default(uuid())
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @default(now()) @updatedAt

  rawText                String                      @db.Text
  rawTextHash            String
  embedding              Unsupported("vector(3072)")
  parentEntity           EmbeddingEntity

  shopifyResource        ShopifyResource?            @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)
  shopifyResourceId      String?

  customProduct          CustomProduct?              @relation(fields: [customProductId], references: [id], onDelete: Cascade)
  customProductId        String?

  documentResource       DocumentResource?           @relation(fields: [documentResourceId], references: [id], onDelete: Cascade)
  documentResourceId     String?

  intentShadowResource   IntentShadowResource?       @relation(fields: [intentShadowResourceId], references: [id], onDelete: Cascade)
  intentShadowResourceId String?

  knowledgeBase          KnowledgeBase               @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  knowledgeBaseId        String

  shopifyMetafield       ShopifyMetafield?           @relation(fields: [shopifyMetafieldId], references: [id], onDelete: Cascade)
  shopifyMetafieldId     String?

  intentChannel          IntentChannel               @default(ALL)

  @@unique([rawTextHash, knowledgeBaseId, shopifyMetafieldId])
  @@unique([rawTextHash, knowledgeBaseId, shopifyResourceId])
  @@unique([rawTextHash, knowledgeBaseId, documentResourceId])
  @@allow('all', true)
}

model ConversationOwner {
  id                    String               @id @default(uuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt

  platform              Platform

  instagramAccountId    String?              @unique
  facebookPageAccountId String?              @unique
  tiktokAccountId       String?              @unique

  instagramAccount      InstagramAccount?    @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  facebookPageAccount   FacebookPageAccount? @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)
  tiktokAccount         TikTokAccount?       @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  conversations         Conversation[]

  @@allow('create', true)
  @@allow('all', instagramAccount.workspace.members?[auth().id == userId]
              || facebookPageAccount.workspace.members?[auth().id == userId]
              || tiktokAccount.workspace.members?[auth().id == userId])
}

model CustomField {
  id                    String                        @id @default(dbgenerated("gen_random_uuid()"))
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @default(now()) @updatedAt

  workspaceId           String
  workspace             Workspace                     @relation(fields: [workspaceId], references: [id], onDelete: SetNull)

  title                 String
  type                  CustomFieldType
  options               String[] // for labels
  currencyCode          CurrencyCode?
  currencyDisplayStyle  CurrencyCodeStyle?

  customFieldValue      CustomFieldValue[]
  valueSaveInstructions String?

  journeyStatistics     JourneyCustomFieldStatistic[] @ignore
  journeyCollectedData  JourneyCollectedData[]

  @@unique([title, workspaceId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum CurrencyCodeStyle {
  CODE
  NAME
  NARROW_SYMBOL
  SYMBOL
}

model CustomFieldValue {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  communityMemberId String
  communityMember   CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  customFieldId     String
  customField       CustomField     @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  value             String          @default("")
  valueDate         DateTime?
  valueNumber       Int?
  valueBoolean      Boolean?
  valueTags         String[]
  valueFloat        Float?


  @@unique([communityMemberId, customFieldId])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

enum CustomFieldType {
  TAGS
  TEXT
  LONG_TEXT
  NUMBER
  CURRENCY
  DATE_AND_TIME
  BOOLEAN
  PHONE_NUMBER
  EMAIL
}

model LimitedCommunityMember {
  id                String                    @id @default(uuid())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @default(now()) @updatedAt

  workspaceId       String
  workspace         Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  identifier        String
  displayName       String
  platform          Platform

  contentOwner      ContentOwner?
  commentOwner      CommentOwner?
  inboxFeedProfile  InboxFeedProfile[]
  labels            Label[]
  moderatedItems    ModeratedItem[]
  labelAssignments  LabelAssignmentMetadata[]

  profilePictureUri String?

  @@unique([workspaceId, identifier, platform])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model RecentActivity {
  id                     String            @id @default(uuid())
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt

  workspaceId            String?
  workspace              Workspace?        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  communityMemberId      String?
  communityMember        CommunityMember?  @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  timestamp              DateTime
  platform               Platform
  type                   ActivityType

  inboxItemId            String?
  inboxItem              InboxFeedItem?    @relation(fields: [inboxItemId], references: [id], onDelete: SetNull)

  originContentId        String?
  originContent          Content?          @relation(fields: [originContentId], references: [id], onDelete: SetNull)

  shortcodeUrl           String?
  pixelClientId          String?

  linkedShopifyResources ShopifyResource[]

  shortLinkId            String?
  shortLink              Link?             @relation(fields: [shortLinkId], references: [id], onDelete: SetNull)

  metadata               Json?

  purchaseAmount         Float?

  orderId                String?           @ignore
  shopifyOrderId         String?
  shopifyAccountId       String?
  shopifyAccount         ShopifyAccount?   @relation(fields: [shopifyAccountId], references: [id], onDelete: SetNull)

  @@index([shortLinkId, type])
  @@index([shortLinkId, type, communityMemberId])

  // ensure duplicate events don't occur accidentally
  @@unique([communityMemberId, timestamp, type, platform])
  @@unique([originContentId, timestamp, type, platform])
  @@unique([shopifyOrderId, shopifyAccountId, workspaceId, type, platform])
  @@unique([pixelClientId, shortcodeUrl, timestamp, type, platform])
  @@allow('all', true)
}

enum ActivityType {
  COMMENTED_ON_AD
  COMMENTED_ON_OWNED_POST
  MENTIONED_IN_POST_CAPTION
  MENTIONED_IN_COMMENT
  STORY_REACTION
  STORY_REPLY
  STORY_MENTION
  MESSAGED
  MESSAGED_FROM_AD

  CHECKOUT_STARTED
  CHECKOUT_COMPLETED
  CHECKOUT_CONTACT_INFO_SUBMITTED
  CHECKOUT_ADDRESS_INFO_SUBMITTED
  CART_VIEWED
  CHECKOUT_SHIPPING_INFO_SUBMITTED
  PRODUCT_COLLECTION_VIEWED
  PAGE_VIEWED
  PRODUCT_REMOVED_FROM_CART
  PRODUCT_ADDED_TO_CART
  PRODUCT_VIEWED
  PRODUCT_SEARCH_SUBMITTED
  SEARCH_SUBMITTED
  PAYMENT_INFO_SUBMITTED
  EMAIL_SUBMITTED
  LINK_CLICKED
  ORDER_PURCHASED
}

model CommunityMemberBlockState {
  id                   String          @id @default(uuid())

  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt

  communityMemberId    String          @unique
  communityMember      CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  timestamp            DateTime

  blockedByUserId      String?
  blockedByUser        WorkspaceUser?  @relation(fields: [blockedByUserId], references: [id], onDelete: SetNull)

  blockedFromPlatforms Platform[]

  blockedState         BlockedState    @default(UNBLOCKED)

  lastBlockedTimestamp DateTime?

  @@allow('create', true)
  @@allow('all', true)
}

model GlobalCommunityMember {
  id                   String                                     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime                                   @default(now())
  updatedAt            DateTime                                   @default(now()) @updatedAt

  engagedPlatforms     Platform[]

  identifier           String
  firstName            String?
  lastName             String?

  streetAddress        String?
  city                 String?
  state                String?
  country              String?
  zipCode              String?

  phoneNumber          String?
  location             String?
  profilePictureUri    String?

  instagramHandle      String?                                    @unique
  tiktokUsername       String?                                    @unique

  instagramProfileData GlobalCommunityMemberInstagramProfileData?
  tiktokProfileData    GlobalCommunityMemberTiktokProfileData?

  authoredContent      GlobalContent[]
  taggedContent        GlobalContent[]                            @relation("TaggedUsers")

  @@deny('all', true)
}

model CommunityMember {
  id                        String                                 @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                 DateTime                               @default(now())
  updatedAt                 DateTime                               @default(now()) @updatedAt

  workspaceId               String
  workspace                 Workspace                              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  labels                    Label[]
  labelAssignments          LabelAssignmentMetadata[]
  engagedPlatforms          Platform[]

  identifier                String
  firstName                 String?
  lastName                  String?

  streetAddress             String?
  city                      String?
  state                     String?
  country                   String?
  zipCode                   String?

  email                     String?
  phoneNumber               String?
  location                  String?
  profilePictureUri         String?
  customFieldValues         CustomFieldValue[]
  shopifyPurchasesAOV       Int?
  customNotes               Note[]

  instagramHandle           String?

  facebookScopedId          String?

  tiktokUsername            String?
  tiktokUniversalId         String?
  tiktokUserId              String?

  instagramProfileData      CommunityMemberInstagramProfileData?
  instagramRelationData     CommunityMemberInstagramRelationData[]

  facebookProfileData       CommunityMemberFacebookProfileData?
  facebookRelationData      CommunityMemberFacebookRelationData[]

  tiktokProfileData         CommunityMemberTiktokProfileData?
  tiktokRelationData        CommunityMemberTiktokRelationData[]

  shopifyProfileData        CommunityMemberShopifyProfileData?

  conversations             Conversation[]
  content                   ContentOwner?
  comments                  CommentOwner?

  engagementLevel           EngagementLevel?                       @ignore
  engagement                CommunityMemberEngagement?
  brandMentionCount         Int                                    @default(0)

  recentActivity            RecentActivity[]

  blasts                    MessageBlastCampaign[]

  linkStatistics            LinkShopifyStatistic[]
  blastStatistics           BlastShopifyStatistic[]
  journeyStatistics         JourneyShopifyStatistic[]
  isEmailOptedIn            Boolean?

  isMarkedAsSpam            Boolean?
  moderatedItems            ModeratedItem[]

  journeys                  Journey[]                              @relation("JourneyAudience")
  journeySessions           JourneySession[]
  journeySessionsV2         JourneySessionV2[]
  customResponseSessions    CustomResponseSession[]
  customResponseSessionsV2  CustomResponseSessionV2[]
  quizAnswers               QuizAnswer[]
  journeyResponses          JourneyResponse[]
  quizSessions              QuizSession[]
  quizSessionsV2            QuizSessionV2[]

  emails                    CommunityMemberEmail[]

  phoneNumbers              CommunityMemberPhoneNumber[]

  inboxFeedProfile          InboxFeedProfile[]

  importedCommunityMembers  ImportedCommunityMember[]

  blastAudienceMembers      BlastAudienceMember[]

  tiktokOrders              TikTokOrder[]

  klaviyoProfile            CommunityMemberKlaviyoProfile?

  klaviyoProfiles           CommunityMemberKlaviyoLinkedProfile[]

  communityMemberBlockState CommunityMemberBlockState?

  journeyCollectedData      JourneyCollectedData[]

  contentMediaTags          ContentMediaTag[]
  contentCollaborations     ContentCollaboration[]


  @@index([workspaceId, tiktokUniversalId])
  @@unique([workspaceId, email])
  @@unique([workspaceId, instagramHandle])
  @@unique([workspaceId, facebookScopedId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId && role != "INTERNAL"])
  @@allow('read', workspace.members?[auth().id == userId && role == "INTERNAL"])
}

model CommunityMemberEngagement {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt

  communityMember   CommunityMember  @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId String           @unique

  level             EngagementLevel?
  score             Float?
  metadata          Json?

  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

enum BlockedState {
  BLOCKED
  UNBLOCKED
}

enum EmailSource {
  KLAVIYO_FORM
  SHOPIFY_CHECKOUT
  MANUALLY_LINKED
  JOURNEYS
}


enum PhoneNumberSource {
  SHOPIFY_CHECKOUT
  JOURNEYS
  MANUALLY_LINKED
}


enum MarketingOptInStatus {
  YES
  NO
  UNKNOWN
}

model CommunityMemberEmail {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt

  email                String
  isPrimary            Boolean              @default(false)
  source               EmailSource?
  marketingOptInStatus MarketingOptInStatus @default(UNKNOWN)
  communityMemberId    String
  communityMember      CommunityMember      @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  workspaceId          String
  workspace            Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([communityMemberId, email])
  @@unique([workspaceId, email])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model CommunityMemberPhoneNumber {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt

  phoneNumber          String
  isPrimary            Boolean              @default(false)
  source               PhoneNumberSource?
  marketingOptInStatus MarketingOptInStatus @default(UNKNOWN)
  communityMemberId    String
  communityMember      CommunityMember      @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  workspaceId          String
  workspace            Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([communityMemberId, phoneNumber])
  @@unique([workspaceId, phoneNumber])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}



model CommunityMemberFacebookProfileData {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now()) @updatedAt

  communityMember     CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId   String          @unique

  name                String
  facebookAppScopedId String
  isVerified          Boolean?

  profilePictureUri   String?

  workspaceId         String
  workspace           Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@unique([workspaceId, facebookAppScopedId])
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model CommunityMemberFacebookRelationData {
  id                    String              @id @default(uuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now()) @updatedAt

  communityMember       CommunityMember     @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId     String

  facebookPageAccount   FacebookPageAccount @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)
  facebookPageAccountId String

  scopedPlatformId      String

  commentCount          Int?
  tagMentionCount       Int?

  lastEngagedWith       DateTime?

  @@unique([communityMemberId, facebookPageAccountId])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model GlobalCommunityMemberTiktokProfileData {
  id                String                @id @default(uuid())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @updatedAt

  communityMemberId String                @unique
  communityMember   GlobalCommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  tiktokUniversalId String?
  nickName          String?
  isVerified        Boolean?
  biography         String?
  followerCount     Int?
  likeCount         Int?
  videoCount        Int?
  profilePictureUri String?

  @@deny('all', true)
}

model CommunityMemberTiktokProfileData {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  communityMember   CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId String          @unique

  name              String
  tiktokUniversalId String?

  nickName          String?
  isVerified        Boolean?
  profileUrl        String?
  biography         String?
  followerCount     Int?
  likeCount         Int?
  videoCount        Int?
  profilePictureUri String?

  workspaceId       String?
  workspace         Workspace?      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([communityMemberId, tiktokUniversalId])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model CommunityMemberTiktokRelationData {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  communityMember   CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId String

  tiktokAccount     TikTokAccount   @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)
  tiktokAccountId   String

  scopedPlatformId  String

  commentCount      Int?
  tagMentionCount   Int?

  lastEngagedWith   DateTime?

  @@unique([communityMemberId, tiktokAccountId])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

enum EngagementLevel {
  SPAM
  LOW
  MEDIUM
  HIGH
}

model CommunityMemberShopifyProfileData {
  id                 String                    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @default(now()) @updatedAt

  communityMember    CommunityMember           @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId  String                    @unique
  pixelClientId      String[]

  shopifyStoreId     String
  shopifyStore       ShopifyAccount            @relation(fields: [shopifyStoreId], references: [id], onDelete: Cascade)

  customerSinceDate  DateTime?
  shopifyCustomerId  String?
  firstName          String?
  lastName           String?
  email              String?
  phone              String?
  totalOrderCount    Int?
  totalOrderValue    Decimal?
  currencyCode       CurrencyCode?

  addresses          ShopifyCustomerAddress[]
  orders             ShopifyOrder[]
  abandonedCheckout  ShopifyAbandonedCheckout?
  abandonedCart      ShopifyAbandonedCart?

  abandonedCartSince DateTime?
  lastOrderTime      DateTime?

  @@unique([communityMemberId, shopifyCustomerId])
  @@unique([communityMemberId, email])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

enum CommunityImportJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

model CommunityImportJob {
  id                       String                    @id @default(uuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt

  title                    String?
  uploadedFileUrl          String
  columnMapping            Json?

  importStatus             CommunityImportJobStatus  @default(PENDING)

  workspaceId              String
  workspace                Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  importedCommunityMembers ImportedCommunityMember[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum ImportedCommunityMemberStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

model ImportedCommunityMember {
  id                       String                        @id @default(uuid())
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @default(now()) @updatedAt

  status                   ImportedCommunityMemberStatus @default(PENDING)

  data                     Json?

  createdCommunityMemberId String?
  createdCommunityMember   CommunityMember?              @relation(fields: [createdCommunityMemberId], references: [id], onDelete: SetNull)

  communityImportJobId     String
  communityImportJob       CommunityImportJob            @relation(fields: [communityImportJobId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', communityImportJob.workspace.members?[auth().id == userId])
}

model ShopifyAbandonedCart {
  id            String                            @id @default(uuid())
  createdAt     DateTime                          @default(now())
  updatedAt     DateTime                          @default(now()) @updatedAt
  cartCreatedAt DateTime
  customerId    String                            @unique
  customer      CommunityMemberShopifyProfileData @relation(fields: [customerId], references: [id], onDelete: Cascade)
  totalPrice    String?
  currency      CurrencyCode?
  lineItems     ShopifyAbandonedCartLineItem[]
  @@allow('create', true)
  @@allow('all', customer.communityMember.workspace.members?[auth().id == userId])
}

model ShopifyAbandonedCartLineItem {
  id        String               @id @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
  cartId    String
  cart      ShopifyAbandonedCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  title     String?
  quantity  Int?
  price     String?
  currency  CurrencyCode?
  @@allow('create', true)
  @@allow('all', cart.customer.communityMember.workspace.members?[auth().id == userId])
}

model ShopifyCustomerAddress {
  id                String                            @id @default(uuid())
  createdAt         DateTime                          @default(now())
  updatedAt         DateTime                          @default(now()) @updatedAt
  shopifyCustomerId String
  shopifyCustomer   CommunityMemberShopifyProfileData @relation(fields: [shopifyCustomerId], references: [id], onDelete: Cascade)

  type              ShopifyCustomerAddressType
  addressId         String?
  addressLine1      String?
  addressLine2      String?
  city              String?
  province          String?
  country           String
  countryCode       String
  zip               String?
  phone             String
  name              String
  company           String?
  isDefault         Boolean

  linkedOrders      ShopifyOrder[]

  @@unique([shopifyCustomerId, addressId])
  @@unique([shopifyCustomerId, addressLine1, addressLine2, city, province, country, zip, phone, name])
  @@allow('create', true)
  @@allow('all', shopifyCustomer.communityMember.workspace.members?[auth().id == userId])
}

enum ShopifyCustomerAddressType {
  SHIPPING
  BILLING
}

model ShopifyAbandonedCheckout {
  id                String                             @id @default(uuid())
  createdAt         DateTime                           @default(now())
  updatedAt         DateTime                           @default(now()) @updatedAt
  checkoutCreatedAt DateTime
  customerId        String                             @unique
  customer          CommunityMemberShopifyProfileData  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  totalPrice        String?
  currency          CurrencyCode?
  lineItems         ShopifyAbandonedCheckoutLineItem[]

  @@allow('create', true)
  @@allow('all', customer.communityMember.workspace.members?[auth().id == userId])
}

model ShopifyAbandonedCheckoutLineItem {
  id         String                   @id @default(uuid())
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @default(now()) @updatedAt
  checkoutId String
  checkout   ShopifyAbandonedCheckout @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  productId  String
  title      String?
  quantity   Int?
  price      String?
  currency   CurrencyCode?

  @@allow('create', true)
  @@allow('all', checkout.customer.communityMember.workspace.members?[auth().id == userId])
}

model ShopifyOrder {
  id                   String                            @id @default(uuid())
  createdAt            DateTime                          @default(now())
  updatedAt            DateTime                          @default(now()) @updatedAt

  customerId           String
  customer             CommunityMemberShopifyProfileData @relation(fields: [customerId], references: [id], onDelete: Cascade)

  shopifyOrderId       String
  orderNumber          String
  processedAt          DateTime

  cancelReason         String?
  cancelTime           DateTime?

  totalSpent           Decimal
  totalSpentInUSD      Decimal?
  currencyCode         CurrencyCode
  isPaid               Boolean
  fulfillmentStatus    String?
  orderStatusUrl       String?
  adminShopifyUrl      String?

  products             ShopifyOrderProduct[]

  shippingAddressId    String
  shippingAddress      ShopifyCustomerAddress            @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  shippingCost         Decimal
  shippingCurrencyCode CurrencyCode

  @@unique([shopifyOrderId, customerId])
  @@allow('create', true)
  @@allow('all', customer.communityMember.workspace.members?[auth().id == userId])
}

model ShopifyOrderProduct {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt

  orderId           String
  order             ShopifyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  shopifyProductId  String
  shopifyLineItemId String
  title             String
  quantity          Int
  sku               String?
  price             Decimal
  currencyCode      CurrencyCode

  @@unique([orderId, shopifyLineItemId])
  @@allow('create', true)
  @@allow('all', order.customer.communityMember.workspace.members?[auth().id == userId])
}

model GlobalCommunityMemberInstagramProfileData {
  id                   String                @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  communityMemberId    String                @unique
  communityMember      GlobalCommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  instagramUniversalId String?
  profileName          String?
  isVerified           Boolean?
  accountType          InstagramAccountType?
  biography            String?
  followerCount        Int?
  mediaCount           Int?

  @@deny('all', true)
}

model CommunityMemberInstagramProfileData {
  id                   String                @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  communityMember      CommunityMember       @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId    String                @unique

  handle               String
  profileName          String?
  instagramUniversalId String?
  isVerified           Boolean?
  accountType          InstagramAccountType?
  biography            String?

  profilePictureUri    String?
  followerCount        Int?

  mediaCount           Int?
  recentMedia          Json?

  workspaceId          String
  workspace            Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([communityMemberId, handle])
  @@unique([workspaceId, handle])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model CommunityMemberInstagramRelationData {
  id                     String                    @id @default(uuid())
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @default(now()) @updatedAt

  communityMember        CommunityMember           @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  communityMemberId      String

  instagramAccount       InstagramAccount          @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  instagramAccountId     String

  scopedPlatformId       String
  followsOwnerAccount    Boolean?
  followedByOwnerAccount Boolean?
  followingStatus        InstagramFollowingStatus?
  commentCount           Int?
  tagMentionCount        Int?

  lastEngagedWith        DateTime?

  isEligibleForDM        Boolean                   @default(false)
  dmEligibilityInfo      Json?

  @@unique([communityMemberId, instagramAccountId])
  @@allow('create', true)
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

abstract model InboxItem {
  isStarred              Boolean    @default(false)
  labels                 Label[]
  previewMessage         String?
  previewTimestamp       DateTime?
  platform               Platform
  isDone                 Boolean    @default(false)
  isAIGeneratingResponse Boolean    @default(false)
  isAnswered             Boolean    @default(true)
  assignType             AssignType @default(UNASSIGNED)
  draftResponse          Json?
}

model InboxFeedItemRead {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt

  inboxFeedItemId   String
  inboxFeedItem     InboxFeedItem @relation(fields: [inboxFeedItemId], references: [id], onDelete: Cascade)

  workspaceUserId   String
  workspaceUser     WorkspaceUser @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  lastReadTimestamp DateTime

  @@unique([inboxFeedItemId, workspaceUserId])
  @@allow('create', true)
  @@allow('all', auth().id == workspaceUser.userId)
}

model InboxFeedItem {
  id                      String                    @id @default(uuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt

  owningAccountId         String?
  owningAccountPlatform   Platform
  owningAccountInstagram  InstagramAccount?         @relation(fields: [owningAccountId], references: [id], onDelete: Cascade)

  owningFacebookAccountId String?
  owningAccountFacebook   FacebookPageAccount?      @relation(fields: [owningFacebookAccountId], references: [id], onDelete: Cascade)

  owningTiktokAccountId   String?
  owningAccountTiktok     TikTokAccount?            @relation(fields: [owningTiktokAccountId], references: [id], onDelete: Cascade)

  itemType                InboxItemType
  displayType             InboxDisplayType?
  conversationId          String?                   @unique
  conversation            Conversation?             @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  contentId               String?                   @unique
  content                 Content?                  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  previewMessage          String?
  previewTimestamp        DateTime?

  isAIGeneratingResponse  Boolean                   @default(false)
  isStarred               Boolean                   @default(false)
  isDone                  Boolean                   @default(false)
  isDoneTimestamp         DateTime?
  isAnswered              Boolean                   @default(true)
  isRead                  Boolean                   @default(false)
  unreadCount             Int                       @default(0)
  labels                  Label[]
  draftResponse           Json?
  assignType              AssignType                @default(UNASSIGNED)
  assigneeId              String?
  assignee                WorkspaceUser?            @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  metadata                Json?

  activityLink            RecentActivity[]

  readStates              InboxFeedItemRead[]
  lastRefreshedTime       DateTime?
  mostRecentProfileId     String?
  mostRecentProfile       InboxFeedProfile?         @relation(fields: [mostRecentProfileId], references: [id])

  labelAssignments        LabelAssignmentMetadata[]

  @@allow('create', true)
  @@allow('all', owningAccountInstagram.workspace.members?[auth().id == userId && role != "INTERNAL"])
  @@allow('all', owningAccountFacebook.workspace.members?[auth().id == userId && role != "INTERNAL"])
  @@allow('all', owningAccountTiktok.workspace.members?[auth().id == userId && role != "INTERNAL"])
  @@allow('read', owningAccountInstagram.workspace.members?[auth().id == userId && role == "INTERNAL"])
  @@allow('read', owningAccountFacebook.workspace.members?[auth().id == userId && role == "INTERNAL"])
  @@allow('read', owningAccountTiktok.workspace.members?[auth().id == userId && role == "INTERNAL"])
}

model InboxFeedProfile {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt
  type                     InboxFeedProfileType
  communityMemberId        String?                 @unique
  communityMember          CommunityMember?        @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  limitedCommunityMemberId String?                 @unique
  limitedCommunityMember   LimitedCommunityMember? @relation(fields: [limitedCommunityMemberId], references: [id], onDelete: Cascade)


  inboxFeedItem            InboxFeedItem[]

  @@allow('all',true)
}

enum InboxFeedProfileType {
  LIMITED_COMMUNITY_MEMBER
  COMMUNITY_MEMBER
}

enum InboxItemType {
  CONVERSATION
  CONTENT
}

enum InboxDisplayType {
  DM
  STORY_DM
  STORY_MENTION
  POST
  POST_MENTION
  COMMENT_MENTION
}

enum AssignType {
  UNASSIGNED
  HUMAN
  AI
}

model CapturedIntent {
  id              String             @id @default(uuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  processedAt     DateTime?

  type            CapturedIntentType

  commentId       String?
  comment         Comment?           @relation(fields: [commentId], references: [id], onDelete: Cascade)

  conversationId  String?
  conversation    Conversation?      @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  intentId        String
  intent          Intent             @relation(fields: [intentId], references: [id], onDelete: Cascade)

  confidenceScore Float
  metadata        Json?

  @@allow('create', true)
  @@allow('all', intent.workspace.members?[auth().id == userId])
}

model SentimentAnalysis {
  id                        String                     @id @default(uuid())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now()) @updatedAt

  sentiment                 Sentiment
  tone                      Tone
  shouldEscalateToHuman     Boolean

  commentId                 String?                    @unique
  comment                   Comment?                   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  conversationId            String?                    @unique
  conversation              Conversation?              @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  contentId                 String?                    @unique
  content                   Content?                   @relation(fields: [contentId], references: [id], onDelete: Cascade)

  globalContentId           String?                    @unique
  globalContent             GlobalContent?             @relation(fields: [globalContentId], references: [id], onDelete: Cascade)

  llmAnalysisMetadata       LLMAnalysisMetadata?

  globalLLMAnalysisMetadata GlobalLLMAnalysisMetadata? @relation("GlobalLLMAnalysisSentiment")

  workspaceId               String?
  workspace                 Workspace?                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', conversation.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.communityMember.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.limitedCommunityMember.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', llmAnalysisMetadata.content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', llmAnalysisMetadata.content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', llmAnalysisMetadata.content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', workspace.members?[auth().id == userId])
}

enum CapturedIntentType {
  COMMENT
  CONVERSATION
}

model Conversation extends InboxItem {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt

  platformConversationId    String?
  conversationOwner         ConversationOwner           @relation(fields: [conversationOwnerId], references: [id], onDelete: Cascade)
  conversationOwnerId       String

  participantId             String
  participant               CommunityMember             @relation(fields: [participantId], references: [id], onDelete: Cascade)

  title                     String?
  messages                  Message[]
  conversationFeedItems     ConversationFeedItem[]
  historicalIntents         Intent[]

  activeJourneyId           String?
  activeJourney             Journey?                    @relation(fields: [activeJourneyId], references: [id], onDelete: SetNull)
  conversationSummary       String?
  conversationHistory       Json?

  inboxFeedItem             InboxFeedItem?
  eventActivity             ConversationEventActivity[]
  notes                     Note[]

  journeySessions           JourneySession[]
  journeySessionsV2         JourneySessionV2[]
  quizSessions              QuizSession[]
  quizSessionsV2            QuizSessionV2[]

  insightId                 String?
  insight                   Insight?                    @relation(fields: [insightId], references: [id], onDelete: SetNull)

  isMarkedAsSpam            Boolean?
  moderatedItem             ModeratedItem?

  capturedIntents           CapturedIntent[]

  draftAIGeneratedMessage   AIGeneratedMessage?

  sentimentAnalysis         SentimentAnalysis?

  copilotGeneratedResponses CopilotGeneratedResponse[]
  workspaceId               String
  workspace                 Workspace                   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messageReactions          MessageReaction[]

  labelAssignments          LabelAssignmentMetadata[]

  @@unique([platformConversationId, conversationOwnerId])
  @@unique([participantId, conversationOwnerId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model ConversationFeedItem {
  id                        String                     @id @default(uuid())
  createdAt                 DateTime                   @db.Timestamptz(6) @default(now())
  updatedAt                 DateTime                   @db.Timestamptz(6) @default(now()) @updatedAt

  conversation              Conversation               @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId            String

  timestamp                 DateTime                   @db.Timestamptz(6)

  message                   Message?                   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId                 String?                    @unique

  note                      Note?                      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId                    String?                    @unique

  eventActivity             ConversationEventActivity? @relation(fields: [eventActivityId], references: [id], onDelete: Cascade)
  eventActivityId           String?                    @unique

  draftAIGeneratedMessage   AIGeneratedMessage?        @relation(fields: [draftAIGeneratedMessageId], references: [id], onDelete: Cascade)
  draftAIGeneratedMessageId String?                    @unique

  @@allow('create', true)
  @@allow('all', conversation.workspace.members?[auth().id == userId])
}

model AIGeneratedMessage {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  conversationId       String                @unique
  generatedTimestamp   DateTime

  conversation         Conversation          @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationFeedItem ConversationFeedItem?

  body                 String

  autopilotDraftState  AutopilotDraftState?

  automationMetadata   AutomationMetadata?

  @@allow('create', true)
  @@allow('all', conversation.workspace.members?[auth().id == userId])
}

enum ConversationEventActivityType {
  ASSIGNED_STATUS
  UNASSIGNED_STATUS
  DONE_STATUS
  OPEN_STATUS
  NOTIFICATION
}

model ConversationEventActivity {
  id                     String                        @id @default(uuid())
  createdAt              DateTime                      @default(now())
  updatedAt              DateTime                      @default(now()) @updatedAt

  activityType           ConversationEventActivityType
  recordedTimestamp      DateTime
  notificationMessage    String?

  conversation           Conversation                  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId         String

  conversationFeedItem   ConversationFeedItem?

  primaryParticipantId   String?
  primaryParticipant     WorkspaceUser?                @relation("PrimaryParticipant", fields: [primaryParticipantId], references: [id], onDelete: Cascade)

  secondaryParticipantId String?
  secondaryParticipant   WorkspaceUser?                @relation("SecondaryParticipant", fields: [secondaryParticipantId], references: [id], onDelete: Cascade)

  aiPersonaId            String?
  aiPersona              AiPersona?                    @relation(fields: [aiPersonaId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', conversation.workspace.members?[auth().id == userId])
}

model Label {
  id                      String                    @id @default(uuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt

  type                    LabelType

  workspaceId             String
  workspace               Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  InboxFeedItem           InboxFeedItem[]
  conversations           Conversation[]
  communityMembers        CommunityMember[]
  limitedCommunityMembers LimitedCommunityMember[]
  content                 Content[]
  moderationIntentConfig  ModerationIntentConfig[]
  title                   String

  labelAssignments        LabelAssignmentMetadata[]

  @@unique([type, workspaceId, title])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId && role != "INTERNAL"])
  @@allow('read', workspace.members?[auth().id == userId && role == "INTERNAL"])
}

enum LabelAssignmentMethod {
  MANUAL
  INBOX_RULE
  JOURNEY
  INTENT_ACTIONS
  COMMUNITY_MEMBER_IMPORT
}

model LabelAssignmentMetadata {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt

  labelId                  String
  label                    Label                   @relation(fields: [labelId], references: [id], onDelete: Cascade)

  conversationId           String?
  conversation             Conversation?           @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  inboxFeedItemId          String?
  inboxFeedItem            InboxFeedItem?          @relation(fields: [inboxFeedItemId], references: [id], onDelete: Cascade)

  communityMemberId        String?
  communityMember          CommunityMember?        @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  limitedCommunityMemberId String?
  limitedCommunityMember   LimitedCommunityMember? @relation(fields: [limitedCommunityMemberId], references: [id], onDelete: Cascade)

  contentId                String?
  content                  Content?                @relation(fields: [contentId], references: [id], onDelete: Cascade)

  addedBy                  String?
  addedByUser              WorkspaceUser?          @relation(fields: [addedBy], references: [id], onDelete: SetNull)

  lastUpdatedMethod        LabelAssignmentMethod

  @@unique([labelId, conversationId])
  @@unique([labelId, inboxFeedItemId])
  @@unique([labelId, communityMemberId])
  @@unique([labelId, limitedCommunityMemberId])
  @@unique([labelId, contentId])
  @@allow('all', label.workspace.members?[auth().id == userId && role != "INTERNAL"])
}

enum TiktokIdentityType {
  CUSTOMIZED_USER
  AUTH_CODE
  TT_USER
  BC_AUTH_TT
}

enum SyncStatus {
  PENDING
  QUEUED
  IN_PROGRESS
  FAILED
}

model ContentSyncTask {
  id                    String               @id @default(uuid())

  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt

  contentId             String?
  content               Content?             @relation(fields: [contentId], references: [id], onDelete: Cascade)

  status                SyncStatus           @default(PENDING)

  platform              Platform?

  facebookPageAccountId String?
  facebookPageAccount   FacebookPageAccount? @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  instagramAccountId    String?
  instagramAccount      InstagramAccount?    @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  platformUserId        String?

  timestamp             DateTime

  @@index([contentId])
  @@index([status])
}


model TiktokContentMetadata {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt

  tiktokAdId         String?
  tiktokIdentityId   String?
  tiktokIdentityType TiktokIdentityType?

  contentId          String              @unique
  content            Content             @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

model GlobalContent {
  id                  String                     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @default(now()) @updatedAt

  platform            Platform
  authorId            String?
  author              GlobalCommunityMember?     @relation(fields: [authorId], references: [id], onDelete: SetNull)

  media               GlobalMedia[]
  platformContentId   String                     @unique

  contentType         ContentType
  sourceType          ContentSource?
  caption             String?
  permalink           String?
  publishTimestamp    DateTime
  insights            Json?

  hashtagTrackers     HashtagTracker[]           @relation("HashtagTrackerToGlobalContent")
  searchQueryTrackers SearchQueryTracker[]       @relation("SearchQueryTrackerToGlobalContent")

  analysisStatus      ContentAnalysisStatus?     @default(NOT_STARTED)
  audioAnalysisData   Json?
  frameAnalysisData   Json?
  videoAnalysisData   Json?

  embeddings          GlobalContentEmbedding[]
  videoFrames         GlobalContentVideoFrame[]
  metadata            GlobalContentMetadata[]
  taggedUsers         GlobalCommunityMember[]    @relation("TaggedUsers")

  llmAnalysisMetadata GlobalLLMAnalysisMetadata?

  sentimentAnalysis   SentimentAnalysis?

  topics              SocialListeningTopic[]

  keywords            String[]

  isDeleted           Boolean?

  @@index([publishTimestamp])
  @@deny('all', true)
}

model Content extends InboxItem {
  id                        String                     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now()) @updatedAt

  platformContentId         String
  contentType               ContentType
  contentSurface            ContentSurface             @default(FEED)
  authorId                  String
  author                    ContentOwner               @relation(fields: [authorId], references: [id], onDelete: Cascade)

  relevantAccountId         String
  relevantAccount           ContentOwner               @relation("AllContentForAccount", fields: [relevantAccountId], references: [id], onDelete: Cascade)

  sourceType                ContentSource?
  isMention                 Boolean
  isByOwner                 Boolean
  isFavorited               Boolean                    @default(false)
  isRemoved                 Boolean                    @default(false)

  media                     Media[]
  permalink                 String?

  caption                   String?
  publishTimestamp          DateTime
  metadata                  ContentMetadata[]
  insights                  Json?
  comments                  Comment[]
  privateMessages           Message[]

  canReply                  Boolean                    @default(true)
  contentSummary            ContentSummary?

  inboxFeedItem             InboxFeedItem?

  linkedEvents              RecentActivity[]
  contentTriggers           ContentTrigger[]

  commentMentionerId        String?
  commentMentioner          CommentOwner?              @relation(fields: [commentMentionerId], references: [id])

  tiktokHashtagTrackers     TikTokHashtagTracker[]     @relation("TikTokHashtagTrackerToContent")
  tiktokSearchQueryTrackers TikTokSearchQueryTracker[] @relation("TikTokSearchQueryTrackerToContent")

  hashtagTrackers           HashtagTracker[]           @relation("HashtagTrackerToContent")
  searchQueryTrackers       SearchQueryTracker[]       @relation("SearchQueryTrackerToContent")

  threads                   Thread[]
  identifiedProducts        IdentifiedProductContent[]

  analysisStatus            ContentAnalysisStatus?     @default(NOT_STARTED)
  audioAnalysisData         Json?
  frameAnalysisData         Json?
  videoAnalysisData         Json?
  embeddings                ContentEmbedding[]
  videoFrames               ContentVideoFrame[]

  contentSyncTasks          ContentSyncTask[]

  location                  String?
  locationId                String?
  sentimentAnalysis         SentimentAnalysis?


  collaborators             ContentCollaboration[]

  contentPublishingMetadata ContentPublishingMetadata?

  tiktokContentMetadata     TiktokContentMetadata?

  llmAnalysisMetadata       LLMAnalysisMetadata?

  clusterPendingItem        InsightClusterPendingItem?

  workspaceId               String?
  workspace                 Workspace?                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  topics                    SocialListeningTopic[]

  isDeleted                 Boolean?

  labelAssignments          LabelAssignmentMetadata[]

  @@index([publishTimestamp])
  @@unique([platformContentId, relevantAccountId])
  @@allow('create', true)
  @@allow('all', relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', workspace.members?[auth().id == userId])
}

enum ContentStatus {
  PUBLISHED
  PUBLISHING
  SCHEDULED
  QUEUED
  DRAFT
  FAILED
  CANCELLED
}

model ContentPublishingMetadata {
  id                    String         @id @default(uuid())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt

  contentId             String         @unique
  content               Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)

  scheduledTime         DateTime?
  workspaceUserAuthorId String?
  workspaceUserAuthor   WorkspaceUser? @relation(fields: [workspaceUserAuthorId], references: [id], onDelete: SetNull)
  instagramFirstComment String?
  status                ContentStatus  @default(PUBLISHED)
  containerId           String?

  @@allow('create', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

model ContentCollaboration {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt

  username          String
  communityMemberId String?
  communityMember   CommunityMember? @relation(fields: [communityMemberId], references: [id], onDelete: SetNull)

  contentId         String
  content           Content          @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

model IdentifiedProductContent {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  contentId         String
  content           Content         @relation(fields: [contentId], references: [id], onDelete: Cascade)

  shopifyResourceId String
  shopifyResource   ShopifyResource @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)

  confidence        Float
  recognitionData   Json?

  @@unique([contentId, shopifyResourceId])
  @@allow('create', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId]
   || content.relevantAccount.communityMember.workspace.members?[auth().id == userId]
   || content.relevantAccount.limitedCommunityMember.workspace.members?[auth().id == userId]
   || content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId]
   || content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

enum ContentAnalysisStatus {
  NOT_STARTED
  PENDING
  SUCCESS
  FAILED
}
model ContentVideoFrame {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  sourceUri String
  height    Int
  width     Int
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  timestamp Float

  @@allow('create', true)
  @@unique([contentId, timestamp])
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

model GlobalContentVideoFrame {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  sourceUri String
  height    Int
  width     Int
  contentId String
  content   GlobalContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  timestamp Float
  @@unique([contentId, timestamp])
  @@deny('all', true)
}


model ContentEmbedding {
  id                          String                      @id @default(uuid())
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @default(now()) @updatedAt
  workspaceInternalMetadataId String
  workspaceInternalMetadata   WorkspaceInternalMetadata   @relation(fields: [workspaceInternalMetadataId], references: [id], onDelete: Cascade)
  contentId                   String
  content                     Content                     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  searchType                  ContentEmbeddingType
  rawText                     String                      @db.Text
  embedding                   Unsupported("vector(3072)")
  @@unique([contentId, rawText, searchType])
  @@allow('all', true)
}
enum ContentEmbeddingType {
  TRANSCRIPT
  CAPTION
  OBJECT_DETECTION
  DESCRIPTION
}

model GlobalContentEmbedding {
  id         String                      @id @default(uuid())
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @default(now()) @updatedAt
  contentId  String
  content    GlobalContent               @relation(fields: [contentId], references: [id], onDelete: Cascade)
  searchType ContentEmbeddingType
  rawText    String                      @db.Text
  embedding  Unsupported("vector(3072)")
  @@unique([contentId, rawText, searchType])
  @@deny('all', true)
}


enum ContentSource {
  OWNED
  COMMENT_MENTION
  POST_MENTION
  STORY_MENTION
  TRACKED_HASHTAG
}

model GlobalContentMetadata {
  id           String              @id @default(uuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt

  contentId    String
  content      GlobalContent       @relation(fields: [contentId], references: [id], onDelete: Cascade)

  metadataType ContentMetadataType
  valueNumber  Int?
  valueString  String?

  @@unique([contentId, metadataType])
  @@deny('all', true)
}

model ContentMetadata {
  id           String              @id @default(uuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt

  contentId    String
  content      Content             @relation(fields: [contentId], references: [id], onDelete: Cascade)

  metadataType ContentMetadataType
  valueNumber  Int?
  valueString  String?

  @@unique([contentId, metadataType])
  @@allow('create', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

enum ContentMetadataType {
  LIKE
  COMMENT
  SHARE
  PLAYS
}

model ContentSummary {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt

  contentId     String        @unique
  content       Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)

  summary       String
  summaryStatus SummaryStatus

  sentiment     Sentiment
  keyThemes     String[]

  @@allow('create', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

enum SummaryStatus {
  PENDING
  SUCCESS
  FAILED
}

model GlobalMedia {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt

  platform        Platform

  platformMediaId String

  sourceUri       String
  thumbnailUri    String?

  status          MediaStatus?
  type            ContentType

  height          Int?
  width           Int?

  globalContentId String?
  globalContent   GlobalContent? @relation(fields: [globalContentId], references: [id], onDelete: Cascade)

  hash            String?        @ignore

  @@deny('all', true)
}

model Media {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt

  contentId       String?
  content         Content?          @relation(fields: [contentId], references: [id], onDelete: Cascade)

  commentId       String?           @unique
  comment         Comment?          @relation(fields: [commentId], references: [id], onDelete: Cascade)

  platformMediaId String
  sourceUri       String
  type            ContentType
  thumbnailUri    String?

  width           Int?
  height          Int?

  tags            ContentMediaTag[]
  containerId     String?
  status          MediaStatus?
  index           Int?

  uploadOffset    Int?

  @@index([contentId])
  @@unique([platformMediaId, contentId])
  @@allow('create', true)
  @@allow('read', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

enum MediaStatus {
  PUBLISHED
  PUBLISHING
  PENDING
  QUEUED
  DRAFT
  FAILED
}

model ContentOwner {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt

  platform                 Platform
  instagramAccountId       String?                 @unique
  communityMemberId        String?                 @unique
  limitedCommunityMemberId String?                 @unique
  facebookAccountId        String?                 @unique
  tiktokAccountId          String?                 @unique

  instagramAccount         InstagramAccount?       @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  communityMember          CommunityMember?        @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  limitedCommunityMember   LimitedCommunityMember? @relation(fields: [limitedCommunityMemberId], references: [id], onDelete: Cascade)
  facebookAccount          FacebookPageAccount?    @relation(fields: [facebookAccountId], references: [id], onDelete: Cascade)
  tiktokAccount            TikTokAccount?          @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  publishedContent         Content[]
  allContent               Content[]               @relation("AllContentForAccount")

  @@allow('create', true)
  @@allow('all', instagramAccount.workspace.members?[auth().id == userId]
   || communityMember.workspace.members?[auth().id == userId]
   || limitedCommunityMember.workspace.members?[auth().id == userId]
   || facebookAccount.workspace.members?[auth().id == userId]
   || tiktokAccount.workspace.members?[auth().id == userId])
}

model CommentOwner {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt

  platform                 Platform
  instagramAccountId       String?                 @unique
  communityMemberId        String?                 @unique
  limitedCommunityMemberId String?                 @unique
  facebookAccountId        String?                 @unique
  tiktokAccountId          String?                 @unique

  instagramAccount         InstagramAccount?       @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  communityMember          CommunityMember?        @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)
  limitedCommunityMember   LimitedCommunityMember? @relation(fields: [limitedCommunityMemberId], references: [id], onDelete: Cascade)
  facebookAccount          FacebookPageAccount?    @relation(fields: [facebookAccountId], references: [id], onDelete: Cascade)
  tiktokAccount            TikTokAccount?          @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  publishedComments        Comment[]
  mentionedComments        Comment[]               @relation("CommentMentionAccount")
  mentionedCommentContent  Content[]

  @@index([instagramAccountId])
  @@index([facebookAccountId])
  @@index([tiktokAccountId])
  @@allow('create', true)
  @@allow('all', instagramAccount.workspace.members?[auth().id == userId]
   || communityMember.workspace.members?[auth().id == userId]
   || limitedCommunityMember.workspace.members?[auth().id == userId]
   || facebookAccount.workspace.members?[auth().id == userId]
   || tiktokAccount.workspace.members?[auth().id == userId])
}

model CommentDeleteMetadata {
  id            String           @id @default(uuid())

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt

  commentId     String           @unique
  comment       Comment          @relation(fields: [commentId], references: [id], onDelete: Cascade)

  previousState CommentViewState @default(VISIBLE)

  timestamp     DateTime

  @@allow('create', true)
  @@allow('all', true)
}

model CommentMetadata {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  hasBrandReply Boolean  @default(false)
  commentId     String   @unique
  comment       Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', comment.author.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.communityMember.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.limitedCommunityMember.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.tiktokAccount.workspace.members?[auth().id == userId])
}

model Keyword {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  keyword     String
  products    ShopifyResource[]
  workspaceId String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  mentions    KeywordMention[]

  @@unique([keyword, workspaceId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}


model KeywordMention {
  id            String              @id @default(uuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  llmAnalysisId String
  llmAnalysis   LLMAnalysisMetadata @relation(fields: [llmAnalysisId], references: [id], onDelete: Cascade)
  keywordId     String
  keyword       Keyword             @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  confidence    Float               @default(0.0)

  workspaceId   String
  workspace     Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([llmAnalysisId, keywordId])

  @@index([keywordId])
  @@allow('create', true)
  @@allow('all', keyword.workspace.members?[auth().id == userId])
}

model ProductMention {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  shopifyResourceId String
  shopifyResource   ShopifyResource     @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)
  llmAnalysisId     String
  llmAnalysis       LLMAnalysisMetadata @relation(fields: [llmAnalysisId], references: [id], onDelete: Cascade)
  confidence        Float               @default(0.0)
  workspaceId       String
  workspace         Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([shopifyResourceId, llmAnalysisId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}


model ContentMediaTag {
  id                String           @id @default(uuid())
  username          String
  communityMemberId String?
  communityMember   CommunityMember? @relation(fields: [communityMemberId], references: [id], onDelete: SetNull)
  x                 Float
  y                 Float
  mediaId           String
  media             Media            @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', media.content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', media.content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', media.content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
}

model Comment {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                DateTime                   @db.Timestamptz(6) @default(now())
  updatedAt                DateTime                   @db.Timestamptz(6) @default(now()) @updatedAt

  authorId                 String
  author                   CommentOwner               @relation(fields: [authorId], references: [id], onDelete: Cascade)

  mentionedOwnerId         String?
  mentionedOwner           CommentOwner?              @relation("CommentMentionAccount", fields: [mentionedOwnerId], references: [id], onDelete: Cascade)

  platformCommentId        String
  body                     String
  publishedTimestamp       DateTime                   @db.Timestamptz(6)
  isMention                Boolean
  isSentByAI               Boolean                    @default(false)
  viewState                CommentViewState

  hasBrandReply            Boolean?
  parentCommentId          String?
  parentComment            Comment?                   @relation("RepliesToComment", fields: [parentCommentId], references: [id])
  replies                  Comment[]                  @relation("RepliesToComment")
  contentId                String
  content                  Content                    @relation(fields: [contentId], references: [id], onDelete: Cascade)
  likeCount                Int?
  isLikedByBrand           Boolean                    @default(false)
  canReply                 Boolean                    @default(true)
  status                   CommentSentStatus?
  scheduledTime            DateTime?                  @db.Timestamptz(6)
  isDone                   Boolean                    @default(false)
  isDoneTimestamp          DateTime?                  @db.Timestamptz(6)

  isMarkedAsDoneByUserId   String?
  isMarkedAsDoneByUser     WorkspaceUser?             @relation("MarkedAsDoneByUser", fields: [isMarkedAsDoneByUserId], references: [id], onDelete: SetNull)

  notes                    Note[]
  context                  Json?
  permalink                String?
  tags                     Json?
  media                    Media?

  unknownIntent            UnknownIntentComment?

  insightId                String?
  insight                  Insight?                   @relation(fields: [insightId], references: [id], onDelete: SetNull)

  llmAnalysisMetadataId    String?
  llmAnalysisMetadata      LLMAnalysisMetadata?

  copilotGeneratedResponse CopilotGeneratedResponse[]

  workspaceSenderId        String?
  workspaceSender          WorkspaceUser?             @relation(fields: [workspaceSenderId], references: [id], onDelete: SetNull)

  isMarkedAsSpam           Boolean?
  isHiddenByModeration     Boolean?
  moderatedItem            ModeratedItem?

  parentJourneyId          String?
  parentJourney            Journey?                   @relation(fields: [parentJourneyId], references: [id], onDelete: SetNull)

  journeyResponseId        String?
  journeyResponse          JourneyResponse?

  thread                   Thread?                    @relation("ThreadRootComment")

  parentThreadId           String?
  parentThread             Thread?                    @relation("ThreadReplies", fields: [parentThreadId], references: [id], onDelete: SetNull)

  capturedIntents          CapturedIntent[]

  clusterPendingItem       InsightClusterPendingItem?

  journeysTrigger          JourneySession[]
  journeysTriggerV2        JourneySessionV2[]

  delayedJourneySession    JourneySession?            @relation("delayedComment")
  delayedJourneySessionV2  JourneySessionV2?          @relation("delayedCommentV2")

  publishOperations        Json?

  replyMessages            Message[]

  autopilotDraftState      AutopilotDraftState?

  sentimentAnalysis        SentimentAnalysis?

  commentDeleteMetadata    CommentDeleteMetadata?
  commentMetadata          CommentMetadata?

  automationMetadata       AutomationMetadata?
  workspaceId              String?
  workspace                Workspace?                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  automationPreviews       AutomationPreview[]


  @@index([contentId])
  @@index([workspaceId, publishedTimestamp])

  @@unique([platformCommentId, contentId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model Thread {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  contentId     String
  content       Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)

  rootCommentId String    @unique
  rootComment   Comment   @relation("ThreadRootComment", fields: [rootCommentId], references: [id], onDelete: Cascade)

  replies       Comment[] @relation("ThreadReplies")

  @@unique([contentId, rootCommentId])
  @@allow('create', true)
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', rootComment.author.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', rootComment.author.communityMember.workspace.members?[auth().id == userId])
  @@allow('all', rootComment.author.limitedCommunityMember.workspace.members?[auth().id == userId])
  @@allow('all', rootComment.author.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', rootComment.author.tiktokAccount.workspace.members?[auth().id == userId])
}

enum CommentSentStatus {
  AI_DRAFT
  AI_DRAFT_SENT
  QUEUED
  PENDING
  SENT
  FAILED
  CANCELLED
  SCHEDULED
}

enum MessageReactionActionType {
  REACT
  UNREACT
}

enum MessageReactionType {
  SMILE
  ANGRY
  SAD
  WOW
  LOVE
  LIKE
  DISLIKE
  LAUGH
  OTHER
}

model MessageReaction {
  id                String                    @id @default(uuid())
  createdAt         DateTime                  @db.Timestamptz(6) @default(now())
  updatedAt         DateTime                  @db.Timestamptz(6) @default(now()) @updatedAt

  isFromOwner       Boolean

  platformTimestamp DateTime                  @db.Timestamptz(6)

  messageId         String
  message           Message                   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  conversationId    String?
  conversation      Conversation?             @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  actionType        MessageReactionActionType

  reactionType      MessageReactionType?
  emoji             String?

  workspaceId       String
  workspace         Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([messageId, isFromOwner])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model Message {
  id                      String                        @id @default(dbgenerated("gen_random_uuid()"))
  createdAt               DateTime                      @db.Timestamptz(6) @default(now())
  updatedAt               DateTime                      @db.Timestamptz(6) @default(now()) @updatedAt

  conversationId          String
  originContentId         String?
  platformMessageId       String?

  content                 String
  messageType             MessageType
  sentTimestamp           DateTime                      @db.Timestamptz(6)
  isFromOwner             Boolean
  buttonMetadata          Json?
  attachments             Json[]
  isReadByOwner           Boolean                       @default(false)
  seenTimestamp           DateTime?                     @db.Timestamptz(6)
  detectedIntents         Intent[]
  detectedSentiment       Sentiment?

  conversation            Conversation                  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationFeedItem    ConversationFeedItem?
  originContent           Content?                      @relation(fields: [originContentId], references: [id], onDelete: SetNull)
  responseSuggestion      String?
  isSentByAI              Boolean                       @default(false)

  llmAnalysisMetadataId   String?
  llmAnalysisMetadata     LLMAnalysisMetadata?

  parentCampaignId        String?
  parentCampaign          MessageBlastCampaign?         @relation(fields: [parentCampaignId], references: [id], onDelete: Cascade)
  status                  MessageStatus?
  scheduledTime           DateTime?                     @db.Timestamptz(6)
  generatedLinks          Link[]

  quizAnswer              QuizAnswer?

  journeyResponseId       String?
  journeyResponse         JourneyResponse?

  parentJourneyId         String?
  parentJourney           Journey?                      @relation(fields: [parentJourneyId], references: [id], onDelete: SetNull)

  parentActionBlockId     String?
  parentActionBlock       ActionBlock?                  @relation(fields: [parentActionBlockId], references: [id], onDelete: SetNull)

  workspaceSenderId       String?
  workspaceSender         WorkspaceUser?                @relation(fields: [workspaceSenderId], references: [id], onDelete: SetNull)

  isMarkedAsSpam          Boolean?

  moderatedItemId         String?
  moderatedItem           ModeratedItem?                @relation(fields: [moderatedItemId], references: [id], onDelete: SetNull)

  journeysTrigger         JourneySession[]
  journeysTriggerV2       JourneySessionV2[]

  delayedJourneySession   JourneySession?               @relation("delayedMessage")
  delayedJourneySessionV2 JourneySessionV2?             @relation("delayedMessageV2")

  clusterPendingItem      InsightClusterPendingItem?

  publishOperations       Json?

  quickReplies            String[]
  messageGroupId          String?

  replyCommentId          String?
  replyComment            Comment?                      @relation(fields: [replyCommentId], references: [id], onDelete: SetNull)

  tiktokCard              TikTokCard?

  tiktokCustomerService   TikTokCustomerServiceMessage?

  reactions               MessageReaction[]

  automationMetadata      AutomationMetadata?
  workspaceId             String?
  workspace               Workspace?                    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  automationPreviews      AutomationPreview[]

  @@unique([platformMessageId, conversationId])
  @@index([workspaceId, sentTimestamp])
  @@index([messageGroupId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model Link {
  id                   String                 @id @default(uuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt

  workspaceId          String?
  workspace            Workspace?             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  journeyId            String?
  journey              Journey?               @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  name                 String?
  type                 LinkType               @default(BLAST)
  status               LinkStatus             @default(ACTIVE)
  surface              LinkSurface            @default(GENERAL)
  channel              Platform               @default(INSTAGRAM)

  messageId            String?
  message              Message?               @relation(fields: [messageId], references: [id], onDelete: Cascade)

  blastId              String?
  blast                MessageBlastCampaign?  @relation(fields: [blastId], references: [id], onDelete: SetNull)

  originalUrl          String?
  url                  String
  shortcode            String
  shortioLinkId        String?
  totalClicks          Int                    @default(0)
  uniqueClicks         Int                    @default(0)
  totalCheckouts       Int                    @default(0)
  revenue              Decimal                @default(0)
  revenueCurrency      CurrencyCode           @default(USD)
  totalCartAdds        Int                    @default(0)
  totalCheckoutStarts  Int                    @default(0)
  conversionRate       Float                  @default(0)

  shopifyResources     ShopifyResource[]
  activities           RecentActivity[]

  lastAnalyzedTime     DateTime?

  shopifyStats         LinkShopifyStatistic[]

  groupedJourneyLink   GroupedJourneyLink?    @relation(fields: [groupedJourneyLinkId], references: [id])
  groupedJourneyLinkId String?

  workspaceUser        WorkspaceUser?         @relation(fields: [workspaceUserId], references: [id])
  workspaceUserId      String?

  @@unique([shortcode, workspaceId])
  @@allow('all', true)
}

model GroupedJourneyLink {
  id                  String       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt

  journeyId           String
  journey             Journey      @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  originalUrl         String
  totalClicks         Int          @default(0)
  uniqueClicks        Int          @default(0)
  totalCheckouts      Int          @default(0)
  revenue             Decimal      @default(0)
  revenueCurrency     CurrencyCode @default(USD)
  totalCartAdds       Int          @default(0)
  totalCheckoutStarts Int          @default(0)
  conversionRate      Float        @default(0)
  clickthroughRate    Float        @default(0)

  links               Link[]

  @@unique([journeyId, originalUrl])
  @@allow('all', true)
}

abstract model ShopifyStatistic {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt

  resourceId       String
  resource         ShopifyResource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  viewCount        Int
  uniqueViewCount  Int               @default(0)
  communityMembers CommunityMember[]
  type             ActivityType

  @@allow('all', true)
}

model LinkShopifyStatistic extends ShopifyStatistic {
  linkId String
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([linkId, resourceId, type])
}

model BlastShopifyStatistic extends ShopifyStatistic {
  blastId String
  blast   MessageBlastCampaign @relation(fields: [blastId], references: [id], onDelete: Cascade)

  @@unique([blastId, resourceId, type])
}

model JourneyShopifyStatistic extends ShopifyStatistic {
  journeyId   String
  journey     Journey @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  originalUrl String

  @@unique([journeyId, resourceId, type, originalUrl])
}

enum LinkStatus {
  ACTIVE
  DISABLED
  DELETED
}

enum LinkSurface {
  GENERAL
  POST
  STORY
  INBOX
  PAID_ADS
}

enum LinkType {
  JOURNEY
  BLAST
  MANUAL
  INBOX_DM
  INBOX_POST
}

enum MessageStatus {
  QUEUED
  PENDING
  AI_DRAFT_SENT
  SENT
  FAILED
  SCHEDULED
  CANCELLED
}

enum Sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum Tone {
  HAPPY
  EXCITED
  APPRECIATIVE
  SAD
  ANGRY
  FRUSTRATED
  COMPLAINING
  MIXED
  NONE
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

// Deprecated - use AiPersona instead
model Persona {
  id                    String                  @id @default(uuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt

  workspaceId           String
  workspace             Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  avatar                String
  name                  String
  description           String
  useEmoji              Boolean
  status                Status
  messageLength         PersonaMessageLength
  responseTime          PersonaResponseTime
  responseExamples      String[]
  channels              Platform[]
  blacklistedEmojis     String[]
  whitelistedEmojis     String[]
  traits                PersonaTrait[]
  enableAllIntents      Boolean                 @default(false)
  enabledIntents        Intent[]
  personaChannelSetting PersonaChannelSetting[]
  greetingMessage       String                  @default("Hello! How can I help you today?")

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum EmojiCount {
  ZERO
  ONE
  TWO_TO_THREE
  FOUR_OR_MORE
}

model AiPersona {
  id                   String                      @id @default(uuid())
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @default(now()) @updatedAt

  workspaceId          String
  workspace            Workspace                   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  avatar               String
  name                 String
  brandSummary         String

  gender               Gender                      @default(FEMALE)
  age                  Int                         @default(30)
  cityLocation         String                      @default("New York")
  description          String

  toneOfVoice          PersonaTone[]
  responseExamples     Json[]
  whitelistedEmojis    String[]
  maxAllowedEmojiCount EmojiCount

  blockedContent       String[]

  channelInstructions  PersonaChannelInstruction[]
  channelSetting       PersonaChannelSetting[]

  conversationEvents   ConversationEventActivity[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum PersonaToneType {
  CASUAL_FORMAL
  INDIFFERENT_EMPATHETIC
  GENTLE_BOLD
  CONCISE_CHATTY
}

model PersonaTone {
  id          String             @id @default(uuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  personaId   String
  persona     AiPersona          @relation(fields: [personaId], references: [id], onDelete: Cascade)

  channelType PersonaItemChannel

  //Enum for tone of voice
  toneType    PersonaToneType
  toneLevel   Int                @default(50)

  @@unique([personaId, channelType, toneType])
  @@allow('create', true)
  @@allow('all', persona.workspace.members?[auth().id == userId])
}

enum PersonaItemChannel {
  // Channel of the item that we respond to
  DM
  COMMENT
}

model PersonaChannelInstruction {
  id          String             @id @default(uuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  personaId   String
  persona     AiPersona          @relation(fields: [personaId], references: [id], onDelete: Cascade)

  channelType PersonaItemChannel
  instruction String

  @@unique([personaId, channelType])
  @@allow('create', true)
  @@allow('all', persona.workspace.members?[auth().id == userId])
}

model IntentCategory {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  title       String
  description String?
  icon        String?
  intents     Intent[]

  @@unique([title, workspaceId])
  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model SuggestedIntent {
  id                   String                   @id @default(uuid())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @default(now()) @updatedAt

  workspaceId          String
  workspace            Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  title                String
  description          String?
  icon                 String?
  examples             String[]
  exampleWithEmbedding SuggestedIntentExample[]

  response             Json
  categories           String[]
  status               SuggestedIntentStatus    @default(SUGGESTED)

  @@unique([title, workspaceId])
  @@allow('all', true)
}

model SuggestedIntentExample {
  id           String                       @id @default(uuid())
  body         String
  suggestionId String
  suggestion   SuggestedIntent              @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  embedding    Unsupported("vector(3072)")?

  @@allow('all', true)
}

enum SuggestedIntentStatus {
  SUGGESTED
  APPROVED
  REJECTED
}

model Intent {
  id                    String                        @id @default(uuid())
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @default(now()) @updatedAt

  workspaceId           String
  workspace             Workspace                     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  title                 String
  description           String?
  examples              String[]
  embedding             Unsupported("vector(3072)")[]
  status                Status                        @default(TRAINING)

  responseJourneyId     String?                       @unique  // deprecated - directly use ActionBlock
  responseJourney       ResponseJourney?              @relation(fields: [responseJourneyId], references: [id], onDelete: SetNull)

  additionalConditions  Json?

  actionBlocks          ActionBlock[]

  simpleResponse        Json?
  cannedResponses       String[]
  shadowResource        IntentShadowResource?

  personas              Persona[]  // Deprecated - use PersonaEnabledTopic instead

  personaChannelSetting PersonaChannelSetting[]  // Deprecated - Use personaEnabledTopics instead

  personaEnabledTopics  PersonaChannelEnabledTopic[]

  categories            IntentCategory[]

  linkedMessages        Message[]
  linkedConversations   Conversation[]

  capturedIntents       CapturedIntent[]

  autopilotDraftState   AutopilotDraftState[]

  automationMetadata    AutomationMetadata[]

  @@unique([title, workspaceId])
  @@allow('all', workspace.members?[auth().id == userId])
}

model DefaultIntent {
  id          Int                           @id @default(autoincrement())
  createdAt   DateTime                      @default(now())
  updatedAt   DateTime                      @default(now()) @updatedAt

  title       String
  description String?
  examples    String[]
  embedding   Unsupported("vector(3072)")[]

  @@allow('all', true)
}

abstract model KnowledgeResource {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  title               String
  type                KnowledgeResourceType
  status              UploadStatus
  customNotes         String[]
  embeddings          Embedding[]

  parentKnowledgeBase KnowledgeBase         @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  knowledgeBaseId     String

  @@allow('create', true)
  @@allow('all', parentKnowledgeBase.workspace.members?[auth().id == userId])
}

model KnowledgeBase {
  id                    String                 @id @default(uuid())
  documents             DocumentResource[]
  shopifyItems          ShopifyResource[]
  intentShadowResources IntentShadowResource[]
  customProducts        CustomProduct[]

  workspaceId           String                 @unique
  workspace             Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  embedding             Embedding[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model IntentShadowResource extends KnowledgeResource {
  intentId String @unique
  intent   Intent @relation(fields: [intentId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt

  shopifyResourceId String?
  shopifyResource   ShopifyResource? @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)

  tiktokProductId   String?
  tiktokProduct     TikTokProduct?   @relation(fields: [tiktokProductId], references: [id], onDelete: Cascade)

  customProductId   String?
  customProduct     CustomProduct?   @relation(fields: [customProductId], references: [id], onDelete: Cascade)

  url               String

  width             Int
  height            Int
  altText           String?

  @@unique([tiktokProductId, url])
  @@unique([shopifyResourceId, url])
  @@unique([customProductId, url])
  @@allow('all', shopifyResource.store.workspace.members?[auth().id == userId])
  @@allow('all', tiktokProduct.tiktokShop.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', customProduct.workspace.members?[auth().id == userId])
}

model CustomProduct extends KnowledgeResource {
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  description     String
  url             String?

  productImages   ProductImage[]
  productTracking ProductTracking?

  @@unique([workspaceId, id])
  @@allow('all', workspace.members?[auth().id == userId])
}

model ProductTracking {
  id                String           @id @default(uuid())

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt

  shopifyResourceId String?          @unique
  shopifyResource   ShopifyResource? @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)

  tiktokProductId   String?          @unique
  tiktokProduct     TikTokProduct?   @relation(fields: [tiktokProductId], references: [id], onDelete: Cascade)

  customProductId   String?          @unique
  customProduct     CustomProduct?   @relation(fields: [customProductId], references: [id], onDelete: Cascade)

  workspaceId       String
  workspace         Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Prevent duplicate tracking within a workspace
  @@unique([workspaceId, shopifyResourceId])
  @@unique([workspaceId, tiktokProductId])
  @@unique([workspaceId, customProductId])

  @@allow('all', workspace.members?[auth().id == userId])
}

model ShopifyResource extends KnowledgeResource {
  storeId                  String
  store                    ShopifyAccount             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  resourceId               String // Shopify product or page ID
  resourceUrl              String                     @url
  recommendationUrl        String?                    @url
  extractedMetadata        Json
  overrideTitle            String?

  pictureUri               String?
  minVariantPrice          String?
  maxVariantPrice          String?
  price                    String?
  productDescription       String?

  links                    Link[]
  linkedActivity           RecentActivity[]
  productVariant           ShopifyProductVariant[]
  linkStatistics           LinkShopifyStatistic[]
  blastStatistics          BlastShopifyStatistic[]
  journeyStatistics        JourneyShopifyStatistic[]

  identifiedProductContent IdentifiedProductContent[]
  shopifyMetafields        ShopifyMetafield[]
  discounts                ShopifyDiscount[]
  keywords                 Keyword[]
  savedTemplates           CardTemplate[]
  productMentions          ProductMention[]
  productImages            ProductImage[]

  isCollection             Boolean                    @default(false)

  productTracking          ProductTracking?

  @@unique([storeId, resourceId])
}

model ShopifyMetafield {
  id                String          @id @default(uuid())
  key               String
  value             String
  description       String?
  shopifyResourceId String
  metafieldId       String

  shopifyResource   ShopifyResource @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)

  embedding         Embedding[]
  @@unique([shopifyResourceId, metafieldId])
  @@allow('all', shopifyResource.store.workspace.members?[auth().id == userId])
}

model ShopifyProductVariant {
  title             String
  price             String
  shopifyResourceId String
  shopifyResource   ShopifyResource @relation(fields: [shopifyResourceId], references: [id], onDelete: Cascade)
  variantId         String
  inventoryQuantity Int

  @@unique([shopifyResourceId, variantId])
  @@allow('all', shopifyResource.store.workspace.members?[auth().id == userId])
}

model DocumentResource extends KnowledgeResource {
  resourceUrl String @url
  metadata    Json
}

model MessageBlastCampaign {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt


  latestUpdatedById        String?
  latestUpdatedBy          WorkspaceUser?          @relation(fields: [latestUpdatedById], references: [id], onDelete: SetNull)
  latestUpdatedByTimestamp DateTime?

  type                     BlastCampaignType       @default(GENERAL)

  instagramAccountId       String
  instagramAccount         InstagramAccount        @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  title                    String
  status                   BlastCampaignStatus
  sendTime                 DateTime
  targetAudience           CommunityMember[]

  messages                 Message[]
  links                    Link[]
  shopifyStats             BlastShopifyStatistic[]

  messagesOpened           Int                     @default(0)
  messagesReplied          Int                     @default(0)
  clickthroughRate         Float                   @default(0)
  conversionRate           Float                   @default(0)
  totalCartAdds            Int                     @default(0)
  totalCheckoutStarts      Int                     @default(0)
  totalOrders              Int                     @default(0)
  totalClicks              Int                     @default(0)
  uniqueClicks             Int                     @default(0)
  revenue                  Decimal                 @default(0)

  blastContent             Json?

  blastAudienceMembers     BlastAudienceMember[]

  @@allow('create', true)
  @@allow('all', instagramAccount.workspace.members?[auth().id == userId])
}

model BlastAudienceMember {
  id                String                           @id @default(uuid())
  createdAt         DateTime                         @default(now())
  updatedAt         DateTime                         @default(now()) @updatedAt

  messageStatus     BlastAudienceMemberMessageStatus @default(PENDING)

  blastCampaignId   String
  blastCampaign     MessageBlastCampaign             @relation(fields: [blastCampaignId], references: [id], onDelete: Cascade)

  communityMemberId String
  communityMember   CommunityMember                  @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', blastCampaign.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', communityMember.workspace.members?[auth().id == userId])
}

model BlastTemplate {
  id          String                 @id @default(uuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @default(now()) @updatedAt

  title       String
  content     Json

  categoryId  String?
  category    BlastTemplateCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  workspaceId String
  workspace   Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

model BlastTemplateCategory {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  title       String

  workspaceId String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  templates   BlastTemplate[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum BlastCampaignType {
  MARKETING
  INFLUENCER
  GENERAL
}

enum BlastCampaignStatus {
  DRAFT
  START_SCHEDULING
  SCHEDULING
  SCHEDULING_FAILED
  SCHEDULED
  IN_PROGRESS
  SENT
  CANCELLED
  DELETED
  FAILED
}

enum BlastAudienceMemberMessageStatus {
  PENDING
  PROCESSING
  SCHEDULED
  IN_PROGRESS
  SENT
  CANCELLED
  FAILED
}

model ModeratedItem {
  id                       String                  @id @default(uuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now()) @updatedAt

  type                     ModeratedItemType
  visibility               ModeratedItemVisibility

  isHidden                 Boolean                 @default(false)

  timestamp                DateTime

  isCreatedManually        Boolean                 @default(false)

  commentId                String?                 @unique
  comment                  Comment?                @relation(fields: [commentId], references: [id], onDelete: Cascade)

  communityMemberId        String?
  communityMember          CommunityMember?        @relation(fields: [communityMemberId], references: [id])

  limitedCommunityMemberId String?
  limitedCommunityMember   LimitedCommunityMember? @relation(fields: [limitedCommunityMemberId], references: [id])

  conversationId           String?                 @unique
  conversation             Conversation?           @relation(fields: [conversationId], references: [id])

  workspaceId              String
  workspace                Workspace               @relation(fields: [workspaceId], references: [id])

  flaggedMessages          Message[]

  matchedFlags             ModerationFlagType[]
  matchedKeywords          String[]
  matchedIntents           String[]

  metadata                 Json?

  @@allow('create', true)
  @@allow('all', comment.author.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.facebookAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.communityMember.workspace.members?[auth().id == userId])
  @@allow('all', comment.author.limitedCommunityMember.workspace.members?[auth().id == userId])
  @@allow('all', conversation.workspace.members?[auth().id == userId])
}

model ModerationFlagConfig {
  id                          String                     @id @default(uuid())
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @default(now()) @updatedAt

  isEnabled                   Boolean                    @default(false)

  type                        ModerationFlagType
  isAutomated                 Boolean                    @default(false)

  moderationRule              ModerationRule?            @relation(fields: [moderationRuleId], references: [id])
  moderationRuleId            String?

  instagramModerationConfig   InstagramModerationConfig? @relation(fields: [instagramModerationConfigId], references: [id], onDelete: Cascade) // Deprecated
  instagramModerationConfigId String? // Deprecated

  facebookModerationConfig    FacebookModerationConfig?  @relation(fields: [facebookModerationConfigId], references: [id], onDelete: Cascade) // Deprecated
  facebookModerationConfigId  String? // Deprecated

  tiktokModerationConfig      TiktokModerationConfig?    @relation(fields: [tiktokModerationConfigId], references: [id], onDelete: Cascade) // Deprecated
  tiktokModerationConfigId    String? // Deprecated


  @@unique([type, instagramModerationConfigId])
  @@unique([type, facebookModerationConfigId])
  @@unique([type, tiktokModerationConfigId])
  @@unique([type, moderationRuleId])
  @@allow('create', true)
  @@allow('all', instagramModerationConfig.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', facebookModerationConfig.facebookPageAccount.workspace.members?[auth().id == userId])
  @@allow('all', tiktokModerationConfig.tiktokAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.instagramModerationConfig.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.facebookModerationConfig.facebookPageAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.tiktokModerationConfig.tiktokAccount.workspace.members?[auth().id == userId])
}


model ModerationIntentConfig {
  id               String          @id @default(uuid())

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  intent           String

  label            String?         @ignore

  titleId          String?
  title            Label?          @relation(fields: [titleId], references: [id], onDelete: SetNull)

  isAutomated      Boolean         @default(false)

  moderationRuleId String?
  moderationRule   ModerationRule? @relation(fields: [moderationRuleId], references: [id], onDelete: Cascade)

  @@unique([intent, moderationRuleId])
  @@allow('create', true)

  @@allow('all', moderationRule.instagramModerationConfig.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.facebookModerationConfig.facebookPageAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.tiktokModerationConfig.tiktokAccount.workspace.members?[auth().id == userId])
}


model ModerationKeywordsConfig {
  id               String          @id @default(uuid())

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  keywords         String[]

  isAutomated      Boolean         @default(false)

  moderationRuleId String?
  moderationRule   ModerationRule? @relation(fields: [moderationRuleId], references: [id], onDelete: Cascade)

  @@unique([keywords, moderationRuleId])
  @@allow('create', true)

  @@allow('all', moderationRule.instagramModerationConfig.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.facebookModerationConfig.facebookPageAccount.workspace.members?[auth().id == userId])
  @@allow('all', moderationRule.tiktokModerationConfig.tiktokAccount.workspace.members?[auth().id == userId])
}

enum ModerationRuleSurface {
  DIRECT_MESSAGES
  COMMENTS
}

model ModerationRule {
  id                                String                     @id @default(uuid())
  createdAt                         DateTime                   @default(now())
  updatedAt                         DateTime                   @default(now()) @updatedAt

  surface                           ModerationRuleSurface

  isKeywordsPreferenceActive        Boolean                    @default(false)
  keywords                          String[]                   // Deprecated

  keywordConfigs                    ModerationKeywordsConfig[]

  isIntentDetectionPreferenceActive Boolean                    @default(false)
  intents                           String[]                   // Deprecated

  flagConfigs                       ModerationFlagConfig[]

  intentConfigs                     ModerationIntentConfig[]

  instagramModerationConfig         InstagramModerationConfig? @relation(fields: [instagramModerationConfigId], references: [id])
  instagramModerationConfigId       String?

  facebookModerationConfig          FacebookModerationConfig?  @relation(fields: [facebookModerationConfigId], references: [id])
  facebookModerationConfigId        String?

  tiktokModerationConfig            TiktokModerationConfig?    @relation(fields: [tiktokModerationConfigId], references: [id])
  tiktokModerationConfigId          String?

  @@unique([surface, instagramModerationConfigId])
  @@unique([surface, facebookModerationConfigId])
  @@unique([surface, tiktokModerationConfigId])
  @@allow('create', true)
  @@allow('all', instagramModerationConfig.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', facebookModerationConfig.facebookPageAccount.workspace.members?[auth().id == userId])
  @@allow('all', tiktokModerationConfig.tiktokAccount.workspace.members?[auth().id == userId])
}

abstract model ModerationConfig {
  id                                       String                 @id @default(uuid())
  createdAt                                DateTime               @default(now())
  updatedAt                                DateTime               @default(now()) @updatedAt

  isEnabled                                Boolean                @default(false)

  isKeywordsPreferenceActive               Boolean                @default(false) // Deprecated
  keywords                                 String[] // Deprecated

  isAIBasedIntentDetectionPreferenceActive Boolean                @default(false) // Deprecated
  intents                                  String[] // Deprecated

  flagConfigs                              ModerationFlagConfig[] // Deprecated

  rules                                    ModerationRule[]

  @@allow('create', true)
}

model InstagramModerationConfig extends ModerationConfig {
  instagramAccountId String           @unique
  instagramAccount   InstagramAccount @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  @@allow('all', instagramAccount.workspace.members?[auth().id == userId])
}

model FacebookModerationConfig extends ModerationConfig {
  facebookPageAccountId String              @unique
  facebookPageAccount   FacebookPageAccount @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  @@allow('all', facebookPageAccount.workspace.members?[auth().id == userId])
}

model TiktokModerationConfig extends ModerationConfig {
  tiktokAccountId String        @unique
  tiktokAccount   TikTokAccount @relation(fields: [tiktokAccountId], references: [id], onDelete: Cascade)

  @@allow('all', tiktokAccount.workspace.members?[auth().id == userId])
}


model WorkingHours {
  id                  String                @id @default(uuid())

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt

  workspaceId         String                @unique
  workspace           Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  timeZone            String

  businessHoursConfig BusinessHoursConfig[]

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}


model BusinessHoursConfig {
  id             String       @id @default(uuid())

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  day            Day

  timeRanges     Json[]
  isOffline      Boolean      @default(true)

  workingHours   WorkingHours @relation(fields: [workingHoursId], references: [id], onDelete: Cascade)
  workingHoursId String

  @@unique([day, workingHoursId])
  @@allow('create', true)
  @@allow('all', true)
}

model ResponseJourney {
  id           String        @id @default(uuid())
  title        String?

  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  actionBlocks ActionBlock[]
  intent       Intent?
  description  String?

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum AutomationMode {
  AUTOPILOT
  COPILOT
  DRAFT
}

enum AutomationResponseStatus {
  GENERATED
  REMOVED
  SENT
  EXPIRED
}

model AutomationMetadata {
  id                       String                    @id @default(uuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt

  mode                     AutomationMode
  status                   AutomationResponseStatus  @default(GENERATED)
  generatedTimestamp       DateTime                  @default(now())
  originalText             String
  editedText               String?
  isEdited                 Boolean                   @default(false)

  inputContext             Json?

  intentId                 String?
  intent                   Intent?                   @relation(fields: [intentId], references: [id], onDelete: SetNull)

  commentId                String?                   @unique
  comment                  Comment?                  @relation(fields: [commentId], references: [id], onDelete: SetNull)

  aiGeneratedMessageId     String?                   @unique
  aiGeneratedMessage       AIGeneratedMessage?       @relation(fields: [aiGeneratedMessageId], references: [id], onDelete: SetNull)

  sentMessageId            String?                   @unique
  sentMessage              Message?                  @relation(fields: [sentMessageId], references: [id], onDelete: SetNull)

  workspaceId              String
  workspace                Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workspaceUserId          String?
  workspaceUser            WorkspaceUser?            @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)

  copilotGeneratedResponse CopilotGeneratedResponse?

  @@allow('all', true)
}

model CopilotGeneratedResponseSession {
  id                       String                     @id @default(uuid())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt

  status                   CopilotSessionStatus
  copilotGeneratedResponse CopilotGeneratedResponse[]

  @@allow('all', true)
}

model CopilotGeneratedResponse {
  id                     String                          @id @default(uuid())
  createdAt              DateTime                        @default(now())
  updatedAt              DateTime                        @default(now()) @updatedAt

  session                CopilotGeneratedResponseSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId              String

  targetedItemId         String
  targetItemType         CopilotResponseTarget

  targetedCommentId      String?
  targetedComment        Comment?                        @relation(fields: [targetedCommentId], references: [id], onDelete: SetNull)

  targetedConversationId String?
  targetedConversation   Conversation?                   @relation(fields: [targetedConversationId], references: [id], onDelete: SetNull)

  automationMetadataId   String?                         @unique
  automationMetadata     AutomationMetadata?             @relation(fields: [automationMetadataId], references: [id], onDelete: SetNull)

  generatedReply         String?
  finalReply             String?
  status                 CopilotResponseStatus
  shouldReply            Boolean                         @default(true)

  deliveryMethod         CopilotResponseDeliveryMethod

  @@allow('all', true)
}

enum AutopilotDraftStatus {
  GENERATED
  REMOVED
  SENT
  EDITED
  EDITED_AND_SENT
}

model AutopilotDraftState {
  id               String               @id @default(uuid())
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now()) @updatedAt
  draftedTimestamp DateTime

  commentId        String?              @unique
  comment          Comment?             @relation(fields: [commentId], references: [id], onDelete: SetNull)

  messageId        String?              @unique
  message          AIGeneratedMessage?  @relation(fields: [messageId], references: [id], onDelete: SetNull)

  originalMessage  String
  editedMessage    String?

  status           AutopilotDraftStatus @default(GENERATED)

  intentId         String?
  intent           Intent?              @relation(fields: [intentId], references: [id], onDelete: SetNull)

  workspaceId      String
  workspace        Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('all', true)
}


model UnknownIntentComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  commentId String   @unique
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', true)
}

enum ClusteringStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model InsightClusterPendingItem {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt

  workspaceId String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  commentId   String?          @unique
  comment     Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)

  messageId   String?          @unique
  message     Message?         @relation(fields: [messageId], references: [id], onDelete: Cascade)

  contentId   String?          @unique
  content     Content?         @relation(fields: [contentId], references: [id], onDelete: Cascade)

  status      ClusteringStatus @default(PENDING)

  @@index([workspaceId, status])

  @@allow('all', workspace.members?[auth().id == userId])
}

model InsightCategory {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt

  workspaceId String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  title       String
  insights    Insight[]

  groups      InsightGroup[]

  @@unique([workspaceId, title])
  @@allow('all', true)
}

enum CommunityInsightBin {
  FEEDBACK
  PRODUCT_REQUEST
  ISSUE_CONCERN
  COLLAB_REQUEST
}

model InsightGroup {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  lastItemAddedAt     DateTime              @db.Timestamptz(6)

  workspaceId         String
  workspace           Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  title               String

  llmAnalysisMetadata LLMAnalysisMetadata[]

  categoryId          String
  category            InsightCategory       @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  bin                 CommunityInsightBin?
  bins                CommunityInsightBin[]

  sentiment           Sentiment?

  status              InsightGroupStatus?   @default(VISIBLE)

  @@unique([workspaceId, title])
  @@allow('all', true)
}

enum InsightGroupStatus {
  VISIBLE
  HIDDEN
}

model TrackedTopic {
  id                  String                @id @default(dbgenerated("gen_random_uuid()"))
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt

  workspaceId         String
  workspace           Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  title               String
  description         String                @db.Text
  examples            String[]

  llmAnalysisMetadata LLMAnalysisMetadata[]

  @@unique([workspaceId, title])
  @@allow('all', workspace.members?[auth().id == userId])
}

model Insight {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt

  workspaceId         String
  workspace           Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  categoryId          String
  category            InsightCategory       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  title               String

  conversations       Conversation[]
  comments            Comment[]

  llmAnalysisMetadata LLMAnalysisMetadata[]

  @@unique([workspaceId, title])
  @@allow('all', true)
}

model GlobalLLMAnalysisMetadata {
  id                  String             @id @default(uuid())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt

  contentId           String?            @unique
  content             GlobalContent?     @relation(fields: [contentId], references: [id], onDelete: Cascade)

  generatedSummary    String?
  sentimentAnalysisId String?            @unique
  sentimentAnalysis   SentimentAnalysis? @relation("GlobalLLMAnalysisSentiment", fields: [sentimentAnalysisId], references: [id], onDelete: SetNull)

  @@deny('all', true)
}

model LLMAnalysisMetadata {
  id                    String             @id @default(uuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @default(now()) @updatedAt

  workspaceId           String
  workspace             Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  commentId             String?            @unique
  comment               Comment?           @relation(fields: [commentId], references: [id], onDelete: Cascade)

  messageId             String?            @unique
  message               Message?           @relation(fields: [messageId], references: [id], onDelete: Cascade)

  contentId             String?            @unique
  content               Content?           @relation(fields: [contentId], references: [id], onDelete: Cascade)

  insightId             String?
  insight               Insight?           @relation(fields: [insightId], references: [id], onDelete: SetNull)

  insightGroupId        String?
  insightGroup          InsightGroup?      @relation(fields: [insightGroupId], references: [id], onDelete: SetNull)

  sentimentAnalysisId   String?            @unique
  sentimentAnalysis     SentimentAnalysis? @relation(fields: [sentimentAnalysisId], references: [id], onDelete: SetNull)

  generatedSummary      String?            @db.Text

  shouldEscalateToHuman Boolean            @default(false)

  languageLocale        String?            @regex('^[a-z]{2,3}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?(-[a-z0-9]+)*$')

  isLanguageEnglish     Boolean?

  trackedTopics         TrackedTopic[]
  mentionedKeywords     KeywordMention[]
  mentionedProducts     ProductMention[]

  @@index([workspaceId, insightGroupId])
  @@allow('all', true)
}

enum CopilotResponseDeliveryMethod {
  COMMENT
  DIRECT_MESSAGE
}

enum CopilotResponseTarget {
  COMMENT
  CONVERSATION
}

enum CopilotResponseStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CopilotSessionStatus {
  IN_PROGRESS
  COMPLETED
  ABORTED
}

model ActionBlockConfig {
  id                  Int              @id @default(autoincrement())
  actionBlockType     ActionBlockType  @unique
  description         String?
  actionBlockSettings Json
  coreFunctions       FunctionConfig[]
  corePrompt          String

  @@allow('all', true)
}

model FunctionConfig {
  id                         String              @id @default(uuid())
  name                       String
  config                     Json

  actionBlockConfigReference ActionBlockConfig[]
  actionBlockReference       ActionBlock[]

  @@allow('all', true)
}


model ActionBlock {
  id                         String                    @id @default(dbgenerated("gen_random_uuid()"))
  type                       ActionBlockType
  configValues               Json
  functions                  FunctionConfig[]
  prompt                     String
  journeySessionsLastBlock   JourneySession[]
  journeySessionsLastBlockV2 JourneySessionV2[]
  customResponseSessions     CustomResponseSession[]
  customResponseSessionsV2   CustomResponseSessionV2[]
  followUpSessions           JourneyFollowUpSession[]

  responseJourney            ResponseJourney?          @relation(fields: [responseJourneyId], references: [id], onDelete: Cascade)
  responseJourneyId          String?

  journey                    Journey?                  @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  journeyId                  String?

  inboxRule                  InboxRule?                @relation(fields: [inboxRuleId], references: [id], onDelete: Cascade)
  inboxRuleId                String?

  intent                     Intent?                   @relation(fields: [intentId], references: [id], onDelete: Cascade)
  intentId                   String?

  delay                      Delay?

  messagesSent               Message[]
  journeyResponses           JourneyResponse[]

  quizAnswers                QuizAnswer[]

  @@allow('create', true)
  @@allow('all', responseJourney.workspace.members?[auth().id == userId])
  @@allow('all', journey.workspace.members?[auth().id == userId])
  @@allow('all', intent.workspace.members?[auth().id == userId])
}

enum TriggerType {
  INSTAGRAM
  FACEBOOK
  SHOPIFY
  BLAST
  CROSS_PLATFORM
}

enum JourneyStatus {
  DRAFT
  SETTING_UP
  LIVE
  DELETED
}

enum InboxRuleStatus {
  DRAFT
  SETTING_UP
  ACTIVE
  DELETED
}


enum InstagramTriggerEvent {
  INSTAGRAM_SPECIFIC_CONTENT_COMMENT
  INSTAGRAM_ANY_CONTENT_COMMENT
  INSTAGRAM_SPECIFIC_STORY_REPLY
  INSTAGRAM_ANY_STORY_REPLY
  INSTAGRAM_MESSAGE_WITH_KEYWORD
  INSTAGRAM_SPECIFIC_AD_CLICK
  INSTAGRAM_ANY_AD_CLICK
  INSTAGRAM_CONTENT_MENTIONED
  INSTAGRAM_STORY_MENTIONED
  INSTAGRAM_REFERRAL_LINK_CLICK
  INSTAGRAM_LIVE_COMMENT
}

enum FacebookTriggerEvent {
  FACEBOOK_SPECIFIC_CONTENT_COMMENT
  FACEBOOK_ANY_CONTENT_COMMENT
  FACEBOOK_MESSAGE_WITH_KEYWORD
}

enum CrossPlatformTriggerEvent {
  ANY_CONTENT_COMMENT
  ANY_DM
}

enum ShopifyTriggerEvent {
  CART_ABANDONED
  ADD_TO_CART
  ORDER_SHIPPED
  ORDER_DELIVERED
  CHECKOUT_COMPLETED
  PRODUCT_VIEWED
}

enum AutomationPreviewStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
  ABORTED
}

model AutomationPreviewSession {
  id          String                  @id @default(dbgenerated("gen_random_uuid()"))

  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt

  status      AutomationPreviewStatus @default(QUEUED)

  config      Json

  inboxRules  InboxRule[]

  journeys    Journey[]

  previews    AutomationPreview[]

  workspaceId String
  workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('all', workspace.members?[auth().id == userId])
}

model AutomationPreview {
  id          String                   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @default(now()) @updatedAt

  status      AutomationPreviewStatus  @default(QUEUED)

  sessionId   String
  session     AutomationPreviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  comments    Comment[]
  messages    Message[]

  workspaceId String
  workspace   Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('all', workspace.members?[auth().id == userId])
}

model InboxRule {
  id                             String                    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                      DateTime                  @default(now())
  updatedAt                      DateTime                  @default(now()) @updatedAt

  createdById                    String?
  createdBy                      WorkspaceUser?            @relation("RuleCreator", fields: [createdById], references: [id], onDelete: SetNull)

  lastUpdatedById                String?
  lastUpdatedBy                  WorkspaceUser?            @relation("RuleUpdater", fields: [lastUpdatedById], references: [id], onDelete: SetNull)
  lastUpdatedByTimestamp         DateTime?

  workspaceId                    String
  workspace                      Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  triggers                       InboxRuleTrigger[]

  scope                          TriggerScope              @default(ALL)
  replyCondition                 TriggerReplyCondition?

  triggerWords                   String[]
  triggerIntents                 String[]

  additionalConditions           Json
  additionalConditionsUniqueHash String                    @default("")

  blockOrder                     Json
  actionBlocks                   ActionBlock[]

  name                           String
  status                         InboxRuleStatus

  processedMessages              Int                       @default(0)
  processedComments              Int                       @default(0)

  facebookPageAccountId          String?
  facebookPageAccount            FacebookPageAccount?      @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  instagramAccountId             String?
  instagramAccount               InstagramAccount?         @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  delay                          Delay?

  previewSessionId               String?
  previewSession                 AutomationPreviewSession? @relation(fields: [previewSessionId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', workspace.members?[auth().id == userId])
}

enum JobStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Job {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  status         JobStatus @default(NOT_STARTED)
  scheduledAt    DateTime
  functionConfig Json
}

model Journey {
  id                       String                        @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @default(now()) @updatedAt

  config                   Json?

  createdById              String?
  createdBy                WorkspaceUser?                @relation("JourneyCreator", fields: [createdById], references: [id], onDelete: SetNull)

  latestUpdatedById        String?
  latestUpdatedBy          WorkspaceUser?                @relation("JourneyUpdater", fields: [latestUpdatedById], references: [id], onDelete: SetNull)
  latestUpdatedByTimestamp DateTime?


  trigger                  Trigger?
  triggers                 JourneyTrigger[]
  name                     String
  status                   JourneyStatus
  blockOrder               Json
  actionBlocks             ActionBlock[]
  links                    Link[]
  groupedStatsLinks        GroupedJourneyLink[]
  audience                 CommunityMember[]             @relation("JourneyAudience")
  customFieldStatistics    JourneyCustomFieldStatistic[] @ignore
  collectedData            JourneyCollectedData[]

  sessions                 JourneySession[]
  sessionsV2               JourneySessionV2[]
  quizSessions             QuizSession[]
  quizSessionsV2           QuizSessionV2[]
  quizAnswers              QuizAnswer[]
  customResponseSessions   CustomResponseSession[]
  customResponseSessionsV2 CustomResponseSessionV2[]
  responses                JourneyResponse[]

  messagesSentCount        Int                           @default(0)
  messageRepliesCount      Int                           @default(0)
  messagesOpenedCount      Int                           @default(0)
  commentsSentCount        Int                           @default(0)
  commentRepliesCount      Int                           @default(0)

  messagesSent             Message[]
  commentsSent             Comment[]

  activeConversations      Conversation[]

  workspaceId              String
  workspace                Workspace                     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  metrics                  JourneyMetric[]

  shopifyStatistics        JourneyShopifyStatistic[]


  previewSessionId         String?
  previewSession           AutomationPreviewSession?     @relation(fields: [previewSessionId], references: [id], onDelete: Cascade)

  @@index([id, status])
  @@allow('create', true)
  @@allow('all', true)
}

enum ThirdPartyAppAccessScope {
  EMAILS_READ
  PHONE_NUMBERS_READ
  EMAILS_WRITE
  PHONE_NUMBERS_WRITE
  WORKSPACE_READ
  WEBHOOKS_WRITE
  WEBHOOKS_DELETE
  CUSTOM_FIELD_VALUES_READ
  CUSTOM_FIELD_VALUES_WRITE
}

model ThirdPartyApp {
  id           String                     @id @default(uuid())
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @default(now()) @updatedAt

  name         String
  iconUri      String

  clientSecret String

  redirectUris String[]

  appScopes    ThirdPartyAppAccessScope[]

  workspaceId  String?
  workspace    Workspace?                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tokens       ThirdPartyAppToken[]

  @@allow('all', false)
}

model ThirdPartyAppToken {
  id                   String                     @id @default(uuid())
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @default(now()) @updatedAt

  accessToken          String?
  refreshToken         String?

  tokenScope           ThirdPartyAppAccessScope[]

  workspaceId          String
  workspace            Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  thirdPartyAppId      String
  thirdPartyApp        ThirdPartyApp              @relation(fields: [thirdPartyAppId], references: [id], onDelete: Cascade)

  webhookSubscriptions WebhookSubscription[]

  @@allow('all', false)
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
}

enum WebhookEventType {
  CREATE
  UPDATE
  DELETE
}

enum WebhookSubscriptionTarget {
  COMMUNITY_MEMBER_EMAIL
  COMMUNITY_MEMBER_PHONE_NUMBER
  COMMUNITY_MEMBER_CUSTOM_FIELD_VALUE
}

enum WebhookPayloadFormat {
  JSON
  URL_ENCODED
}

enum WebhookIntegrationType {
  STANDARD
  ZAPIER
}


model WebhookSubscription {
  id                         String                      @id @default(uuid())

  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt

  expiresAt                  DateTime?

  status                     WebhookStatus               @default(INACTIVE)

  subscribedTargets          WebhookSubscriptionTarget[]

  events                     WebhookEventType[]

  secret                     String

  payloadURL                 String
  payloadFormat              WebhookPayloadFormat        @default(JSON)

  dumpExistingDataOnFirstRun Boolean                     @default(false)

  integrationType            WebhookIntegrationType      @default(STANDARD)

  appTokenId                 String?
  appToken                   ThirdPartyAppToken?         @relation(fields: [appTokenId], references: [id], onDelete: Cascade)

  workspaceId                String
  workspace                  Workspace                   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@allow('create', workspace.members?[auth().id == userId])
  @@allow('all', false)
}


enum DelayType {
  WAIT
  SCHEDULED
}

model Delay {
  id                String       @id @default(dbgenerated("gen_random_uuid()"))

  type              DelayType

  scheduleTimestamp DateTime?

  days              Int?
  hours             Int?
  minutes           Int?

  actionBlockId     String?      @unique
  actionBlock       ActionBlock? @relation(fields: [actionBlockId], references: [id], onDelete: Cascade)

  inboxRuleId       String?      @unique
  inboxRule         InboxRule?   @relation(fields: [inboxRuleId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', true)
}

model JourneySession {
  id                               String                   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                        DateTime                 @default(now())
  updatedAt                        DateTime                 @default(now()) @updatedAt

  lastActionBlockExecutedId        String?
  lastActionBlockExecutedTimestamp DateTime?
  lastActionBlock                  ActionBlock?             @relation(fields: [lastActionBlockExecutedId], references: [id], onDelete: SetNull)

  status                           JourneySessionStatus     @default(NONE)

  journeyId                        String
  journey                          Journey                  @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  conversationId                   String?
  conversation                     Conversation?            @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  communityMemberId                String
  communityMember                  CommunityMember          @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  responses                        JourneyResponse[]

  delayedCommentId                 String?                  @unique
  delayedComment                   Comment?                 @relation("delayedComment", fields: [delayedCommentId], references: [id], onDelete: SetNull)

  delayedMessageId                 String?                  @unique
  delayedMessage                   Message?                 @relation("delayedMessage", fields: [delayedMessageId], references: [id], onDelete: SetNull)

  validatedTrigger                 JourneyTrigger?          @relation(fields: [validatedTriggerId], references: [id], onDelete: SetNull)
  validatedTriggerId               String?

  triggerEntity                    JourneyTriggerEntity?
  triggerMessageId                 String?
  triggerMessage                   Message?                 @relation(fields: [triggerMessageId], references: [id], onDelete: SetNull)

  triggeredById                    String?
  triggeredBy                      WorkspaceUser?           @relation(fields: [triggeredById], references: [id], onDelete: SetNull)

  customResponseSessions           CustomResponseSession[]
  quizSessions                     QuizSession[]
  followUpSessions                 JourneyFollowUpSession[]

  triggerCommentId                 String?
  triggerComment                   Comment?                 @relation(fields: [triggerCommentId], references: [id], onDelete: SetNull)


  @@index([status])
  @@unique([journeyId, conversationId])
  @@unique([journeyId, communityMemberId])
  @@allow('all', true)
}

model JourneySessionV2 {
  id                               String                    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                        DateTime                  @default(now())
  updatedAt                        DateTime                  @default(now()) @updatedAt

  isExecuting                      Boolean?                  @default(false)

  lastActionBlockExecutedId        String?
  lastActionBlockExecutedTimestamp DateTime?
  lastActionBlock                  ActionBlock?              @relation(fields: [lastActionBlockExecutedId], references: [id], onDelete: SetNull)

  status                           JourneySessionStatus      @default(NONE)

  journeyId                        String
  journey                          Journey                   @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  conversationId                   String?
  conversation                     Conversation?             @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  communityMemberId                String
  communityMember                  CommunityMember           @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  responses                        JourneyResponse[]

  delayedCommentId                 String?                   @unique
  delayedComment                   Comment?                  @relation("delayedCommentV2", fields: [delayedCommentId], references: [id], onDelete: SetNull)

  delayedMessageId                 String?                   @unique
  delayedMessage                   Message?                  @relation("delayedMessageV2", fields: [delayedMessageId], references: [id], onDelete: SetNull)

  validatedTrigger                 JourneyTrigger?           @relation(fields: [validatedTriggerId], references: [id], onDelete: SetNull)
  validatedTriggerId               String?

  triggerEntity                    JourneyTriggerEntity?
  triggerMessageId                 String?
  triggerMessage                   Message?                  @relation(fields: [triggerMessageId], references: [id], onDelete: SetNull)

  triggeredById                    String?
  triggeredBy                      WorkspaceUser?            @relation(fields: [triggeredById], references: [id], onDelete: SetNull)

  customResponseSessionsV2         CustomResponseSessionV2[]
  quizSessionsV2                   QuizSessionV2[]

  triggerCommentId                 String?
  triggerComment                   Comment?                  @relation(fields: [triggerCommentId], references: [id], onDelete: SetNull)


  @@index([status])
  @@index([journeyId, conversationId])
  @@index([journeyId, communityMemberId])
  @@allow('all', true)
}

enum JourneyTriggerEntity {
  COMMENT
  MESSAGE
  COMMUNITY_MEMBER
}

enum JourneySessionStatus {
  NONE
  STARTED
  FAILED
  COMPLETED
  SUSPENDED
}

model JourneyResponse {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt

  journeyId          String
  journey            Journey             @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  actionBlockId      String?
  actionBlock        ActionBlock?        @relation(fields: [actionBlockId], references: [id], onDelete: SetNull)

  questionId         String?
  questionText       String?

  messageId          String?             @unique
  message            Message?            @relation(fields: [messageId], references: [id], onDelete: Cascade)

  commentId          String?             @unique
  comment            Comment?            @relation(fields: [commentId], references: [id], onDelete: Cascade)

  responseType       JourneyResponseType

  communityMemberId  String
  communityMember    CommunityMember     @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  quizSessionId      String?
  quizSession        QuizSession?        @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)

  quizSessionIdV2    String?
  quizSessionV2      QuizSessionV2?      @relation(fields: [quizSessionIdV2], references: [id], onDelete: Cascade)

  journeySessionId   String?
  journeySession     JourneySession?     @relation(fields: [journeySessionId], references: [id], onDelete: Cascade)

  journeySessionIdV2 String?
  journeySessionV2   JourneySessionV2?   @relation(fields: [journeySessionIdV2], references: [id], onDelete: Cascade)

  @@unique([actionBlockId, messageId, questionId])
  @@unique([actionBlockId, commentId, questionId])
  @@allow('all', true)
}

enum JourneyResponseType {
  MESSAGE
  COMMENT
}

model QuizAnswer {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  actionBlockId     String?
  actionBlock       ActionBlock?    @relation(fields: [actionBlockId], references: [id], onDelete: SetNull)

  questionId        String
  questionText      String

  messageId         String          @unique
  message           Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)

  journeyId         String
  journey           Journey         @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  communityMemberId String
  communityMember   CommunityMember @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  quizSessionId     String
  quizSession       QuizSession     @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)

  @@unique([actionBlockId, messageId, questionId])
  @@allow('all', true)
}

model QuizSession {
  id                       String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime            @default(now()) @updatedAt @db.Timestamptz(6)

  askedQuestionIds         String[]

  lastQuestionAskedId      String?
  lastMessageSentTimestamp DateTime?

  status                   QuizSessionStatus   @default(NONE)
  currentMessageState      QuizMessageState?   @default(INITIAL)
  reminderStatus           QuizReminderStatus? @default(NOT_SENT)

  journeyId                String
  journey                  Journey             @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  journeySessionId         String?
  journeySession           JourneySession?     @relation(fields: [journeySessionId], references: [id], onDelete: Cascade)

  conversationId           String
  conversation             Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  communityMemberId        String
  communityMember          CommunityMember     @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  answers                  QuizAnswer[]
  journeyResponses         JourneyResponse[]

  @@unique([journeyId, conversationId])
  @@unique([journeyId, communityMemberId])
  @@allow('all', true)
}


model QuizSessionV2 {
  id                       String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @default(now()) @updatedAt

  askedQuestionIds         String[]

  lastQuestionAskedId      String?
  lastMessageSentTimestamp DateTime?

  status                   QuizSessionStatus   @default(NONE)
  currentMessageState      QuizMessageState?   @default(INITIAL)
  reminderStatus           QuizReminderStatus? @default(NOT_SENT)

  journeyId                String
  journey                  Journey             @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  journeySessionId         String
  journeySession           JourneySessionV2    @relation(fields: [journeySessionId], references: [id], onDelete: Cascade)

  conversationId           String
  conversation             Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  communityMemberId        String
  communityMember          CommunityMember     @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  journeyResponses         JourneyResponse[]

  @@index([journeyId, conversationId])
  @@index([journeyId, communityMemberId])
  @@allow('all', true)
}

enum QuizReminderStatus {
  NOT_SENT
  SCHEDULED
  SENT
  FAILED
}

enum QuizSessionStatus {
  NONE
  STARTED
  COMPLETED
  FAILED
}

enum QuizMessageState {
  INITIAL
  SENDING
  FAILED
  SENT
}

model JourneyFollowUpSession {
  id               String                  @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime                @db.Timestamptz(6) @default(now())
  updatedAt        DateTime                @db.Timestamptz(6) @default(now()) @updatedAt

  lastUpsertedAt   DateTime                @db.Timestamptz(6) @default(now())

  followUpType     JourneyFollowUpAudience
  status           JourneyFollowUpStatus

  blockId          String
  block            ActionBlock             @relation(fields: [blockId], references: [id], onDelete: Cascade)

  journeySessionId String
  journeySession   JourneySession          @relation(fields: [journeySessionId], references: [id], onDelete: Cascade)

  @@unique([followUpType, journeySessionId])

  @@allow('create', true)
  @@allow('all', journeySession.journey.workspace.members?[auth().id == userId])
}

enum JourneyFollowUpAudience {
  EVERYONE
  INCOMPLETED_QUESTIONS
  COMPLETED_QUESTIONS
  CLICKED_LINK
  ABANDONED_CART
  PURCHASED
}

enum JourneyFollowUpStatus {
  STARTED
  SCHEDULED
  COMPLETED
  FAILED
}

model CustomResponseSession {
  id                String                      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @default(now()) @updatedAt

  status            CustomResponseSessionStatus @default(NONE)

  blockId           String
  block             ActionBlock                 @relation(fields: [blockId], references: [id], onDelete: Cascade)

  journeyId         String
  journey           Journey                     @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  journeySessionId  String?
  journeySession    JourneySession?             @relation(fields: [journeySessionId], references: [id], onDelete: Cascade)

  communityMemberId String
  communityMember   CommunityMember             @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  @@unique([journeyId, blockId, communityMemberId])
  @@allow('all', true)
}

model CustomResponseSessionV2 {
  id                 String                      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @default(now()) @updatedAt

  status             CustomResponseSessionStatus @default(NONE)

  blockId            String
  block              ActionBlock                 @relation(fields: [blockId], references: [id], onDelete: Cascade)

  journeyId          String
  journey            Journey                     @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  journeySessionIdV2 String
  journeySessionV2   JourneySessionV2            @relation(fields: [journeySessionIdV2], references: [id], onDelete: Cascade)

  communityMemberId  String
  communityMember    CommunityMember             @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  @@index([journeyId, communityMemberId])
  @@allow('all', true)
}

enum CustomResponseSessionStatus {
  NONE
  RESPONSE_SENT
  COMPLETED
}

abstract model InboxRuleMetaTrigger {
  id                 String            @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt

  contentTriggers    ContentTrigger[]

  inboxRuleTriggerId String?           @unique
  inboxRuleTrigger   InboxRuleTrigger? @relation(fields: [inboxRuleTriggerId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', inboxRuleTrigger.inboxRule.workspace.members?[auth().id == userId])
}

model InstagramInboxRuleTrigger extends InboxRuleMetaTrigger {
  event InstagramTriggerEvent
}

model FacebookInboxRuleTrigger extends InboxRuleMetaTrigger {
  event FacebookTriggerEvent
}

model CrossPlatformInboxRuleTrigger {
  id                 String                    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @default(now()) @updatedAt

  event              CrossPlatformTriggerEvent

  inboxRuleTriggerId String?                   @unique
  inboxRuleTrigger   InboxRuleTrigger?         @relation(fields: [inboxRuleTriggerId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', inboxRuleTrigger.inboxRule.workspace.members?[auth().id == userId])
}

model InboxRuleTrigger {
  id                   String                         @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @default(now()) @updatedAt

  type                 TriggerType

  instagramTrigger     InstagramInboxRuleTrigger?
  facebookTrigger      FacebookInboxRuleTrigger?
  crossPlatformTrigger CrossPlatformInboxRuleTrigger?

  inboxRuleId          String                         @unique
  inboxRule            InboxRule                      @relation(fields: [inboxRuleId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', inboxRule.workspace.members?[auth().id == userId])
}

model JourneyTrigger {
  id                  String             @id @default(dbgenerated("gen_random_uuid()"))
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt

  type                TriggerType
  instagramTrigger    InstagramTrigger?
  facebookTrigger     FacebookTrigger?

  validatedSessions   JourneySession[]
  validatedSessionsV2 JourneySessionV2[]

  journeyId           String
  journey             Journey            @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', journey.workspace.members?[auth().id == userId])
}

model Trigger {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt

  type             TriggerType
  instagramTrigger InstagramTrigger?
  facebookTrigger  FacebookTrigger?

  journeyId        String            @unique
  journey          Journey           @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@allow('all', journey.workspace.members?[auth().id == userId])
}

abstract model MetaTrigger {
  id                             String                 @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @default(now()) @updatedAt

  contentTriggers                ContentTrigger[]

  scope                          TriggerScope           @default(ALL)
  replyCondition                 TriggerReplyCondition?


  triggerWords                   String[]
  triggerIntents                 String[]

  isDisabledOnNegativeSentiment  Boolean                @default(false)

  additionalConditions           Json
  additionalConditionsUniqueHash String                 @default("")

  triggerId                      String?                @unique
  trigger                        Trigger?               @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  journeyTriggerId               String?                @unique
  journeyTrigger                 JourneyTrigger?        @relation(fields: [journeyTriggerId], references: [id], onDelete: Cascade)
}

model InstagramTrigger extends MetaTrigger {
  instagramAccountId String
  instagramAccount   InstagramAccount      @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)

  event              InstagramTriggerEvent

  @@allow('create', true)
  @@allow('all', instagramAccount.workspace.members?[auth().id == userId])
}

model FacebookTrigger extends MetaTrigger {
  facebookPageAccountId String
  facebookPageAccount   FacebookPageAccount  @relation(fields: [facebookPageAccountId], references: [id], onDelete: Cascade)

  event                 FacebookTriggerEvent

  @@allow('create', true)
  @@allow('all', facebookPageAccount.workspace.members?[auth().id == userId])
}

model ContentTrigger {
  id                          String                     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @default(now()) @updatedAt

  contentId                   String
  content                     Content                    @relation(fields: [contentId], references: [id], onDelete: Cascade)

  instagramTriggerId          String?
  instagramTrigger            InstagramTrigger?          @relation(fields: [instagramTriggerId], references: [id], onDelete: Cascade)

  facebookTriggerId           String?
  facebookTrigger             FacebookTrigger?           @relation(fields: [facebookTriggerId], references: [id], onDelete: Cascade)

  inboxRuleInstagramTriggerId String?
  inboxRuleInstagramTrigger   InstagramInboxRuleTrigger? @relation(fields: [inboxRuleInstagramTriggerId], references: [id], onDelete: Cascade)

  inboxRuleFacebookTriggerId  String?
  inboxRuleFacebookTrigger    FacebookInboxRuleTrigger?  @relation(fields: [inboxRuleFacebookTriggerId], references: [id], onDelete: Cascade)

  @@allow('create', true)
  @@unique([contentId, instagramTriggerId])
  @@unique([contentId, facebookTriggerId])
  @@unique([contentId, inboxRuleInstagramTriggerId])
  @@unique([contentId, inboxRuleFacebookTriggerId])
  @@allow('all', content.relevantAccount.instagramAccount.workspace.members?[auth().id == userId])
  @@allow('all', content.relevantAccount.facebookAccount.workspace.members?[auth().id == userId])
}

model JourneyCustomFieldStatistic {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  journeyId     String
  journey       Journey     @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  customFieldId String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  count         Int

  @@unique([journeyId, customFieldId])
  @@allow('all', true)
}

model JourneyCollectedData {
  id                String                   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now()) @updatedAt

  journeyId         String
  journey           Journey                  @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  customFieldId     String?
  customField       CustomField?             @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  communityMemberId String
  communityMember   CommunityMember          @relation(fields: [communityMemberId], references: [id], onDelete: Cascade)

  collectedDataType JourneyCollectedDataType

  count             Int                      @default(0)

  @@unique([journeyId, customFieldId, collectedDataType, communityMemberId])
  @@allow('all', true)
}

enum JourneyCollectedDataType {
  CUSTOM
  LABEL
  FIRST_NAME
  LAST_NAME
  STREET_ADDRESS
  CITY
  COUNTRY
  ZIP_CODE
  EMAIL
}

model Prompts {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  category    PromptCategory?
  key         String          @unique
  description String?
  prompt      String
  drafts      Json?

  @@allow('all', true)
}

enum PromptCategory {
  MASTER
  GENERAL
  TONE_INSTRUCTIONS
  TONE_ENHANCEMENT
  RESPONSE
  CHANNEL
  GREETING
  SENTIMENT
  MISC
  COPILOT
  MODERATION
}

enum TriggerScope {
  ALL
  SOME
}

enum TriggerReplyCondition {
  STATIC_KEYWORDS
  AI_DETECTION
}

enum ActionBlockType {
  INBOX_TRIAGE
  AI_QUIZ
  CUSTOM_RESPONSE
  DM_CUSTOM_RESPONSE
  COMMENT_CUSTOM_RESPONSE
  DM_VIA_COMMENT_CUSTOM_RESPONSE
  FOLLOW_UP_RESPONSE
  REFUND
  SHOPIFY_DRAFT_ORDER
  SHOPIFY_REPLACEMENT
  SHOPIFY_EXCHANGES
  SHOPIFY_CANCEL_ORDER
  SHOPIFY_REFUND
  SHOPIFY_DISCOUNT_UNIT
  SHOPIFY_RETURN
  STORE_LOCATOR
  SHOPIFY_SALE
  ISO_PRODUCT
  DIRECT_PROMPT
  SAVE_CUSTOM_DATA
}

enum Status {
  DRAFT
  LIVE
  PENDING_TRAINING
  TRAINING
  TRAINED
  FAILED
}

enum MessageType {
  TEXT
  IMAGE
  CARD
  VIDEO
  STORY_MENTION
  STORY_REPLY
  AUDIO
  FILE
  SHARE
  UNSUPPORTED
  POSTBACK
  PRODUCT_CARD
  ORDER_CARD
  COUPON_CARD
  RETURN_CARD
}

enum Platform {
  INSTAGRAM
  MESSENGER
  SHOPIFY
  CROSS_PLATFORM
  FACEBOOK
  TIKTOK
}

enum ModerationFlagType {
  SPAM
  NEGATIVE_SENTIMENT
}

enum ModeratedItemVisibility {
  LIVE
  HIDDEN
}

enum ModeratedItemType {
  COMMENT
  MESSAGE
}

enum ContentType {
  CAROUSEL_ALBUM
  IMAGE
  VIDEO
}

enum ContentSurface {
  AD
  FEED
  REELS
  STORY
}

enum PersonaResponseTime {
  UNDER_5_MIN
  UNDER_1_HR
  UNDER_1_DAY
  UNDER_3_DAYS
}

enum CommentViewState {
  VISIBLE
  HIDDEN
  DELETED
}

enum PersonaMessageLength {
  SHORT
  MULTI_LINE
}

enum Industry {
  RETAIL
  FASHION_APPAREL
  HEALTH_BEAUTY
  CONSUMER_ELECTRONICS
  HOME_FURNITURE
  RESTAURANTS
  HOSPITALITY
  EVENTS
  PET_SERVICES
  PUBLISHING
  GAMING
  FILM_TV
  MUSEUMS_PARKS
  AUTOMOTIVE
  OTHER
}

enum PersonaTrait {
  ADAPTABLE
  AMBITIOUS
  APPROACHABLE
  ARTISTIC
  ASSERTIVE
  AUTHORITATIVE
  BOLD
  BRAVE
  CLEVER
  CONFIDENT
  COURAGEOUS
  CREATIVE
  CURIOUS
  DECISIVE
  DEPENDABLE
  DETERMINED
  DYNAMIC
  EFFICIENT
  EMPATHETIC
  ENERGETIC
  ENCOURAGING
  FLEXIBLE
  FRIENDLY
  FUNNY
  HELPFUL
  INFORMATIVE
  INQUISITIVE
  INSPIRATIONAL
  INTELLIGENT
  INVITING
  KNOWLEDGEABLE
  LOYAL
  MOTIVATIONAL
  ORGANIZED
  PASSIONATE
  PERSISTENT
  PERSONAL
  PRODUCTIVE
  PROFESSIONAL
  RELIABLE
  RESILIENT
  RESOURCEFUL
  RESPONSIBLE
  SARCASTIC
  SASSY
  SINCERE
  STRONG
  SUPPORTIVE
  SWEET
  TENACIOUS
  TRUSTWORTHY
  VERSATILE
  WITTY
}

enum KnowledgeResourceType {
  PDF
  SHOPIFY_PRODUCT
  SHOPIFY_PAGE
  URL
  SHADOW_TXT
  CUSTOM_PRODUCT
}

enum UploadStatus {
  FAILED
  SUCCESSFUL
  PENDING
  DRAFT
}

enum EmbeddingEntity {
  DOCUMENT_RESOURCE
  SHOPIFY_PRODUCT
  SHOPIFY_PAGE
  INTENT
}

enum LabelType {
  INBOX
  COMMUNITY
  CONTENT
  MODERATION
}

enum InstagramAccountType {
  CREATOR
  BUSINESS
  CONSUMER
  PERSONAL
  PROFESSIONAL
}

enum InstagramFollowingStatus {
  FOLLOWING
  FOLLOWER
  MUTUAL_FOLLOW
}

enum CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SPL
  SRD
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TVD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XCD
  XDR
  XOF
  XPF
  YER
  ZAR
  ZMW
  ZWL
}

enum TikTokAccountType {
  BUSINESS
  AD
  SHOP
}

enum TikTokUserType {
  SELLER
  CREATOR
  PARTNER
}