"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/thread-stream";
exports.ids = ["vendor-chunks/thread-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/thread-stream/index.js":
/*!*********************************************!*\
  !*** ./node_modules/thread-stream/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { version } = __webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/thread-stream/package.json\");\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst { Worker } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst { join } = __webpack_require__(/*! path */ \"path\");\nconst { pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nconst { wait } = __webpack_require__(/*! ./lib/wait */ \"(rsc)/./node_modules/thread-stream/lib/wait.js\");\nconst { WRITE_INDEX, READ_INDEX } = __webpack_require__(/*! ./lib/indexes */ \"(rsc)/./node_modules/thread-stream/lib/indexes.js\");\nconst buffer = __webpack_require__(/*! buffer */ \"buffer\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst kImpl = Symbol(\"kImpl\");\n// V8 limit for string size\nconst MAX_STRING = buffer.constants.MAX_STRING_LENGTH;\nclass FakeWeakRef {\n    constructor(value){\n        this._value = value;\n    }\n    deref() {\n        return this._value;\n    }\n}\nclass FakeFinalizationRegistry {\n    register() {}\n    unregister() {}\n}\n// Currently using FinalizationRegistry with code coverage breaks the world\n// Ref: https://github.com/nodejs/node/issues/49344\nconst FinalizationRegistry = process.env.NODE_V8_COVERAGE ? FakeFinalizationRegistry : global.FinalizationRegistry || FakeFinalizationRegistry;\nconst WeakRef = process.env.NODE_V8_COVERAGE ? FakeWeakRef : global.WeakRef || FakeWeakRef;\nconst registry = new FinalizationRegistry((worker)=>{\n    if (worker.exited) {\n        return;\n    }\n    worker.terminate();\n});\nfunction createWorker(stream, opts) {\n    const { filename, workerData } = opts;\n    const bundlerOverrides = \"__bundlerPathsOverrides\" in globalThis ? globalThis.__bundlerPathsOverrides : {};\n    const toExecute = bundlerOverrides[\"thread-stream-worker\"] || join(__dirname, \"lib\", \"worker.js\");\n    const worker = new Worker(toExecute, {\n        ...opts.workerOpts,\n        trackUnmanagedFds: false,\n        workerData: {\n            filename: filename.indexOf(\"file://\") === 0 ? filename : pathToFileURL(filename).href,\n            dataBuf: stream[kImpl].dataBuf,\n            stateBuf: stream[kImpl].stateBuf,\n            workerData: {\n                $context: {\n                    threadStreamVersion: version\n                },\n                ...workerData\n            }\n        }\n    });\n    // We keep a strong reference for now,\n    // we need to start writing first\n    worker.stream = new FakeWeakRef(stream);\n    worker.on(\"message\", onWorkerMessage);\n    worker.on(\"exit\", onWorkerExit);\n    registry.register(stream, worker);\n    return worker;\n}\nfunction drain(stream) {\n    assert(!stream[kImpl].sync);\n    if (stream[kImpl].needDrain) {\n        stream[kImpl].needDrain = false;\n        stream.emit(\"drain\");\n    }\n}\nfunction nextFlush(stream) {\n    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n    let leftover = stream[kImpl].data.length - writeIndex;\n    if (leftover > 0) {\n        if (stream[kImpl].buf.length === 0) {\n            stream[kImpl].flushing = false;\n            if (stream[kImpl].ending) {\n                end(stream);\n            } else if (stream[kImpl].needDrain) {\n                process.nextTick(drain, stream);\n            }\n            return;\n        }\n        let toWrite = stream[kImpl].buf.slice(0, leftover);\n        let toWriteBytes = Buffer.byteLength(toWrite);\n        if (toWriteBytes <= leftover) {\n            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n            // process._rawDebug('writing ' + toWrite.length)\n            write(stream, toWrite, nextFlush.bind(null, stream));\n        } else {\n            // multi-byte utf-8\n            stream.flush(()=>{\n                // err is already handled in flush()\n                if (stream.destroyed) {\n                    return;\n                }\n                Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n                Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n                // Find a toWrite length that fits the buffer\n                // it must exists as the buffer is at least 4 bytes length\n                // and the max utf-8 length for a char is 4 bytes.\n                while(toWriteBytes > stream[kImpl].data.length){\n                    leftover = leftover / 2;\n                    toWrite = stream[kImpl].buf.slice(0, leftover);\n                    toWriteBytes = Buffer.byteLength(toWrite);\n                }\n                stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n                write(stream, toWrite, nextFlush.bind(null, stream));\n            });\n        }\n    } else if (leftover === 0) {\n        if (writeIndex === 0 && stream[kImpl].buf.length === 0) {\n            // we had a flushSync in the meanwhile\n            return;\n        }\n        stream.flush(()=>{\n            Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n            nextFlush(stream);\n        });\n    } else {\n        // This should never happen\n        destroy(stream, new Error(\"overwritten\"));\n    }\n}\nfunction onWorkerMessage(msg) {\n    const stream = this.stream.deref();\n    if (stream === undefined) {\n        this.exited = true;\n        // Terminate the worker.\n        this.terminate();\n        return;\n    }\n    switch(msg.code){\n        case \"READY\":\n            // Replace the FakeWeakRef with a\n            // proper one.\n            this.stream = new WeakRef(stream);\n            stream.flush(()=>{\n                stream[kImpl].ready = true;\n                stream.emit(\"ready\");\n            });\n            break;\n        case \"ERROR\":\n            destroy(stream, msg.err);\n            break;\n        case \"EVENT\":\n            if (Array.isArray(msg.args)) {\n                stream.emit(msg.name, ...msg.args);\n            } else {\n                stream.emit(msg.name, msg.args);\n            }\n            break;\n        case \"WARNING\":\n            process.emitWarning(msg.err);\n            break;\n        default:\n            destroy(stream, new Error(\"this should not happen: \" + msg.code));\n    }\n}\nfunction onWorkerExit(code) {\n    const stream = this.stream.deref();\n    if (stream === undefined) {\n        // Nothing to do, the worker already exit\n        return;\n    }\n    registry.unregister(stream);\n    stream.worker.exited = true;\n    stream.worker.off(\"exit\", onWorkerExit);\n    destroy(stream, code !== 0 ? new Error(\"the worker thread exited\") : null);\n}\nclass ThreadStream extends EventEmitter {\n    constructor(opts = {}){\n        super();\n        if (opts.bufferSize < 4) {\n            throw new Error(\"bufferSize must at least fit a 4-byte utf-8 char\");\n        }\n        this[kImpl] = {};\n        this[kImpl].stateBuf = new SharedArrayBuffer(128);\n        this[kImpl].state = new Int32Array(this[kImpl].stateBuf);\n        this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);\n        this[kImpl].data = Buffer.from(this[kImpl].dataBuf);\n        this[kImpl].sync = opts.sync || false;\n        this[kImpl].ending = false;\n        this[kImpl].ended = false;\n        this[kImpl].needDrain = false;\n        this[kImpl].destroyed = false;\n        this[kImpl].flushing = false;\n        this[kImpl].ready = false;\n        this[kImpl].finished = false;\n        this[kImpl].errored = null;\n        this[kImpl].closed = false;\n        this[kImpl].buf = \"\";\n        // TODO (fix): Make private?\n        this.worker = createWorker(this, opts) // TODO (fix): make private\n        ;\n        this.on(\"message\", (message, transferList)=>{\n            this.worker.postMessage(message, transferList);\n        });\n    }\n    write(data) {\n        if (this[kImpl].destroyed) {\n            error(this, new Error(\"the worker has exited\"));\n            return false;\n        }\n        if (this[kImpl].ending) {\n            error(this, new Error(\"the worker is ending\"));\n            return false;\n        }\n        if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {\n            try {\n                writeSync(this);\n                this[kImpl].flushing = true;\n            } catch (err) {\n                destroy(this, err);\n                return false;\n            }\n        }\n        this[kImpl].buf += data;\n        if (this[kImpl].sync) {\n            try {\n                writeSync(this);\n                return true;\n            } catch (err) {\n                destroy(this, err);\n                return false;\n            }\n        }\n        if (!this[kImpl].flushing) {\n            this[kImpl].flushing = true;\n            setImmediate(nextFlush, this);\n        }\n        this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;\n        return !this[kImpl].needDrain;\n    }\n    end() {\n        if (this[kImpl].destroyed) {\n            return;\n        }\n        this[kImpl].ending = true;\n        end(this);\n    }\n    flush(cb) {\n        if (this[kImpl].destroyed) {\n            if (typeof cb === \"function\") {\n                process.nextTick(cb, new Error(\"the worker has exited\"));\n            }\n            return;\n        }\n        // TODO write all .buf\n        const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);\n        // process._rawDebug(`(flush) readIndex (${Atomics.load(this.state, READ_INDEX)}) writeIndex (${Atomics.load(this.state, WRITE_INDEX)})`)\n        wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res)=>{\n            if (err) {\n                destroy(this, err);\n                process.nextTick(cb, err);\n                return;\n            }\n            if (res === \"not-equal\") {\n                // TODO handle deadlock\n                this.flush(cb);\n                return;\n            }\n            process.nextTick(cb);\n        });\n    }\n    flushSync() {\n        if (this[kImpl].destroyed) {\n            return;\n        }\n        writeSync(this);\n        flushSync(this);\n    }\n    unref() {\n        this.worker.unref();\n    }\n    ref() {\n        this.worker.ref();\n    }\n    get ready() {\n        return this[kImpl].ready;\n    }\n    get destroyed() {\n        return this[kImpl].destroyed;\n    }\n    get closed() {\n        return this[kImpl].closed;\n    }\n    get writable() {\n        return !this[kImpl].destroyed && !this[kImpl].ending;\n    }\n    get writableEnded() {\n        return this[kImpl].ending;\n    }\n    get writableFinished() {\n        return this[kImpl].finished;\n    }\n    get writableNeedDrain() {\n        return this[kImpl].needDrain;\n    }\n    get writableObjectMode() {\n        return false;\n    }\n    get writableErrored() {\n        return this[kImpl].errored;\n    }\n}\nfunction error(stream, err) {\n    setImmediate(()=>{\n        stream.emit(\"error\", err);\n    });\n}\nfunction destroy(stream, err) {\n    if (stream[kImpl].destroyed) {\n        return;\n    }\n    stream[kImpl].destroyed = true;\n    if (err) {\n        stream[kImpl].errored = err;\n        error(stream, err);\n    }\n    if (!stream.worker.exited) {\n        stream.worker.terminate().catch(()=>{}).then(()=>{\n            stream[kImpl].closed = true;\n            stream.emit(\"close\");\n        });\n    } else {\n        setImmediate(()=>{\n            stream[kImpl].closed = true;\n            stream.emit(\"close\");\n        });\n    }\n}\nfunction write(stream, data, cb) {\n    // data is smaller than the shared buffer length\n    const current = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n    const length = Buffer.byteLength(data);\n    stream[kImpl].data.write(data, current);\n    Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length);\n    Atomics.notify(stream[kImpl].state, WRITE_INDEX);\n    cb();\n    return true;\n}\nfunction end(stream) {\n    if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {\n        return;\n    }\n    stream[kImpl].ended = true;\n    try {\n        stream.flushSync();\n        let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);\n        // process._rawDebug('writing index')\n        Atomics.store(stream[kImpl].state, WRITE_INDEX, -1);\n        // process._rawDebug(`(end) readIndex (${Atomics.load(stream.state, READ_INDEX)}) writeIndex (${Atomics.load(stream.state, WRITE_INDEX)})`)\n        Atomics.notify(stream[kImpl].state, WRITE_INDEX);\n        // Wait for the process to complete\n        let spins = 0;\n        while(readIndex !== -1){\n            // process._rawDebug(`read = ${read}`)\n            Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);\n            readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);\n            if (readIndex === -2) {\n                destroy(stream, new Error(\"end() failed\"));\n                return;\n            }\n            if (++spins === 10) {\n                destroy(stream, new Error(\"end() took too long (10s)\"));\n                return;\n            }\n        }\n        process.nextTick(()=>{\n            stream[kImpl].finished = true;\n            stream.emit(\"finish\");\n        });\n    } catch (err) {\n        destroy(stream, err);\n    }\n// process._rawDebug('end finished...')\n}\nfunction writeSync(stream) {\n    const cb = ()=>{\n        if (stream[kImpl].ending) {\n            end(stream);\n        } else if (stream[kImpl].needDrain) {\n            process.nextTick(drain, stream);\n        }\n    };\n    stream[kImpl].flushing = false;\n    while(stream[kImpl].buf.length !== 0){\n        const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n        let leftover = stream[kImpl].data.length - writeIndex;\n        if (leftover === 0) {\n            flushSync(stream);\n            Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n            continue;\n        } else if (leftover < 0) {\n            // stream should never happen\n            throw new Error(\"overwritten\");\n        }\n        let toWrite = stream[kImpl].buf.slice(0, leftover);\n        let toWriteBytes = Buffer.byteLength(toWrite);\n        if (toWriteBytes <= leftover) {\n            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n            // process._rawDebug('writing ' + toWrite.length)\n            write(stream, toWrite, cb);\n        } else {\n            // multi-byte utf-8\n            flushSync(stream);\n            Atomics.store(stream[kImpl].state, READ_INDEX, 0);\n            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);\n            // Find a toWrite length that fits the buffer\n            // it must exists as the buffer is at least 4 bytes length\n            // and the max utf-8 length for a char is 4 bytes.\n            while(toWriteBytes > stream[kImpl].buf.length){\n                leftover = leftover / 2;\n                toWrite = stream[kImpl].buf.slice(0, leftover);\n                toWriteBytes = Buffer.byteLength(toWrite);\n            }\n            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);\n            write(stream, toWrite, cb);\n        }\n    }\n}\nfunction flushSync(stream) {\n    if (stream[kImpl].flushing) {\n        throw new Error(\"unable to flush while flushing\");\n    }\n    // process._rawDebug('flushSync started')\n    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);\n    let spins = 0;\n    // TODO handle deadlock\n    while(true){\n        const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);\n        if (readIndex === -2) {\n            throw Error(\"_flushSync failed\");\n        }\n        // process._rawDebug(`(flushSync) readIndex (${readIndex}) writeIndex (${writeIndex})`)\n        if (readIndex !== writeIndex) {\n            // TODO stream timeouts for some reason.\n            Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);\n        } else {\n            break;\n        }\n        if (++spins === 10) {\n            throw new Error(\"_flushSync took too long (10s)\");\n        }\n    }\n// process._rawDebug('flushSync finished')\n}\nmodule.exports = ThreadStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/thread-stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/thread-stream/lib/indexes.js":
/*!***************************************************!*\
  !*** ./node_modules/thread-stream/lib/indexes.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nconst WRITE_INDEX = 4;\nconst READ_INDEX = 8;\nmodule.exports = {\n    WRITE_INDEX,\n    READ_INDEX\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGhyZWFkLXN0cmVhbS9saWIvaW5kZXhlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGNBQWM7QUFDcEIsTUFBTUMsYUFBYTtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZIO0lBQ0FDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZWN0YXItYWRtaW4tdjEvLi9ub2RlX21vZHVsZXMvdGhyZWFkLXN0cmVhbS9saWIvaW5kZXhlcy5qcz9jZmJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBXUklURV9JTkRFWCA9IDRcbmNvbnN0IFJFQURfSU5ERVggPSA4XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXUklURV9JTkRFWCxcbiAgUkVBRF9JTkRFWFxufVxuIl0sIm5hbWVzIjpbIldSSVRFX0lOREVYIiwiUkVBRF9JTkRFWCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/thread-stream/lib/indexes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/thread-stream/lib/wait.js":
/*!************************************************!*\
  !*** ./node_modules/thread-stream/lib/wait.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nconst MAX_TIMEOUT = 1000;\nfunction wait(state, index, expected, timeout, done) {\n    const max = Date.now() + timeout;\n    let current = Atomics.load(state, index);\n    if (current === expected) {\n        done(null, \"ok\");\n        return;\n    }\n    let prior = current;\n    const check = (backoff)=>{\n        if (Date.now() > max) {\n            done(null, \"timed-out\");\n        } else {\n            setTimeout(()=>{\n                prior = current;\n                current = Atomics.load(state, index);\n                if (current === prior) {\n                    check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);\n                } else {\n                    if (current === expected) done(null, \"ok\");\n                    else done(null, \"not-equal\");\n                }\n            }, backoff);\n        }\n    };\n    check(1);\n}\n// let waitDiffCount = 0\nfunction waitDiff(state, index, expected, timeout, done) {\n    // const id = waitDiffCount++\n    // process._rawDebug(`>>> waitDiff ${id}`)\n    const max = Date.now() + timeout;\n    let current = Atomics.load(state, index);\n    if (current !== expected) {\n        done(null, \"ok\");\n        return;\n    }\n    const check = (backoff)=>{\n        // process._rawDebug(`${id} ${index} current ${current} expected ${expected}`)\n        // process._rawDebug('' + backoff)\n        if (Date.now() > max) {\n            done(null, \"timed-out\");\n        } else {\n            setTimeout(()=>{\n                current = Atomics.load(state, index);\n                if (current !== expected) {\n                    done(null, \"ok\");\n                } else {\n                    check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);\n                }\n            }, backoff);\n        }\n    };\n    check(1);\n}\nmodule.exports = {\n    wait,\n    waitDiff\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGhyZWFkLXN0cmVhbS9saWIvd2FpdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGNBQWM7QUFFcEIsU0FBU0MsS0FBTUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxJQUFJO0lBQ2xELE1BQU1DLE1BQU1DLEtBQUtDLEdBQUcsS0FBS0o7SUFDekIsSUFBSUssVUFBVUMsUUFBUUMsSUFBSSxDQUFDVixPQUFPQztJQUNsQyxJQUFJTyxZQUFZTixVQUFVO1FBQ3hCRSxLQUFLLE1BQU07UUFDWDtJQUNGO0lBQ0EsSUFBSU8sUUFBUUg7SUFDWixNQUFNSSxRQUFRLENBQUNDO1FBQ2IsSUFBSVAsS0FBS0MsR0FBRyxLQUFLRixLQUFLO1lBQ3BCRCxLQUFLLE1BQU07UUFDYixPQUFPO1lBQ0xVLFdBQVc7Z0JBQ1RILFFBQVFIO2dCQUNSQSxVQUFVQyxRQUFRQyxJQUFJLENBQUNWLE9BQU9DO2dCQUM5QixJQUFJTyxZQUFZRyxPQUFPO29CQUNyQkMsTUFBTUMsV0FBV2YsY0FBY0EsY0FBY2UsVUFBVTtnQkFDekQsT0FBTztvQkFDTCxJQUFJTCxZQUFZTixVQUFVRSxLQUFLLE1BQU07eUJBQ2hDQSxLQUFLLE1BQU07Z0JBQ2xCO1lBQ0YsR0FBR1M7UUFDTDtJQUNGO0lBQ0FELE1BQU07QUFDUjtBQUVBLHdCQUF3QjtBQUN4QixTQUFTRyxTQUFVZixLQUFLLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLElBQUk7SUFDdEQsNkJBQTZCO0lBQzdCLDBDQUEwQztJQUMxQyxNQUFNQyxNQUFNQyxLQUFLQyxHQUFHLEtBQUtKO0lBQ3pCLElBQUlLLFVBQVVDLFFBQVFDLElBQUksQ0FBQ1YsT0FBT0M7SUFDbEMsSUFBSU8sWUFBWU4sVUFBVTtRQUN4QkUsS0FBSyxNQUFNO1FBQ1g7SUFDRjtJQUNBLE1BQU1RLFFBQVEsQ0FBQ0M7UUFDYiw4RUFBOEU7UUFDOUUsa0NBQWtDO1FBQ2xDLElBQUlQLEtBQUtDLEdBQUcsS0FBS0YsS0FBSztZQUNwQkQsS0FBSyxNQUFNO1FBQ2IsT0FBTztZQUNMVSxXQUFXO2dCQUNUTixVQUFVQyxRQUFRQyxJQUFJLENBQUNWLE9BQU9DO2dCQUM5QixJQUFJTyxZQUFZTixVQUFVO29CQUN4QkUsS0FBSyxNQUFNO2dCQUNiLE9BQU87b0JBQ0xRLE1BQU1DLFdBQVdmLGNBQWNBLGNBQWNlLFVBQVU7Z0JBQ3pEO1lBQ0YsR0FBR0E7UUFDTDtJQUNGO0lBQ0FELE1BQU07QUFDUjtBQUVBSSxPQUFPQyxPQUFPLEdBQUc7SUFBRWxCO0lBQU1nQjtBQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVjdGFyLWFkbWluLXYxLy4vbm9kZV9tb2R1bGVzL3RocmVhZC1zdHJlYW0vbGliL3dhaXQuanM/YjJmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgTUFYX1RJTUVPVVQgPSAxMDAwXG5cbmZ1bmN0aW9uIHdhaXQgKHN0YXRlLCBpbmRleCwgZXhwZWN0ZWQsIHRpbWVvdXQsIGRvbmUpIHtcbiAgY29uc3QgbWF4ID0gRGF0ZS5ub3coKSArIHRpbWVvdXRcbiAgbGV0IGN1cnJlbnQgPSBBdG9taWNzLmxvYWQoc3RhdGUsIGluZGV4KVxuICBpZiAoY3VycmVudCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBkb25lKG51bGwsICdvaycpXG4gICAgcmV0dXJuXG4gIH1cbiAgbGV0IHByaW9yID0gY3VycmVudFxuICBjb25zdCBjaGVjayA9IChiYWNrb2ZmKSA9PiB7XG4gICAgaWYgKERhdGUubm93KCkgPiBtYXgpIHtcbiAgICAgIGRvbmUobnVsbCwgJ3RpbWVkLW91dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBwcmlvciA9IGN1cnJlbnRcbiAgICAgICAgY3VycmVudCA9IEF0b21pY3MubG9hZChzdGF0ZSwgaW5kZXgpXG4gICAgICAgIGlmIChjdXJyZW50ID09PSBwcmlvcikge1xuICAgICAgICAgIGNoZWNrKGJhY2tvZmYgPj0gTUFYX1RJTUVPVVQgPyBNQVhfVElNRU9VVCA6IGJhY2tvZmYgKiAyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjdXJyZW50ID09PSBleHBlY3RlZCkgZG9uZShudWxsLCAnb2snKVxuICAgICAgICAgIGVsc2UgZG9uZShudWxsLCAnbm90LWVxdWFsJylcbiAgICAgICAgfVxuICAgICAgfSwgYmFja29mZilcbiAgICB9XG4gIH1cbiAgY2hlY2soMSlcbn1cblxuLy8gbGV0IHdhaXREaWZmQ291bnQgPSAwXG5mdW5jdGlvbiB3YWl0RGlmZiAoc3RhdGUsIGluZGV4LCBleHBlY3RlZCwgdGltZW91dCwgZG9uZSkge1xuICAvLyBjb25zdCBpZCA9IHdhaXREaWZmQ291bnQrK1xuICAvLyBwcm9jZXNzLl9yYXdEZWJ1ZyhgPj4+IHdhaXREaWZmICR7aWR9YClcbiAgY29uc3QgbWF4ID0gRGF0ZS5ub3coKSArIHRpbWVvdXRcbiAgbGV0IGN1cnJlbnQgPSBBdG9taWNzLmxvYWQoc3RhdGUsIGluZGV4KVxuICBpZiAoY3VycmVudCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBkb25lKG51bGwsICdvaycpXG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgY2hlY2sgPSAoYmFja29mZikgPT4ge1xuICAgIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKGAke2lkfSAke2luZGV4fSBjdXJyZW50ICR7Y3VycmVudH0gZXhwZWN0ZWQgJHtleHBlY3RlZH1gKVxuICAgIC8vIHByb2Nlc3MuX3Jhd0RlYnVnKCcnICsgYmFja29mZilcbiAgICBpZiAoRGF0ZS5ub3coKSA+IG1heCkge1xuICAgICAgZG9uZShudWxsLCAndGltZWQtb3V0JylcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGN1cnJlbnQgPSBBdG9taWNzLmxvYWQoc3RhdGUsIGluZGV4KVxuICAgICAgICBpZiAoY3VycmVudCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICBkb25lKG51bGwsICdvaycpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2soYmFja29mZiA+PSBNQVhfVElNRU9VVCA/IE1BWF9USU1FT1VUIDogYmFja29mZiAqIDIpXG4gICAgICAgIH1cbiAgICAgIH0sIGJhY2tvZmYpXG4gICAgfVxuICB9XG4gIGNoZWNrKDEpXG59XG5cbm1vZHVsZS5leHBvcnRzID0geyB3YWl0LCB3YWl0RGlmZiB9XG4iXSwibmFtZXMiOlsiTUFYX1RJTUVPVVQiLCJ3YWl0Iiwic3RhdGUiLCJpbmRleCIsImV4cGVjdGVkIiwidGltZW91dCIsImRvbmUiLCJtYXgiLCJEYXRlIiwibm93IiwiY3VycmVudCIsIkF0b21pY3MiLCJsb2FkIiwicHJpb3IiLCJjaGVjayIsImJhY2tvZmYiLCJzZXRUaW1lb3V0Iiwid2FpdERpZmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/thread-stream/lib/wait.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/thread-stream/package.json":
/*!*************************************************!*\
  !*** ./node_modules/thread-stream/package.json ***!
  \*************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"thread-stream","version":"2.7.0","description":"A streaming way to send data to a Node.js Worker Thread","main":"index.js","types":"index.d.ts","dependencies":{"real-require":"^0.2.0"},"devDependencies":{"@types/node":"^20.1.0","@types/tap":"^15.0.0","@yao-pkg/pkg":"^5.11.5","desm":"^1.3.0","fastbench":"^1.0.1","husky":"^9.0.6","pino-elasticsearch":"^8.0.0","sonic-boom":"^3.0.0","standard":"^17.0.0","tap":"^16.2.0","ts-node":"^10.8.0","typescript":"^5.3.2","why-is-node-running":"^2.2.2"},"scripts":{"test":"standard && npm run transpile && tap \\"test/**/*.test.*js\\" && tap --ts test/*.test.*ts","test:ci":"standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts","test:ci:js":"tap --no-check-coverage --timeout=120 --coverage-report=lcovonly \\"test/**/*.test.*js\\"","test:ci:ts":"tap --ts --no-check-coverage --coverage-report=lcovonly \\"test/**/*.test.*ts\\"","test:yarn":"npm run transpile && tap \\"test/**/*.test.js\\" --no-check-coverage","transpile":"sh ./test/ts/transpile.sh","prepare":"husky install"},"standard":{"ignore":["test/ts/**/*"]},"repository":{"type":"git","url":"git+https://github.com/mcollina/thread-stream.git"},"keywords":["worker","thread","threads","stream"],"author":"Matteo Collina <hello@matteocollina.com>","license":"MIT","bugs":{"url":"https://github.com/mcollina/thread-stream/issues"},"homepage":"https://github.com/mcollina/thread-stream#readme"}');

/***/ })

};
;