"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pino";
exports.ids = ["vendor-chunks/pino"];
exports.modules = {

/***/ "(rsc)/./node_modules/pino/lib/caller.js":
/*!*****************************************!*\
  !*** ./node_modules/pino/lib/caller.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\nfunction noOpPrepareStackTrace(_, stack) {\n    return stack;\n}\nmodule.exports = function getCallers() {\n    const originalPrepare = Error.prepareStackTrace;\n    Error.prepareStackTrace = noOpPrepareStackTrace;\n    const stack = new Error().stack;\n    Error.prepareStackTrace = originalPrepare;\n    if (!Array.isArray(stack)) {\n        return undefined;\n    }\n    const entries = stack.slice(2);\n    const fileNames = [];\n    for (const entry of entries){\n        if (!entry) {\n            continue;\n        }\n        fileNames.push(entry.getFileName());\n    }\n    return fileNames;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvY2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0Esc0JBQXVCQyxDQUFDLEVBQUVDLEtBQUs7SUFDdEMsT0FBT0E7QUFDVDtBQUVBQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0M7SUFDeEIsTUFBTUMsa0JBQWtCQyxNQUFNQyxpQkFBaUI7SUFDL0NELE1BQU1DLGlCQUFpQixHQUFHUjtJQUMxQixNQUFNRSxRQUFRLElBQUlLLFFBQVFMLEtBQUs7SUFDL0JLLE1BQU1DLGlCQUFpQixHQUFHRjtJQUUxQixJQUFJLENBQUNHLE1BQU1DLE9BQU8sQ0FBQ1IsUUFBUTtRQUN6QixPQUFPUztJQUNUO0lBRUEsTUFBTUMsVUFBVVYsTUFBTVcsS0FBSyxDQUFDO0lBRTVCLE1BQU1DLFlBQVksRUFBRTtJQUVwQixLQUFLLE1BQU1DLFNBQVNILFFBQVM7UUFDM0IsSUFBSSxDQUFDRyxPQUFPO1lBQ1Y7UUFDRjtRQUVBRCxVQUFVRSxJQUFJLENBQUNELE1BQU1FLFdBQVc7SUFDbEM7SUFFQSxPQUFPSDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVjdGFyLWFkbWluLXYxLy4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL2NhbGxlci5qcz9jODhlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBub09wUHJlcGFyZVN0YWNrVHJhY2UgKF8sIHN0YWNrKSB7XG4gIHJldHVybiBzdGFja1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldENhbGxlcnMgKCkge1xuICBjb25zdCBvcmlnaW5hbFByZXBhcmUgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZVxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IG5vT3BQcmVwYXJlU3RhY2tUcmFjZVxuICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gb3JpZ2luYWxQcmVwYXJlXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHN0YWNrKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IGVudHJpZXMgPSBzdGFjay5zbGljZSgyKVxuXG4gIGNvbnN0IGZpbGVOYW1lcyA9IFtdXG5cbiAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgaWYgKCFlbnRyeSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBmaWxlTmFtZXMucHVzaChlbnRyeS5nZXRGaWxlTmFtZSgpKVxuICB9XG5cbiAgcmV0dXJuIGZpbGVOYW1lc1xufVxuIl0sIm5hbWVzIjpbIm5vT3BQcmVwYXJlU3RhY2tUcmFjZSIsIl8iLCJzdGFjayIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRDYWxsZXJzIiwib3JpZ2luYWxQcmVwYXJlIiwiRXJyb3IiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImVudHJpZXMiLCJzbGljZSIsImZpbGVOYW1lcyIsImVudHJ5IiwicHVzaCIsImdldEZpbGVOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/constants.js":
/*!********************************************!*\
  !*** ./node_modules/pino/lib/constants.js ***!
  \********************************************/
/***/ ((module) => {

eval("/**\n * Represents default log level values\n *\n * @enum {number}\n */ \nconst DEFAULT_LEVELS = {\n    trace: 10,\n    debug: 20,\n    info: 30,\n    warn: 40,\n    error: 50,\n    fatal: 60\n};\n/**\n * Represents sort order direction: `ascending` or `descending`\n *\n * @enum {string}\n */ const SORTING_ORDER = {\n    ASC: \"ASC\",\n    DESC: \"DESC\"\n};\nmodule.exports = {\n    DEFAULT_LEVELS,\n    SORTING_ORDER\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUM7QUFDRCxNQUFNQSxpQkFBaUI7SUFDckJDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTztJQUNQQyxPQUFPO0FBQ1Q7QUFFQTs7OztDQUlDLEdBQ0QsTUFBTUMsZ0JBQWdCO0lBQ3BCQyxLQUFLO0lBQ0xDLE1BQU07QUFDUjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDZlg7SUFDQU87QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25lY3Rhci1hZG1pbi12MS8uL25vZGVfbW9kdWxlcy9waW5vL2xpYi9jb25zdGFudHMuanM/ODNiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcHJlc2VudHMgZGVmYXVsdCBsb2cgbGV2ZWwgdmFsdWVzXG4gKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgREVGQVVMVF9MRVZFTFMgPSB7XG4gIHRyYWNlOiAxMCxcbiAgZGVidWc6IDIwLFxuICBpbmZvOiAzMCxcbiAgd2FybjogNDAsXG4gIGVycm9yOiA1MCxcbiAgZmF0YWw6IDYwXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBzb3J0IG9yZGVyIGRpcmVjdGlvbjogYGFzY2VuZGluZ2Agb3IgYGRlc2NlbmRpbmdgXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgU09SVElOR19PUkRFUiA9IHtcbiAgQVNDOiAnQVNDJyxcbiAgREVTQzogJ0RFU0MnXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBERUZBVUxUX0xFVkVMUyxcbiAgU09SVElOR19PUkRFUlxufVxuIl0sIm5hbWVzIjpbIkRFRkFVTFRfTEVWRUxTIiwidHJhY2UiLCJkZWJ1ZyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJmYXRhbCIsIlNPUlRJTkdfT1JERVIiLCJBU0MiLCJERVNDIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/levels.js":
/*!*****************************************!*\
  !*** ./node_modules/pino/lib/levels.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const { lsCacheSym, levelValSym, useOnlyCustomLevelsSym, streamSym, formattersSym, hooksSym, levelCompSym } = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/pino/lib/symbols.js\");\nconst { noop, genLog } = __webpack_require__(/*! ./tools */ \"(rsc)/./node_modules/pino/lib/tools.js\");\nconst { DEFAULT_LEVELS, SORTING_ORDER } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/pino/lib/constants.js\");\nconst levelMethods = {\n    fatal: (hook)=>{\n        const logFatal = genLog(DEFAULT_LEVELS.fatal, hook);\n        return function(...args) {\n            const stream = this[streamSym];\n            logFatal.call(this, ...args);\n            if (typeof stream.flushSync === \"function\") {\n                try {\n                    stream.flushSync();\n                } catch (e) {\n                // https://github.com/pinojs/pino/pull/740#discussion_r346788313\n                }\n            }\n        };\n    },\n    error: (hook)=>genLog(DEFAULT_LEVELS.error, hook),\n    warn: (hook)=>genLog(DEFAULT_LEVELS.warn, hook),\n    info: (hook)=>genLog(DEFAULT_LEVELS.info, hook),\n    debug: (hook)=>genLog(DEFAULT_LEVELS.debug, hook),\n    trace: (hook)=>genLog(DEFAULT_LEVELS.trace, hook)\n};\nconst nums = Object.keys(DEFAULT_LEVELS).reduce((o, k)=>{\n    o[DEFAULT_LEVELS[k]] = k;\n    return o;\n}, {});\nconst initialLsCache = Object.keys(nums).reduce((o, k)=>{\n    o[k] = '{\"level\":' + Number(k);\n    return o;\n}, {});\nfunction genLsCache(instance) {\n    const formatter = instance[formattersSym].level;\n    const { labels } = instance.levels;\n    const cache = {};\n    for(const label in labels){\n        const level = formatter(labels[label], Number(label));\n        cache[label] = JSON.stringify(level).slice(0, -1);\n    }\n    instance[lsCacheSym] = cache;\n    return instance;\n}\nfunction isStandardLevel(level, useOnlyCustomLevels) {\n    if (useOnlyCustomLevels) {\n        return false;\n    }\n    switch(level){\n        case \"fatal\":\n        case \"error\":\n        case \"warn\":\n        case \"info\":\n        case \"debug\":\n        case \"trace\":\n            return true;\n        default:\n            return false;\n    }\n}\nfunction setLevel(level) {\n    const { labels, values } = this.levels;\n    if (typeof level === \"number\") {\n        if (labels[level] === undefined) throw Error(\"unknown level value\" + level);\n        level = labels[level];\n    }\n    if (values[level] === undefined) throw Error(\"unknown level \" + level);\n    const preLevelVal = this[levelValSym];\n    const levelVal = this[levelValSym] = values[level];\n    const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym];\n    const levelComparison = this[levelCompSym];\n    const hook = this[hooksSym].logMethod;\n    for(const key in values){\n        if (levelComparison(values[key], levelVal) === false) {\n            this[key] = noop;\n            continue;\n        }\n        this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);\n    }\n    this.emit(\"level-change\", level, levelVal, labels[preLevelVal], preLevelVal, this);\n}\nfunction getLevel(level) {\n    const { levels, levelVal } = this;\n    // protection against potential loss of Pino scope from serializers (edge case with circular refs - https://github.com/pinojs/pino/issues/833)\n    return levels && levels.labels ? levels.labels[levelVal] : \"\";\n}\nfunction isLevelEnabled(logLevel) {\n    const { values } = this.levels;\n    const logLevelVal = values[logLevel];\n    return logLevelVal !== undefined && this[levelCompSym](logLevelVal, this[levelValSym]);\n}\n/**\n * Determine if the given `current` level is enabled by comparing it\n * against the current threshold (`expected`).\n *\n * @param {SORTING_ORDER} direction comparison direction \"ASC\" or \"DESC\"\n * @param {number} current current log level number representation\n * @param {number} expected threshold value to compare with\n * @returns {boolean}\n */ function compareLevel(direction, current, expected) {\n    if (direction === SORTING_ORDER.DESC) {\n        return current <= expected;\n    }\n    return current >= expected;\n}\n/**\n * Create a level comparison function based on `levelComparison`\n * it could a default function which compares levels either in \"ascending\" or \"descending\" order or custom comparison function\n *\n * @param {SORTING_ORDER | Function} levelComparison sort levels order direction or custom comparison function\n * @returns Function\n */ function genLevelComparison(levelComparison) {\n    if (typeof levelComparison === \"string\") {\n        return compareLevel.bind(null, levelComparison);\n    }\n    return levelComparison;\n}\nfunction mappings(customLevels = null, useOnlyCustomLevels = false) {\n    const customNums = customLevels ? Object.keys(customLevels).reduce((o, k)=>{\n        o[customLevels[k]] = k;\n        return o;\n    }, {}) : null;\n    /* eslint-enable */ const labels = Object.assign(Object.create(Object.prototype, {\n        Infinity: {\n            value: \"silent\"\n        }\n    }), useOnlyCustomLevels ? null : nums, customNums);\n    const values = Object.assign(Object.create(Object.prototype, {\n        silent: {\n            value: Infinity\n        }\n    }), useOnlyCustomLevels ? null : DEFAULT_LEVELS, customLevels);\n    return {\n        labels,\n        values\n    };\n}\nfunction assertDefaultLevelFound(defaultLevel, customLevels, useOnlyCustomLevels) {\n    if (typeof defaultLevel === \"number\") {\n        const values = [].concat(Object.keys(customLevels || {}).map((key)=>customLevels[key]), useOnlyCustomLevels ? [] : Object.keys(nums).map((level)=>+level), Infinity);\n        if (!values.includes(defaultLevel)) {\n            throw Error(`default level:${defaultLevel} must be included in custom levels`);\n        }\n        return;\n    }\n    const labels = Object.assign(Object.create(Object.prototype, {\n        silent: {\n            value: Infinity\n        }\n    }), useOnlyCustomLevels ? null : DEFAULT_LEVELS, customLevels);\n    if (!(defaultLevel in labels)) {\n        throw Error(`default level:${defaultLevel} must be included in custom levels`);\n    }\n}\nfunction assertNoLevelCollisions(levels, customLevels) {\n    const { labels, values } = levels;\n    for(const k in customLevels){\n        if (k in values) {\n            throw Error(\"levels cannot be overridden\");\n        }\n        if (customLevels[k] in labels) {\n            throw Error(\"pre-existing level values cannot be used for new levels\");\n        }\n    }\n}\n/**\n * Validates whether `levelComparison` is correct\n *\n * @throws Error\n * @param {SORTING_ORDER | Function} levelComparison - value to validate\n * @returns\n */ function assertLevelComparison(levelComparison) {\n    if (typeof levelComparison === \"function\") {\n        return;\n    }\n    if (typeof levelComparison === \"string\" && Object.values(SORTING_ORDER).includes(levelComparison)) {\n        return;\n    }\n    throw new Error('Levels comparison should be one of \"ASC\", \"DESC\" or \"function\" type');\n}\nmodule.exports = {\n    initialLsCache,\n    genLsCache,\n    levelMethods,\n    getLevel,\n    setLevel,\n    isLevelEnabled,\n    mappings,\n    assertNoLevelCollisions,\n    assertDefaultLevelFound,\n    genLevelComparison,\n    assertLevelComparison\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/levels.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/meta.js":
/*!***************************************!*\
  !*** ./node_modules/pino/lib/meta.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    version: \"8.21.0\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvbWV0YS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFBRUMsU0FBUztBQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVjdGFyLWFkbWluLXYxLy4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL21ldGEuanM/MjE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICc4LjIxLjAnIH1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/meta.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/multistream.js":
/*!**********************************************!*\
  !*** ./node_modules/pino/lib/multistream.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst metadata = Symbol.for(\"pino.metadata\");\nconst { DEFAULT_LEVELS } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/pino/lib/constants.js\");\nconst DEFAULT_INFO_LEVEL = DEFAULT_LEVELS.info;\nfunction multistream(streamsArray, opts) {\n    let counter = 0;\n    streamsArray = streamsArray || [];\n    opts = opts || {\n        dedupe: false\n    };\n    const streamLevels = Object.create(DEFAULT_LEVELS);\n    streamLevels.silent = Infinity;\n    if (opts.levels && typeof opts.levels === \"object\") {\n        Object.keys(opts.levels).forEach((i)=>{\n            streamLevels[i] = opts.levels[i];\n        });\n    }\n    const res = {\n        write,\n        add,\n        emit,\n        flushSync,\n        end,\n        minLevel: 0,\n        streams: [],\n        clone,\n        [metadata]: true,\n        streamLevels\n    };\n    if (Array.isArray(streamsArray)) {\n        streamsArray.forEach(add, res);\n    } else {\n        add.call(res, streamsArray);\n    }\n    // clean this object up\n    // or it will stay allocated forever\n    // as it is closed on the following closures\n    streamsArray = null;\n    return res;\n    // we can exit early because the streams are ordered by level\n    function write(data) {\n        let dest;\n        const level = this.lastLevel;\n        const { streams } = this;\n        // for handling situation when several streams has the same level\n        let recordedLevel = 0;\n        let stream;\n        // if dedupe set to true we send logs to the stream with the highest level\n        // therefore, we have to change sorting order\n        for(let i = initLoopVar(streams.length, opts.dedupe); checkLoopVar(i, streams.length, opts.dedupe); i = adjustLoopVar(i, opts.dedupe)){\n            dest = streams[i];\n            if (dest.level <= level) {\n                if (recordedLevel !== 0 && recordedLevel !== dest.level) {\n                    break;\n                }\n                stream = dest.stream;\n                if (stream[metadata]) {\n                    const { lastTime, lastMsg, lastObj, lastLogger } = this;\n                    stream.lastLevel = level;\n                    stream.lastTime = lastTime;\n                    stream.lastMsg = lastMsg;\n                    stream.lastObj = lastObj;\n                    stream.lastLogger = lastLogger;\n                }\n                stream.write(data);\n                if (opts.dedupe) {\n                    recordedLevel = dest.level;\n                }\n            } else if (!opts.dedupe) {\n                break;\n            }\n        }\n    }\n    function emit(...args) {\n        for (const { stream } of this.streams){\n            if (typeof stream.emit === \"function\") {\n                stream.emit(...args);\n            }\n        }\n    }\n    function flushSync() {\n        for (const { stream } of this.streams){\n            if (typeof stream.flushSync === \"function\") {\n                stream.flushSync();\n            }\n        }\n    }\n    function add(dest) {\n        if (!dest) {\n            return res;\n        }\n        // Check that dest implements either StreamEntry or DestinationStream\n        const isStream = typeof dest.write === \"function\" || dest.stream;\n        const stream_ = dest.write ? dest : dest.stream;\n        // This is necessary to provide a meaningful error message, otherwise it throws somewhere inside write()\n        if (!isStream) {\n            throw Error(\"stream object needs to implement either StreamEntry or DestinationStream interface\");\n        }\n        const { streams, streamLevels } = this;\n        let level;\n        if (typeof dest.levelVal === \"number\") {\n            level = dest.levelVal;\n        } else if (typeof dest.level === \"string\") {\n            level = streamLevels[dest.level];\n        } else if (typeof dest.level === \"number\") {\n            level = dest.level;\n        } else {\n            level = DEFAULT_INFO_LEVEL;\n        }\n        const dest_ = {\n            stream: stream_,\n            level,\n            levelVal: undefined,\n            id: counter++\n        };\n        streams.unshift(dest_);\n        streams.sort(compareByLevel);\n        this.minLevel = streams[0].level;\n        return res;\n    }\n    function end() {\n        for (const { stream } of this.streams){\n            if (typeof stream.flushSync === \"function\") {\n                stream.flushSync();\n            }\n            stream.end();\n        }\n    }\n    function clone(level) {\n        const streams = new Array(this.streams.length);\n        for(let i = 0; i < streams.length; i++){\n            streams[i] = {\n                level,\n                stream: this.streams[i].stream\n            };\n        }\n        return {\n            write,\n            add,\n            minLevel: level,\n            streams,\n            clone,\n            emit,\n            flushSync,\n            [metadata]: true\n        };\n    }\n}\nfunction compareByLevel(a, b) {\n    return a.level - b.level;\n}\nfunction initLoopVar(length, dedupe) {\n    return dedupe ? length - 1 : 0;\n}\nfunction adjustLoopVar(i, dedupe) {\n    return dedupe ? i - 1 : i + 1;\n}\nfunction checkLoopVar(i, length, dedupe) {\n    return dedupe ? i >= 0 : i < length;\n}\nmodule.exports = multistream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/multistream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/proto.js":
/*!****************************************!*\
  !*** ./node_modules/pino/lib/proto.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst { lsCacheSym, levelValSym, setLevelSym, getLevelSym, chindingsSym, parsedChindingsSym, mixinSym, asJsonSym, writeSym, mixinMergeStrategySym, timeSym, timeSliceIndexSym, streamSym, serializersSym, formattersSym, errorKeySym, messageKeySym, useOnlyCustomLevelsSym, needsMetadataGsym, redactFmtSym, stringifySym, formatOptsSym, stringifiersSym, msgPrefixSym } = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/pino/lib/symbols.js\");\nconst { getLevel, setLevel, isLevelEnabled, mappings, initialLsCache, genLsCache, assertNoLevelCollisions } = __webpack_require__(/*! ./levels */ \"(rsc)/./node_modules/pino/lib/levels.js\");\nconst { asChindings, asJson, buildFormatters, stringify } = __webpack_require__(/*! ./tools */ \"(rsc)/./node_modules/pino/lib/tools.js\");\nconst { version } = __webpack_require__(/*! ./meta */ \"(rsc)/./node_modules/pino/lib/meta.js\");\nconst redaction = __webpack_require__(/*! ./redaction */ \"(rsc)/./node_modules/pino/lib/redaction.js\");\n// note: use of class is satirical\n// https://github.com/pinojs/pino/pull/433#pullrequestreview-127703127\nconst constructor = class Pino {\n};\nconst prototype = {\n    constructor,\n    child,\n    bindings,\n    setBindings,\n    flush,\n    isLevelEnabled,\n    version,\n    get level () {\n        return this[getLevelSym]();\n    },\n    set level (lvl){\n        this[setLevelSym](lvl);\n    },\n    get levelVal () {\n        return this[levelValSym];\n    },\n    set levelVal (n){\n        throw Error(\"levelVal is read-only\");\n    },\n    [lsCacheSym]: initialLsCache,\n    [writeSym]: write,\n    [asJsonSym]: asJson,\n    [getLevelSym]: getLevel,\n    [setLevelSym]: setLevel\n};\nObject.setPrototypeOf(prototype, EventEmitter.prototype);\n// exporting and consuming the prototype object using factory pattern fixes scoping issues with getters when serializing\nmodule.exports = function() {\n    return Object.create(prototype);\n};\nconst resetChildingsFormatter = (bindings)=>bindings;\nfunction child(bindings, options) {\n    if (!bindings) {\n        throw Error(\"missing bindings for child Pino\");\n    }\n    options = options || {} // default options to empty object\n    ;\n    const serializers = this[serializersSym];\n    const formatters = this[formattersSym];\n    const instance = Object.create(this);\n    if (options.hasOwnProperty(\"serializers\") === true) {\n        instance[serializersSym] = Object.create(null);\n        for(const k in serializers){\n            instance[serializersSym][k] = serializers[k];\n        }\n        const parentSymbols = Object.getOwnPropertySymbols(serializers);\n        /* eslint no-var: off */ for(var i = 0; i < parentSymbols.length; i++){\n            const ks = parentSymbols[i];\n            instance[serializersSym][ks] = serializers[ks];\n        }\n        for(const bk in options.serializers){\n            instance[serializersSym][bk] = options.serializers[bk];\n        }\n        const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers);\n        for(var bi = 0; bi < bindingsSymbols.length; bi++){\n            const bks = bindingsSymbols[bi];\n            instance[serializersSym][bks] = options.serializers[bks];\n        }\n    } else instance[serializersSym] = serializers;\n    if (options.hasOwnProperty(\"formatters\")) {\n        const { level, bindings: chindings, log } = options.formatters;\n        instance[formattersSym] = buildFormatters(level || formatters.level, chindings || resetChildingsFormatter, log || formatters.log);\n    } else {\n        instance[formattersSym] = buildFormatters(formatters.level, resetChildingsFormatter, formatters.log);\n    }\n    if (options.hasOwnProperty(\"customLevels\") === true) {\n        assertNoLevelCollisions(this.levels, options.customLevels);\n        instance.levels = mappings(options.customLevels, instance[useOnlyCustomLevelsSym]);\n        genLsCache(instance);\n    }\n    // redact must place before asChindings and only replace if exist\n    if (typeof options.redact === \"object\" && options.redact !== null || Array.isArray(options.redact)) {\n        instance.redact = options.redact // replace redact directly\n        ;\n        const stringifiers = redaction(instance.redact, stringify);\n        const formatOpts = {\n            stringify: stringifiers[redactFmtSym]\n        };\n        instance[stringifySym] = stringify;\n        instance[stringifiersSym] = stringifiers;\n        instance[formatOptsSym] = formatOpts;\n    }\n    if (typeof options.msgPrefix === \"string\") {\n        instance[msgPrefixSym] = (this[msgPrefixSym] || \"\") + options.msgPrefix;\n    }\n    instance[chindingsSym] = asChindings(instance, bindings);\n    const childLevel = options.level || this.level;\n    instance[setLevelSym](childLevel);\n    this.onChild(instance);\n    return instance;\n}\nfunction bindings() {\n    const chindings = this[chindingsSym];\n    const chindingsJson = `{${chindings.substr(1)}}` // at least contains ,\"pid\":7068,\"hostname\":\"myMac\"\n    ;\n    const bindingsFromJson = JSON.parse(chindingsJson);\n    delete bindingsFromJson.pid;\n    delete bindingsFromJson.hostname;\n    return bindingsFromJson;\n}\nfunction setBindings(newBindings) {\n    const chindings = asChindings(this, newBindings);\n    this[chindingsSym] = chindings;\n    delete this[parsedChindingsSym];\n}\n/**\n * Default strategy for creating `mergeObject` from arguments and the result from `mixin()`.\n * Fields from `mergeObject` have higher priority in this strategy.\n *\n * @param {Object} mergeObject The object a user has supplied to the logging function.\n * @param {Object} mixinObject The result of the `mixin` method.\n * @return {Object}\n */ function defaultMixinMergeStrategy(mergeObject, mixinObject) {\n    return Object.assign(mixinObject, mergeObject);\n}\nfunction write(_obj, msg, num) {\n    const t = this[timeSym]();\n    const mixin = this[mixinSym];\n    const errorKey = this[errorKeySym];\n    const messageKey = this[messageKeySym];\n    const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy;\n    let obj;\n    if (_obj === undefined || _obj === null) {\n        obj = {};\n    } else if (_obj instanceof Error) {\n        obj = {\n            [errorKey]: _obj\n        };\n        if (msg === undefined) {\n            msg = _obj.message;\n        }\n    } else {\n        obj = _obj;\n        if (msg === undefined && _obj[messageKey] === undefined && _obj[errorKey]) {\n            msg = _obj[errorKey].message;\n        }\n    }\n    if (mixin) {\n        obj = mixinMergeStrategy(obj, mixin(obj, num, this));\n    }\n    const s = this[asJsonSym](obj, msg, num, t);\n    const stream = this[streamSym];\n    if (stream[needsMetadataGsym] === true) {\n        stream.lastLevel = num;\n        stream.lastObj = obj;\n        stream.lastMsg = msg;\n        stream.lastTime = t.slice(this[timeSliceIndexSym]);\n        stream.lastLogger = this // for child loggers\n        ;\n    }\n    stream.write(s);\n}\nfunction noop() {}\nfunction flush(cb) {\n    if (cb != null && typeof cb !== \"function\") {\n        throw Error(\"callback must be a function\");\n    }\n    const stream = this[streamSym];\n    if (typeof stream.flush === \"function\") {\n        stream.flush(cb || noop);\n    } else if (cb) cb();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/proto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/redaction.js":
/*!********************************************!*\
  !*** ./node_modules/pino/lib/redaction.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fastRedact = __webpack_require__(/*! fast-redact */ \"(rsc)/./node_modules/fast-redact/index.js\");\nconst { redactFmtSym, wildcardFirstSym } = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/pino/lib/symbols.js\");\nconst { rx, validator } = fastRedact;\nconst validate = validator({\n    ERR_PATHS_MUST_BE_STRINGS: ()=>\"pino – redacted paths must be strings\",\n    ERR_INVALID_PATH: (s)=>`pino – redact paths array contains an invalid path (${s})`\n});\nconst CENSOR = \"[Redacted]\";\nconst strict = false // TODO should this be configurable?\n;\nfunction redaction(opts, serialize) {\n    const { paths, censor } = handle(opts);\n    const shape = paths.reduce((o, str)=>{\n        rx.lastIndex = 0;\n        const first = rx.exec(str);\n        const next = rx.exec(str);\n        // ns is the top-level path segment, brackets + quoting removed.\n        let ns = first[1] !== undefined ? first[1].replace(/^(?:\"|'|`)(.*)(?:\"|'|`)$/, \"$1\") : first[0];\n        if (ns === \"*\") {\n            ns = wildcardFirstSym;\n        }\n        // top level key:\n        if (next === null) {\n            o[ns] = null;\n            return o;\n        }\n        // path with at least two segments:\n        // if ns is already redacted at the top level, ignore lower level redactions\n        if (o[ns] === null) {\n            return o;\n        }\n        const { index } = next;\n        const nextPath = `${str.substr(index, str.length - 1)}`;\n        o[ns] = o[ns] || [];\n        // shape is a mix of paths beginning with literal values and wildcard\n        // paths [ \"a.b.c\", \"*.b.z\" ] should reduce to a shape of\n        // { \"a\": [ \"b.c\", \"b.z\" ], *: [ \"b.z\" ] }\n        // note: \"b.z\" is in both \"a\" and * arrays because \"a\" matches the wildcard.\n        // (* entry has wildcardFirstSym as key)\n        if (ns !== wildcardFirstSym && o[ns].length === 0) {\n            // first time ns's get all '*' redactions so far\n            o[ns].push(...o[wildcardFirstSym] || []);\n        }\n        if (ns === wildcardFirstSym) {\n            // new * path gets added to all previously registered literal ns's.\n            Object.keys(o).forEach(function(k) {\n                if (o[k]) {\n                    o[k].push(nextPath);\n                }\n            });\n        }\n        o[ns].push(nextPath);\n        return o;\n    }, {});\n    // the redactor assigned to the format symbol key\n    // provides top level redaction for instances where\n    // an object is interpolated into the msg string\n    const result = {\n        [redactFmtSym]: fastRedact({\n            paths,\n            censor,\n            serialize,\n            strict\n        })\n    };\n    const topCensor = (...args)=>{\n        return typeof censor === \"function\" ? serialize(censor(...args)) : serialize(censor);\n    };\n    return [\n        ...Object.keys(shape),\n        ...Object.getOwnPropertySymbols(shape)\n    ].reduce((o, k)=>{\n        // top level key:\n        if (shape[k] === null) {\n            o[k] = (value)=>topCensor(value, [\n                    k\n                ]);\n        } else {\n            const wrappedCensor = typeof censor === \"function\" ? (value, path)=>{\n                return censor(value, [\n                    k,\n                    ...path\n                ]);\n            } : censor;\n            o[k] = fastRedact({\n                paths: shape[k],\n                censor: wrappedCensor,\n                serialize,\n                strict\n            });\n        }\n        return o;\n    }, result);\n}\nfunction handle(opts) {\n    if (Array.isArray(opts)) {\n        opts = {\n            paths: opts,\n            censor: CENSOR\n        };\n        validate(opts);\n        return opts;\n    }\n    let { paths, censor = CENSOR, remove } = opts;\n    if (Array.isArray(paths) === false) {\n        throw Error(\"pino – redact must contain an array of strings\");\n    }\n    if (remove === true) censor = undefined;\n    validate({\n        paths,\n        censor\n    });\n    return {\n        paths,\n        censor\n    };\n}\nmodule.exports = redaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvcmVkYWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ25ELE1BQU0sRUFBRUcsRUFBRSxFQUFFQyxTQUFTLEVBQUUsR0FBR0w7QUFFMUIsTUFBTU0sV0FBV0QsVUFBVTtJQUN6QkUsMkJBQTJCLElBQU07SUFDakNDLGtCQUFrQixDQUFDQyxJQUFNLENBQUMsb0RBQW9ELEVBQUVBLEVBQUUsQ0FBQyxDQUFDO0FBQ3RGO0FBRUEsTUFBTUMsU0FBUztBQUNmLE1BQU1DLFNBQVMsTUFBTSxvQ0FBb0M7O0FBRXpELFNBQVNDLFVBQVdDLElBQUksRUFBRUMsU0FBUztJQUNqQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFLEdBQUdDLE9BQU9KO0lBRWpDLE1BQU1LLFFBQVFILE1BQU1JLE1BQU0sQ0FBQyxDQUFDQyxHQUFHQztRQUM3QmpCLEdBQUdrQixTQUFTLEdBQUc7UUFDZixNQUFNQyxRQUFRbkIsR0FBR29CLElBQUksQ0FBQ0g7UUFDdEIsTUFBTUksT0FBT3JCLEdBQUdvQixJQUFJLENBQUNIO1FBRXJCLGdFQUFnRTtRQUNoRSxJQUFJSyxLQUFLSCxLQUFLLENBQUMsRUFBRSxLQUFLSSxZQUNsQkosS0FBSyxDQUFDLEVBQUUsQ0FBQ0ssT0FBTyxDQUFDLDRCQUE0QixRQUM3Q0wsS0FBSyxDQUFDLEVBQUU7UUFFWixJQUFJRyxPQUFPLEtBQUs7WUFDZEEsS0FBS3ZCO1FBQ1A7UUFFQSxpQkFBaUI7UUFDakIsSUFBSXNCLFNBQVMsTUFBTTtZQUNqQkwsQ0FBQyxDQUFDTSxHQUFHLEdBQUc7WUFDUixPQUFPTjtRQUNUO1FBRUEsbUNBQW1DO1FBQ25DLDRFQUE0RTtRQUM1RSxJQUFJQSxDQUFDLENBQUNNLEdBQUcsS0FBSyxNQUFNO1lBQ2xCLE9BQU9OO1FBQ1Q7UUFFQSxNQUFNLEVBQUVTLEtBQUssRUFBRSxHQUFHSjtRQUNsQixNQUFNSyxXQUFXLENBQUMsRUFBRVQsSUFBSVUsTUFBTSxDQUFDRixPQUFPUixJQUFJVyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBRXZEWixDQUFDLENBQUNNLEdBQUcsR0FBR04sQ0FBQyxDQUFDTSxHQUFHLElBQUksRUFBRTtRQUVuQixxRUFBcUU7UUFDckUseURBQXlEO1FBQ3pELDBDQUEwQztRQUMxQyw0RUFBNEU7UUFDNUUsd0NBQXdDO1FBQ3hDLElBQUlBLE9BQU92QixvQkFBb0JpQixDQUFDLENBQUNNLEdBQUcsQ0FBQ00sTUFBTSxLQUFLLEdBQUc7WUFDakQsZ0RBQWdEO1lBQ2hEWixDQUFDLENBQUNNLEdBQUcsQ0FBQ08sSUFBSSxJQUFLYixDQUFDLENBQUNqQixpQkFBaUIsSUFBSSxFQUFFO1FBQzFDO1FBRUEsSUFBSXVCLE9BQU92QixrQkFBa0I7WUFDM0IsbUVBQW1FO1lBQ25FK0IsT0FBT0MsSUFBSSxDQUFDZixHQUFHZ0IsT0FBTyxDQUFDLFNBQVVDLENBQUM7Z0JBQ2hDLElBQUlqQixDQUFDLENBQUNpQixFQUFFLEVBQUU7b0JBQ1JqQixDQUFDLENBQUNpQixFQUFFLENBQUNKLElBQUksQ0FBQ0g7Z0JBQ1o7WUFDRjtRQUNGO1FBRUFWLENBQUMsQ0FBQ00sR0FBRyxDQUFDTyxJQUFJLENBQUNIO1FBQ1gsT0FBT1Y7SUFDVCxHQUFHLENBQUM7SUFFSixpREFBaUQ7SUFDakQsbURBQW1EO0lBQ25ELGdEQUFnRDtJQUNoRCxNQUFNa0IsU0FBUztRQUNiLENBQUNwQyxhQUFhLEVBQUVGLFdBQVc7WUFBRWU7WUFBT0M7WUFBUUY7WUFBV0g7UUFBTztJQUNoRTtJQUVBLE1BQU00QixZQUFZLENBQUMsR0FBR0M7UUFDcEIsT0FBTyxPQUFPeEIsV0FBVyxhQUFhRixVQUFVRSxVQUFVd0IsU0FBUzFCLFVBQVVFO0lBQy9FO0lBRUEsT0FBTztXQUFJa0IsT0FBT0MsSUFBSSxDQUFDakI7V0FBV2dCLE9BQU9PLHFCQUFxQixDQUFDdkI7S0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsR0FBR2lCO1FBQ2hGLGlCQUFpQjtRQUNqQixJQUFJbkIsS0FBSyxDQUFDbUIsRUFBRSxLQUFLLE1BQU07WUFDckJqQixDQUFDLENBQUNpQixFQUFFLEdBQUcsQ0FBQ0ssUUFBVUgsVUFBVUcsT0FBTztvQkFBQ0w7aUJBQUU7UUFDeEMsT0FBTztZQUNMLE1BQU1NLGdCQUFnQixPQUFPM0IsV0FBVyxhQUNwQyxDQUFDMEIsT0FBT0U7Z0JBQ04sT0FBTzVCLE9BQU8wQixPQUFPO29CQUFDTDt1QkFBTU87aUJBQUs7WUFDbkMsSUFDQTVCO1lBQ0pJLENBQUMsQ0FBQ2lCLEVBQUUsR0FBR3JDLFdBQVc7Z0JBQ2hCZSxPQUFPRyxLQUFLLENBQUNtQixFQUFFO2dCQUNmckIsUUFBUTJCO2dCQUNSN0I7Z0JBQ0FIO1lBQ0Y7UUFDRjtRQUNBLE9BQU9TO0lBQ1QsR0FBR2tCO0FBQ0w7QUFFQSxTQUFTckIsT0FBUUosSUFBSTtJQUNuQixJQUFJZ0MsTUFBTUMsT0FBTyxDQUFDakMsT0FBTztRQUN2QkEsT0FBTztZQUFFRSxPQUFPRjtZQUFNRyxRQUFRTjtRQUFPO1FBQ3JDSixTQUFTTztRQUNULE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLEVBQUVFLEtBQUssRUFBRUMsU0FBU04sTUFBTSxFQUFFcUMsTUFBTSxFQUFFLEdBQUdsQztJQUN6QyxJQUFJZ0MsTUFBTUMsT0FBTyxDQUFDL0IsV0FBVyxPQUFPO1FBQUUsTUFBTWlDLE1BQU07SUFBa0Q7SUFDcEcsSUFBSUQsV0FBVyxNQUFNL0IsU0FBU1c7SUFDOUJyQixTQUFTO1FBQUVTO1FBQU9DO0lBQU87SUFFekIsT0FBTztRQUFFRDtRQUFPQztJQUFPO0FBQ3pCO0FBRUFpQyxPQUFPQyxPQUFPLEdBQUd0QyIsInNvdXJjZXMiOlsid2VicGFjazovL25lY3Rhci1hZG1pbi12MS8uL25vZGVfbW9kdWxlcy9waW5vL2xpYi9yZWRhY3Rpb24uanM/Yzg0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgZmFzdFJlZGFjdCA9IHJlcXVpcmUoJ2Zhc3QtcmVkYWN0JylcbmNvbnN0IHsgcmVkYWN0Rm10U3ltLCB3aWxkY2FyZEZpcnN0U3ltIH0gPSByZXF1aXJlKCcuL3N5bWJvbHMnKVxuY29uc3QgeyByeCwgdmFsaWRhdG9yIH0gPSBmYXN0UmVkYWN0XG5cbmNvbnN0IHZhbGlkYXRlID0gdmFsaWRhdG9yKHtcbiAgRVJSX1BBVEhTX01VU1RfQkVfU1RSSU5HUzogKCkgPT4gJ3Bpbm8g4oCTIHJlZGFjdGVkIHBhdGhzIG11c3QgYmUgc3RyaW5ncycsXG4gIEVSUl9JTlZBTElEX1BBVEg6IChzKSA9PiBgcGlubyDigJMgcmVkYWN0IHBhdGhzIGFycmF5IGNvbnRhaW5zIGFuIGludmFsaWQgcGF0aCAoJHtzfSlgXG59KVxuXG5jb25zdCBDRU5TT1IgPSAnW1JlZGFjdGVkXSdcbmNvbnN0IHN0cmljdCA9IGZhbHNlIC8vIFRPRE8gc2hvdWxkIHRoaXMgYmUgY29uZmlndXJhYmxlP1xuXG5mdW5jdGlvbiByZWRhY3Rpb24gKG9wdHMsIHNlcmlhbGl6ZSkge1xuICBjb25zdCB7IHBhdGhzLCBjZW5zb3IgfSA9IGhhbmRsZShvcHRzKVxuXG4gIGNvbnN0IHNoYXBlID0gcGF0aHMucmVkdWNlKChvLCBzdHIpID0+IHtcbiAgICByeC5sYXN0SW5kZXggPSAwXG4gICAgY29uc3QgZmlyc3QgPSByeC5leGVjKHN0cilcbiAgICBjb25zdCBuZXh0ID0gcnguZXhlYyhzdHIpXG5cbiAgICAvLyBucyBpcyB0aGUgdG9wLWxldmVsIHBhdGggc2VnbWVudCwgYnJhY2tldHMgKyBxdW90aW5nIHJlbW92ZWQuXG4gICAgbGV0IG5zID0gZmlyc3RbMV0gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmaXJzdFsxXS5yZXBsYWNlKC9eKD86XCJ8J3xgKSguKikoPzpcInwnfGApJC8sICckMScpXG4gICAgICA6IGZpcnN0WzBdXG5cbiAgICBpZiAobnMgPT09ICcqJykge1xuICAgICAgbnMgPSB3aWxkY2FyZEZpcnN0U3ltXG4gICAgfVxuXG4gICAgLy8gdG9wIGxldmVsIGtleTpcbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgb1tuc10gPSBudWxsXG4gICAgICByZXR1cm4gb1xuICAgIH1cblxuICAgIC8vIHBhdGggd2l0aCBhdCBsZWFzdCB0d28gc2VnbWVudHM6XG4gICAgLy8gaWYgbnMgaXMgYWxyZWFkeSByZWRhY3RlZCBhdCB0aGUgdG9wIGxldmVsLCBpZ25vcmUgbG93ZXIgbGV2ZWwgcmVkYWN0aW9uc1xuICAgIGlmIChvW25zXSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG9cbiAgICB9XG5cbiAgICBjb25zdCB7IGluZGV4IH0gPSBuZXh0XG4gICAgY29uc3QgbmV4dFBhdGggPSBgJHtzdHIuc3Vic3RyKGluZGV4LCBzdHIubGVuZ3RoIC0gMSl9YFxuXG4gICAgb1tuc10gPSBvW25zXSB8fCBbXVxuXG4gICAgLy8gc2hhcGUgaXMgYSBtaXggb2YgcGF0aHMgYmVnaW5uaW5nIHdpdGggbGl0ZXJhbCB2YWx1ZXMgYW5kIHdpbGRjYXJkXG4gICAgLy8gcGF0aHMgWyBcImEuYi5jXCIsIFwiKi5iLnpcIiBdIHNob3VsZCByZWR1Y2UgdG8gYSBzaGFwZSBvZlxuICAgIC8vIHsgXCJhXCI6IFsgXCJiLmNcIiwgXCJiLnpcIiBdLCAqOiBbIFwiYi56XCIgXSB9XG4gICAgLy8gbm90ZTogXCJiLnpcIiBpcyBpbiBib3RoIFwiYVwiIGFuZCAqIGFycmF5cyBiZWNhdXNlIFwiYVwiIG1hdGNoZXMgdGhlIHdpbGRjYXJkLlxuICAgIC8vICgqIGVudHJ5IGhhcyB3aWxkY2FyZEZpcnN0U3ltIGFzIGtleSlcbiAgICBpZiAobnMgIT09IHdpbGRjYXJkRmlyc3RTeW0gJiYgb1tuc10ubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBmaXJzdCB0aW1lIG5zJ3MgZ2V0IGFsbCAnKicgcmVkYWN0aW9ucyBzbyBmYXJcbiAgICAgIG9bbnNdLnB1c2goLi4uKG9bd2lsZGNhcmRGaXJzdFN5bV0gfHwgW10pKVxuICAgIH1cblxuICAgIGlmIChucyA9PT0gd2lsZGNhcmRGaXJzdFN5bSkge1xuICAgICAgLy8gbmV3ICogcGF0aCBnZXRzIGFkZGVkIHRvIGFsbCBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgbGl0ZXJhbCBucydzLlxuICAgICAgT2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICBpZiAob1trXSkge1xuICAgICAgICAgIG9ba10ucHVzaChuZXh0UGF0aClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBvW25zXS5wdXNoKG5leHRQYXRoKVxuICAgIHJldHVybiBvXG4gIH0sIHt9KVxuXG4gIC8vIHRoZSByZWRhY3RvciBhc3NpZ25lZCB0byB0aGUgZm9ybWF0IHN5bWJvbCBrZXlcbiAgLy8gcHJvdmlkZXMgdG9wIGxldmVsIHJlZGFjdGlvbiBmb3IgaW5zdGFuY2VzIHdoZXJlXG4gIC8vIGFuIG9iamVjdCBpcyBpbnRlcnBvbGF0ZWQgaW50byB0aGUgbXNnIHN0cmluZ1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgW3JlZGFjdEZtdFN5bV06IGZhc3RSZWRhY3QoeyBwYXRocywgY2Vuc29yLCBzZXJpYWxpemUsIHN0cmljdCB9KVxuICB9XG5cbiAgY29uc3QgdG9wQ2Vuc29yID0gKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIGNlbnNvciA9PT0gJ2Z1bmN0aW9uJyA/IHNlcmlhbGl6ZShjZW5zb3IoLi4uYXJncykpIDogc2VyaWFsaXplKGNlbnNvcilcbiAgfVxuXG4gIHJldHVybiBbLi4uT2JqZWN0LmtleXMoc2hhcGUpLCAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNoYXBlKV0ucmVkdWNlKChvLCBrKSA9PiB7XG4gICAgLy8gdG9wIGxldmVsIGtleTpcbiAgICBpZiAoc2hhcGVba10gPT09IG51bGwpIHtcbiAgICAgIG9ba10gPSAodmFsdWUpID0+IHRvcENlbnNvcih2YWx1ZSwgW2tdKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB3cmFwcGVkQ2Vuc29yID0gdHlwZW9mIGNlbnNvciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICh2YWx1ZSwgcGF0aCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNlbnNvcih2YWx1ZSwgW2ssIC4uLnBhdGhdKVxuICAgICAgICAgIH1cbiAgICAgICAgOiBjZW5zb3JcbiAgICAgIG9ba10gPSBmYXN0UmVkYWN0KHtcbiAgICAgICAgcGF0aHM6IHNoYXBlW2tdLFxuICAgICAgICBjZW5zb3I6IHdyYXBwZWRDZW5zb3IsXG4gICAgICAgIHNlcmlhbGl6ZSxcbiAgICAgICAgc3RyaWN0XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gb1xuICB9LCByZXN1bHQpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZSAob3B0cykge1xuICBpZiAoQXJyYXkuaXNBcnJheShvcHRzKSkge1xuICAgIG9wdHMgPSB7IHBhdGhzOiBvcHRzLCBjZW5zb3I6IENFTlNPUiB9XG4gICAgdmFsaWRhdGUob3B0cylcbiAgICByZXR1cm4gb3B0c1xuICB9XG4gIGxldCB7IHBhdGhzLCBjZW5zb3IgPSBDRU5TT1IsIHJlbW92ZSB9ID0gb3B0c1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXRocykgPT09IGZhbHNlKSB7IHRocm93IEVycm9yKCdwaW5vIOKAkyByZWRhY3QgbXVzdCBjb250YWluIGFuIGFycmF5IG9mIHN0cmluZ3MnKSB9XG4gIGlmIChyZW1vdmUgPT09IHRydWUpIGNlbnNvciA9IHVuZGVmaW5lZFxuICB2YWxpZGF0ZSh7IHBhdGhzLCBjZW5zb3IgfSlcblxuICByZXR1cm4geyBwYXRocywgY2Vuc29yIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWRhY3Rpb25cbiJdLCJuYW1lcyI6WyJmYXN0UmVkYWN0IiwicmVxdWlyZSIsInJlZGFjdEZtdFN5bSIsIndpbGRjYXJkRmlyc3RTeW0iLCJyeCIsInZhbGlkYXRvciIsInZhbGlkYXRlIiwiRVJSX1BBVEhTX01VU1RfQkVfU1RSSU5HUyIsIkVSUl9JTlZBTElEX1BBVEgiLCJzIiwiQ0VOU09SIiwic3RyaWN0IiwicmVkYWN0aW9uIiwib3B0cyIsInNlcmlhbGl6ZSIsInBhdGhzIiwiY2Vuc29yIiwiaGFuZGxlIiwic2hhcGUiLCJyZWR1Y2UiLCJvIiwic3RyIiwibGFzdEluZGV4IiwiZmlyc3QiLCJleGVjIiwibmV4dCIsIm5zIiwidW5kZWZpbmVkIiwicmVwbGFjZSIsImluZGV4IiwibmV4dFBhdGgiLCJzdWJzdHIiLCJsZW5ndGgiLCJwdXNoIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrIiwicmVzdWx0IiwidG9wQ2Vuc29yIiwiYXJncyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInZhbHVlIiwid3JhcHBlZENlbnNvciIsInBhdGgiLCJBcnJheSIsImlzQXJyYXkiLCJyZW1vdmUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/redaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/symbols.js":
/*!******************************************!*\
  !*** ./node_modules/pino/lib/symbols.js ***!
  \******************************************/
/***/ ((module) => {

eval("\nconst setLevelSym = Symbol(\"pino.setLevel\");\nconst getLevelSym = Symbol(\"pino.getLevel\");\nconst levelValSym = Symbol(\"pino.levelVal\");\nconst levelCompSym = Symbol(\"pino.levelComp\");\nconst useLevelLabelsSym = Symbol(\"pino.useLevelLabels\");\nconst useOnlyCustomLevelsSym = Symbol(\"pino.useOnlyCustomLevels\");\nconst mixinSym = Symbol(\"pino.mixin\");\nconst lsCacheSym = Symbol(\"pino.lsCache\");\nconst chindingsSym = Symbol(\"pino.chindings\");\nconst asJsonSym = Symbol(\"pino.asJson\");\nconst writeSym = Symbol(\"pino.write\");\nconst redactFmtSym = Symbol(\"pino.redactFmt\");\nconst timeSym = Symbol(\"pino.time\");\nconst timeSliceIndexSym = Symbol(\"pino.timeSliceIndex\");\nconst streamSym = Symbol(\"pino.stream\");\nconst stringifySym = Symbol(\"pino.stringify\");\nconst stringifySafeSym = Symbol(\"pino.stringifySafe\");\nconst stringifiersSym = Symbol(\"pino.stringifiers\");\nconst endSym = Symbol(\"pino.end\");\nconst formatOptsSym = Symbol(\"pino.formatOpts\");\nconst messageKeySym = Symbol(\"pino.messageKey\");\nconst errorKeySym = Symbol(\"pino.errorKey\");\nconst nestedKeySym = Symbol(\"pino.nestedKey\");\nconst nestedKeyStrSym = Symbol(\"pino.nestedKeyStr\");\nconst mixinMergeStrategySym = Symbol(\"pino.mixinMergeStrategy\");\nconst msgPrefixSym = Symbol(\"pino.msgPrefix\");\nconst wildcardFirstSym = Symbol(\"pino.wildcardFirst\");\n// public symbols, no need to use the same pino\n// version for these\nconst serializersSym = Symbol.for(\"pino.serializers\");\nconst formattersSym = Symbol.for(\"pino.formatters\");\nconst hooksSym = Symbol.for(\"pino.hooks\");\nconst needsMetadataGsym = Symbol.for(\"pino.metadata\");\nmodule.exports = {\n    setLevelSym,\n    getLevelSym,\n    levelValSym,\n    levelCompSym,\n    useLevelLabelsSym,\n    mixinSym,\n    lsCacheSym,\n    chindingsSym,\n    asJsonSym,\n    writeSym,\n    serializersSym,\n    redactFmtSym,\n    timeSym,\n    timeSliceIndexSym,\n    streamSym,\n    stringifySym,\n    stringifySafeSym,\n    stringifiersSym,\n    endSym,\n    formatOptsSym,\n    messageKeySym,\n    errorKeySym,\n    nestedKeySym,\n    wildcardFirstSym,\n    needsMetadataGsym,\n    useOnlyCustomLevelsSym,\n    formattersSym,\n    hooksSym,\n    nestedKeyStrSym,\n    mixinMergeStrategySym,\n    msgPrefixSym\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGNBQWNDLE9BQU87QUFDM0IsTUFBTUMsY0FBY0QsT0FBTztBQUMzQixNQUFNRSxjQUFjRixPQUFPO0FBQzNCLE1BQU1HLGVBQWVILE9BQU87QUFDNUIsTUFBTUksb0JBQW9CSixPQUFPO0FBQ2pDLE1BQU1LLHlCQUF5QkwsT0FBTztBQUN0QyxNQUFNTSxXQUFXTixPQUFPO0FBRXhCLE1BQU1PLGFBQWFQLE9BQU87QUFDMUIsTUFBTVEsZUFBZVIsT0FBTztBQUU1QixNQUFNUyxZQUFZVCxPQUFPO0FBQ3pCLE1BQU1VLFdBQVdWLE9BQU87QUFDeEIsTUFBTVcsZUFBZVgsT0FBTztBQUU1QixNQUFNWSxVQUFVWixPQUFPO0FBQ3ZCLE1BQU1hLG9CQUFvQmIsT0FBTztBQUNqQyxNQUFNYyxZQUFZZCxPQUFPO0FBQ3pCLE1BQU1lLGVBQWVmLE9BQU87QUFDNUIsTUFBTWdCLG1CQUFtQmhCLE9BQU87QUFDaEMsTUFBTWlCLGtCQUFrQmpCLE9BQU87QUFDL0IsTUFBTWtCLFNBQVNsQixPQUFPO0FBQ3RCLE1BQU1tQixnQkFBZ0JuQixPQUFPO0FBQzdCLE1BQU1vQixnQkFBZ0JwQixPQUFPO0FBQzdCLE1BQU1xQixjQUFjckIsT0FBTztBQUMzQixNQUFNc0IsZUFBZXRCLE9BQU87QUFDNUIsTUFBTXVCLGtCQUFrQnZCLE9BQU87QUFDL0IsTUFBTXdCLHdCQUF3QnhCLE9BQU87QUFDckMsTUFBTXlCLGVBQWV6QixPQUFPO0FBRTVCLE1BQU0wQixtQkFBbUIxQixPQUFPO0FBRWhDLCtDQUErQztBQUMvQyxvQkFBb0I7QUFDcEIsTUFBTTJCLGlCQUFpQjNCLE9BQU80QixHQUFHLENBQUM7QUFDbEMsTUFBTUMsZ0JBQWdCN0IsT0FBTzRCLEdBQUcsQ0FBQztBQUNqQyxNQUFNRSxXQUFXOUIsT0FBTzRCLEdBQUcsQ0FBQztBQUM1QixNQUFNRyxvQkFBb0IvQixPQUFPNEIsR0FBRyxDQUFDO0FBRXJDSSxPQUFPQyxPQUFPLEdBQUc7SUFDZmxDO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FpQjtJQUNBaEI7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUk7SUFDQUs7SUFDQTFCO0lBQ0F3QjtJQUNBQztJQUNBUDtJQUNBQztJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVjdGFyLWFkbWluLXYxLy4vbm9kZV9tb2R1bGVzL3Bpbm8vbGliL3N5bWJvbHMuanM/N2UwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qgc2V0TGV2ZWxTeW0gPSBTeW1ib2woJ3Bpbm8uc2V0TGV2ZWwnKVxuY29uc3QgZ2V0TGV2ZWxTeW0gPSBTeW1ib2woJ3Bpbm8uZ2V0TGV2ZWwnKVxuY29uc3QgbGV2ZWxWYWxTeW0gPSBTeW1ib2woJ3Bpbm8ubGV2ZWxWYWwnKVxuY29uc3QgbGV2ZWxDb21wU3ltID0gU3ltYm9sKCdwaW5vLmxldmVsQ29tcCcpXG5jb25zdCB1c2VMZXZlbExhYmVsc1N5bSA9IFN5bWJvbCgncGluby51c2VMZXZlbExhYmVscycpXG5jb25zdCB1c2VPbmx5Q3VzdG9tTGV2ZWxzU3ltID0gU3ltYm9sKCdwaW5vLnVzZU9ubHlDdXN0b21MZXZlbHMnKVxuY29uc3QgbWl4aW5TeW0gPSBTeW1ib2woJ3Bpbm8ubWl4aW4nKVxuXG5jb25zdCBsc0NhY2hlU3ltID0gU3ltYm9sKCdwaW5vLmxzQ2FjaGUnKVxuY29uc3QgY2hpbmRpbmdzU3ltID0gU3ltYm9sKCdwaW5vLmNoaW5kaW5ncycpXG5cbmNvbnN0IGFzSnNvblN5bSA9IFN5bWJvbCgncGluby5hc0pzb24nKVxuY29uc3Qgd3JpdGVTeW0gPSBTeW1ib2woJ3Bpbm8ud3JpdGUnKVxuY29uc3QgcmVkYWN0Rm10U3ltID0gU3ltYm9sKCdwaW5vLnJlZGFjdEZtdCcpXG5cbmNvbnN0IHRpbWVTeW0gPSBTeW1ib2woJ3Bpbm8udGltZScpXG5jb25zdCB0aW1lU2xpY2VJbmRleFN5bSA9IFN5bWJvbCgncGluby50aW1lU2xpY2VJbmRleCcpXG5jb25zdCBzdHJlYW1TeW0gPSBTeW1ib2woJ3Bpbm8uc3RyZWFtJylcbmNvbnN0IHN0cmluZ2lmeVN5bSA9IFN5bWJvbCgncGluby5zdHJpbmdpZnknKVxuY29uc3Qgc3RyaW5naWZ5U2FmZVN5bSA9IFN5bWJvbCgncGluby5zdHJpbmdpZnlTYWZlJylcbmNvbnN0IHN0cmluZ2lmaWVyc1N5bSA9IFN5bWJvbCgncGluby5zdHJpbmdpZmllcnMnKVxuY29uc3QgZW5kU3ltID0gU3ltYm9sKCdwaW5vLmVuZCcpXG5jb25zdCBmb3JtYXRPcHRzU3ltID0gU3ltYm9sKCdwaW5vLmZvcm1hdE9wdHMnKVxuY29uc3QgbWVzc2FnZUtleVN5bSA9IFN5bWJvbCgncGluby5tZXNzYWdlS2V5JylcbmNvbnN0IGVycm9yS2V5U3ltID0gU3ltYm9sKCdwaW5vLmVycm9yS2V5JylcbmNvbnN0IG5lc3RlZEtleVN5bSA9IFN5bWJvbCgncGluby5uZXN0ZWRLZXknKVxuY29uc3QgbmVzdGVkS2V5U3RyU3ltID0gU3ltYm9sKCdwaW5vLm5lc3RlZEtleVN0cicpXG5jb25zdCBtaXhpbk1lcmdlU3RyYXRlZ3lTeW0gPSBTeW1ib2woJ3Bpbm8ubWl4aW5NZXJnZVN0cmF0ZWd5JylcbmNvbnN0IG1zZ1ByZWZpeFN5bSA9IFN5bWJvbCgncGluby5tc2dQcmVmaXgnKVxuXG5jb25zdCB3aWxkY2FyZEZpcnN0U3ltID0gU3ltYm9sKCdwaW5vLndpbGRjYXJkRmlyc3QnKVxuXG4vLyBwdWJsaWMgc3ltYm9scywgbm8gbmVlZCB0byB1c2UgdGhlIHNhbWUgcGlub1xuLy8gdmVyc2lvbiBmb3IgdGhlc2VcbmNvbnN0IHNlcmlhbGl6ZXJzU3ltID0gU3ltYm9sLmZvcigncGluby5zZXJpYWxpemVycycpXG5jb25zdCBmb3JtYXR0ZXJzU3ltID0gU3ltYm9sLmZvcigncGluby5mb3JtYXR0ZXJzJylcbmNvbnN0IGhvb2tzU3ltID0gU3ltYm9sLmZvcigncGluby5ob29rcycpXG5jb25zdCBuZWVkc01ldGFkYXRhR3N5bSA9IFN5bWJvbC5mb3IoJ3Bpbm8ubWV0YWRhdGEnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0TGV2ZWxTeW0sXG4gIGdldExldmVsU3ltLFxuICBsZXZlbFZhbFN5bSxcbiAgbGV2ZWxDb21wU3ltLFxuICB1c2VMZXZlbExhYmVsc1N5bSxcbiAgbWl4aW5TeW0sXG4gIGxzQ2FjaGVTeW0sXG4gIGNoaW5kaW5nc1N5bSxcbiAgYXNKc29uU3ltLFxuICB3cml0ZVN5bSxcbiAgc2VyaWFsaXplcnNTeW0sXG4gIHJlZGFjdEZtdFN5bSxcbiAgdGltZVN5bSxcbiAgdGltZVNsaWNlSW5kZXhTeW0sXG4gIHN0cmVhbVN5bSxcbiAgc3RyaW5naWZ5U3ltLFxuICBzdHJpbmdpZnlTYWZlU3ltLFxuICBzdHJpbmdpZmllcnNTeW0sXG4gIGVuZFN5bSxcbiAgZm9ybWF0T3B0c1N5bSxcbiAgbWVzc2FnZUtleVN5bSxcbiAgZXJyb3JLZXlTeW0sXG4gIG5lc3RlZEtleVN5bSxcbiAgd2lsZGNhcmRGaXJzdFN5bSxcbiAgbmVlZHNNZXRhZGF0YUdzeW0sXG4gIHVzZU9ubHlDdXN0b21MZXZlbHNTeW0sXG4gIGZvcm1hdHRlcnNTeW0sXG4gIGhvb2tzU3ltLFxuICBuZXN0ZWRLZXlTdHJTeW0sXG4gIG1peGluTWVyZ2VTdHJhdGVneVN5bSxcbiAgbXNnUHJlZml4U3ltXG59XG4iXSwibmFtZXMiOlsic2V0TGV2ZWxTeW0iLCJTeW1ib2wiLCJnZXRMZXZlbFN5bSIsImxldmVsVmFsU3ltIiwibGV2ZWxDb21wU3ltIiwidXNlTGV2ZWxMYWJlbHNTeW0iLCJ1c2VPbmx5Q3VzdG9tTGV2ZWxzU3ltIiwibWl4aW5TeW0iLCJsc0NhY2hlU3ltIiwiY2hpbmRpbmdzU3ltIiwiYXNKc29uU3ltIiwid3JpdGVTeW0iLCJyZWRhY3RGbXRTeW0iLCJ0aW1lU3ltIiwidGltZVNsaWNlSW5kZXhTeW0iLCJzdHJlYW1TeW0iLCJzdHJpbmdpZnlTeW0iLCJzdHJpbmdpZnlTYWZlU3ltIiwic3RyaW5naWZpZXJzU3ltIiwiZW5kU3ltIiwiZm9ybWF0T3B0c1N5bSIsIm1lc3NhZ2VLZXlTeW0iLCJlcnJvcktleVN5bSIsIm5lc3RlZEtleVN5bSIsIm5lc3RlZEtleVN0clN5bSIsIm1peGluTWVyZ2VTdHJhdGVneVN5bSIsIm1zZ1ByZWZpeFN5bSIsIndpbGRjYXJkRmlyc3RTeW0iLCJzZXJpYWxpemVyc1N5bSIsImZvciIsImZvcm1hdHRlcnNTeW0iLCJob29rc1N5bSIsIm5lZWRzTWV0YWRhdGFHc3ltIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/symbols.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/time.js":
/*!***************************************!*\
  !*** ./node_modules/pino/lib/time.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nconst nullTime = ()=>\"\";\nconst epochTime = ()=>`,\"time\":${Date.now()}`;\nconst unixTime = ()=>`,\"time\":${Math.round(Date.now() / 1000.0)}`;\nconst isoTime = ()=>`,\"time\":\"${new Date(Date.now()).toISOString()}\"` // using Date.now() for testability\n;\nmodule.exports = {\n    nullTime,\n    epochTime,\n    unixTime,\n    isoTime\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVcsSUFBTTtBQUV2QixNQUFNQyxZQUFZLElBQU0sQ0FBQyxRQUFRLEVBQUVDLEtBQUtDLEdBQUcsR0FBRyxDQUFDO0FBRS9DLE1BQU1DLFdBQVcsSUFBTSxDQUFDLFFBQVEsRUFBRUMsS0FBS0MsS0FBSyxDQUFDSixLQUFLQyxHQUFHLEtBQUssUUFBUSxDQUFDO0FBRW5FLE1BQU1JLFVBQVUsSUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJTCxLQUFLQSxLQUFLQyxHQUFHLElBQUlLLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7O0FBRTNHQyxPQUFPQyxPQUFPLEdBQUc7SUFBRVY7SUFBVUM7SUFBV0c7SUFBVUc7QUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL25lY3Rhci1hZG1pbi12MS8uL25vZGVfbW9kdWxlcy9waW5vL2xpYi90aW1lLmpzPzQxMzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IG51bGxUaW1lID0gKCkgPT4gJydcblxuY29uc3QgZXBvY2hUaW1lID0gKCkgPT4gYCxcInRpbWVcIjoke0RhdGUubm93KCl9YFxuXG5jb25zdCB1bml4VGltZSA9ICgpID0+IGAsXCJ0aW1lXCI6JHtNYXRoLnJvdW5kKERhdGUubm93KCkgLyAxMDAwLjApfWBcblxuY29uc3QgaXNvVGltZSA9ICgpID0+IGAsXCJ0aW1lXCI6XCIke25ldyBEYXRlKERhdGUubm93KCkpLnRvSVNPU3RyaW5nKCl9XCJgIC8vIHVzaW5nIERhdGUubm93KCkgZm9yIHRlc3RhYmlsaXR5XG5cbm1vZHVsZS5leHBvcnRzID0geyBudWxsVGltZSwgZXBvY2hUaW1lLCB1bml4VGltZSwgaXNvVGltZSB9XG4iXSwibmFtZXMiOlsibnVsbFRpbWUiLCJlcG9jaFRpbWUiLCJEYXRlIiwibm93IiwidW5peFRpbWUiLCJNYXRoIiwicm91bmQiLCJpc29UaW1lIiwidG9JU09TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/tools.js":
/*!****************************************!*\
  !*** ./node_modules/pino/lib/tools.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const format = __webpack_require__(/*! quick-format-unescaped */ \"(rsc)/./node_modules/quick-format-unescaped/index.js\");\nconst { mapHttpRequest, mapHttpResponse } = __webpack_require__(/*! pino-std-serializers */ \"(rsc)/./node_modules/pino-std-serializers/index.js\");\nconst SonicBoom = __webpack_require__(/*! sonic-boom */ \"(rsc)/./node_modules/sonic-boom/index.js\");\nconst onExit = __webpack_require__(/*! on-exit-leak-free */ \"(rsc)/./node_modules/on-exit-leak-free/index.js\");\nconst { lsCacheSym, chindingsSym, writeSym, serializersSym, formatOptsSym, endSym, stringifiersSym, stringifySym, stringifySafeSym, wildcardFirstSym, nestedKeySym, formattersSym, messageKeySym, errorKeySym, nestedKeyStrSym, msgPrefixSym } = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/pino/lib/symbols.js\");\nconst { isMainThread } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst transport = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/pino/lib/transport.js\");\nfunction noop() {}\nfunction genLog(level, hook) {\n    if (!hook) return LOG;\n    return function hookWrappedLog(...args) {\n        hook.call(this, args, LOG, level);\n    };\n    function LOG(o, ...n) {\n        if (typeof o === \"object\") {\n            let msg = o;\n            if (o !== null) {\n                if (o.method && o.headers && o.socket) {\n                    o = mapHttpRequest(o);\n                } else if (typeof o.setHeader === \"function\") {\n                    o = mapHttpResponse(o);\n                }\n            }\n            let formatParams;\n            if (msg === null && n.length === 0) {\n                formatParams = [\n                    null\n                ];\n            } else {\n                msg = n.shift();\n                formatParams = n;\n            }\n            // We do not use a coercive check for `msg` as it is\n            // measurably slower than the explicit checks.\n            if (typeof this[msgPrefixSym] === \"string\" && msg !== undefined && msg !== null) {\n                msg = this[msgPrefixSym] + msg;\n            }\n            this[writeSym](o, format(msg, formatParams, this[formatOptsSym]), level);\n        } else {\n            let msg = o === undefined ? n.shift() : o;\n            // We do not use a coercive check for `msg` as it is\n            // measurably slower than the explicit checks.\n            if (typeof this[msgPrefixSym] === \"string\" && msg !== undefined && msg !== null) {\n                msg = this[msgPrefixSym] + msg;\n            }\n            this[writeSym](null, format(msg, n, this[formatOptsSym]), level);\n        }\n    }\n}\n// magically escape strings for json\n// relying on their charCodeAt\n// everything below 32 needs JSON.stringify()\n// 34 and 92 happens all the time, so we\n// have a fast case for them\nfunction asString(str) {\n    let result = \"\";\n    let last = 0;\n    let found = false;\n    let point = 255;\n    const l = str.length;\n    if (l > 100) {\n        return JSON.stringify(str);\n    }\n    for(var i = 0; i < l && point >= 32; i++){\n        point = str.charCodeAt(i);\n        if (point === 34 || point === 92) {\n            result += str.slice(last, i) + \"\\\\\";\n            last = i;\n            found = true;\n        }\n    }\n    if (!found) {\n        result = str;\n    } else {\n        result += str.slice(last);\n    }\n    return point < 32 ? JSON.stringify(str) : '\"' + result + '\"';\n}\nfunction asJson(obj, msg, num, time) {\n    const stringify = this[stringifySym];\n    const stringifySafe = this[stringifySafeSym];\n    const stringifiers = this[stringifiersSym];\n    const end = this[endSym];\n    const chindings = this[chindingsSym];\n    const serializers = this[serializersSym];\n    const formatters = this[formattersSym];\n    const messageKey = this[messageKeySym];\n    const errorKey = this[errorKeySym];\n    let data = this[lsCacheSym][num] + time;\n    // we need the child bindings added to the output first so instance logged\n    // objects can take precedence when JSON.parse-ing the resulting log line\n    data = data + chindings;\n    let value;\n    if (formatters.log) {\n        obj = formatters.log(obj);\n    }\n    const wildcardStringifier = stringifiers[wildcardFirstSym];\n    let propStr = \"\";\n    for(const key in obj){\n        value = obj[key];\n        if (Object.prototype.hasOwnProperty.call(obj, key) && value !== undefined) {\n            if (serializers[key]) {\n                value = serializers[key](value);\n            } else if (key === errorKey && serializers.err) {\n                value = serializers.err(value);\n            }\n            const stringifier = stringifiers[key] || wildcardStringifier;\n            switch(typeof value){\n                case \"undefined\":\n                case \"function\":\n                    continue;\n                case \"number\":\n                    /* eslint no-fallthrough: \"off\" */ if (Number.isFinite(value) === false) {\n                        value = null;\n                    }\n                // this case explicitly falls through to the next one\n                case \"boolean\":\n                    if (stringifier) value = stringifier(value);\n                    break;\n                case \"string\":\n                    value = (stringifier || asString)(value);\n                    break;\n                default:\n                    value = (stringifier || stringify)(value, stringifySafe);\n            }\n            if (value === undefined) continue;\n            const strKey = asString(key);\n            propStr += \",\" + strKey + \":\" + value;\n        }\n    }\n    let msgStr = \"\";\n    if (msg !== undefined) {\n        value = serializers[messageKey] ? serializers[messageKey](msg) : msg;\n        const stringifier = stringifiers[messageKey] || wildcardStringifier;\n        switch(typeof value){\n            case \"function\":\n                break;\n            case \"number\":\n                /* eslint no-fallthrough: \"off\" */ if (Number.isFinite(value) === false) {\n                    value = null;\n                }\n            // this case explicitly falls through to the next one\n            case \"boolean\":\n                if (stringifier) value = stringifier(value);\n                msgStr = ',\"' + messageKey + '\":' + value;\n                break;\n            case \"string\":\n                value = (stringifier || asString)(value);\n                msgStr = ',\"' + messageKey + '\":' + value;\n                break;\n            default:\n                value = (stringifier || stringify)(value, stringifySafe);\n                msgStr = ',\"' + messageKey + '\":' + value;\n        }\n    }\n    if (this[nestedKeySym] && propStr) {\n        // place all the obj properties under the specified key\n        // the nested key is already formatted from the constructor\n        return data + this[nestedKeyStrSym] + propStr.slice(1) + \"}\" + msgStr + end;\n    } else {\n        return data + propStr + msgStr + end;\n    }\n}\nfunction asChindings(instance, bindings) {\n    let value;\n    let data = instance[chindingsSym];\n    const stringify = instance[stringifySym];\n    const stringifySafe = instance[stringifySafeSym];\n    const stringifiers = instance[stringifiersSym];\n    const wildcardStringifier = stringifiers[wildcardFirstSym];\n    const serializers = instance[serializersSym];\n    const formatter = instance[formattersSym].bindings;\n    bindings = formatter(bindings);\n    for(const key in bindings){\n        value = bindings[key];\n        const valid = key !== \"level\" && key !== \"serializers\" && key !== \"formatters\" && key !== \"customLevels\" && bindings.hasOwnProperty(key) && value !== undefined;\n        if (valid === true) {\n            value = serializers[key] ? serializers[key](value) : value;\n            value = (stringifiers[key] || wildcardStringifier || stringify)(value, stringifySafe);\n            if (value === undefined) continue;\n            data += ',\"' + key + '\":' + value;\n        }\n    }\n    return data;\n}\nfunction hasBeenTampered(stream) {\n    return stream.write !== stream.constructor.prototype.write;\n}\nconst hasNodeCodeCoverage = process.env.NODE_V8_COVERAGE || process.env.V8_COVERAGE;\nfunction buildSafeSonicBoom(opts) {\n    const stream = new SonicBoom(opts);\n    stream.on(\"error\", filterBrokenPipe);\n    // If we are sync: false, we must flush on exit\n    // We must disable this if there is node code coverage due to\n    // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308.\n    if (!hasNodeCodeCoverage && !opts.sync && isMainThread) {\n        onExit.register(stream, autoEnd);\n        stream.on(\"close\", function() {\n            onExit.unregister(stream);\n        });\n    }\n    return stream;\n    function filterBrokenPipe(err) {\n        // Impossible to replicate across all operating systems\n        /* istanbul ignore next */ if (err.code === \"EPIPE\") {\n            // If we get EPIPE, we should stop logging here\n            // however we have no control to the consumer of\n            // SonicBoom, so we just overwrite the write method\n            stream.write = noop;\n            stream.end = noop;\n            stream.flushSync = noop;\n            stream.destroy = noop;\n            return;\n        }\n        stream.removeListener(\"error\", filterBrokenPipe);\n        stream.emit(\"error\", err);\n    }\n}\nfunction autoEnd(stream, eventName) {\n    // This check is needed only on some platforms\n    /* istanbul ignore next */ if (stream.destroyed) {\n        return;\n    }\n    if (eventName === \"beforeExit\") {\n        // We still have an event loop, let's use it\n        stream.flush();\n        stream.on(\"drain\", function() {\n            stream.end();\n        });\n    } else {\n        // For some reason istanbul is not detecting this, but it's there\n        /* istanbul ignore next */ // We do not have an event loop, so flush synchronously\n        stream.flushSync();\n    }\n}\nfunction createArgsNormalizer(defaultOptions) {\n    return function normalizeArgs(instance, caller, opts = {}, stream) {\n        // support stream as a string\n        if (typeof opts === \"string\") {\n            stream = buildSafeSonicBoom({\n                dest: opts\n            });\n            opts = {};\n        } else if (typeof stream === \"string\") {\n            if (opts && opts.transport) {\n                throw Error(\"only one of option.transport or stream can be specified\");\n            }\n            stream = buildSafeSonicBoom({\n                dest: stream\n            });\n        } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {\n            stream = opts;\n            opts = {};\n        } else if (opts.transport) {\n            if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {\n                throw Error(\"option.transport do not allow stream, please pass to option directly. e.g. pino(transport)\");\n            }\n            if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === \"function\") {\n                throw Error(\"option.transport.targets do not allow custom level formatters\");\n            }\n            let customLevels;\n            if (opts.customLevels) {\n                customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);\n            }\n            stream = transport({\n                caller,\n                ...opts.transport,\n                levels: customLevels\n            });\n        }\n        opts = Object.assign({}, defaultOptions, opts);\n        opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers);\n        opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters);\n        if (opts.prettyPrint) {\n            throw new Error(\"prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)\");\n        }\n        const { enabled, onChild } = opts;\n        if (enabled === false) opts.level = \"silent\";\n        if (!onChild) opts.onChild = noop;\n        if (!stream) {\n            if (!hasBeenTampered(process.stdout)) {\n                // If process.stdout.fd is undefined, it means that we are running\n                // in a worker thread. Let's assume we are logging to file descriptor 1.\n                stream = buildSafeSonicBoom({\n                    fd: process.stdout.fd || 1\n                });\n            } else {\n                stream = process.stdout;\n            }\n        }\n        return {\n            opts,\n            stream\n        };\n    };\n}\nfunction stringify(obj, stringifySafeFn) {\n    try {\n        return JSON.stringify(obj);\n    } catch (_) {\n        try {\n            const stringify = stringifySafeFn || this[stringifySafeSym];\n            return stringify(obj);\n        } catch (_) {\n            return '\"[unable to serialize, circular reference is too complex to analyze]\"';\n        }\n    }\n}\nfunction buildFormatters(level, bindings, log) {\n    return {\n        level,\n        bindings,\n        log\n    };\n}\n/**\n * Convert a string integer file descriptor to a proper native integer\n * file descriptor.\n *\n * @param {string} destination The file descriptor string to attempt to convert.\n *\n * @returns {Number}\n */ function normalizeDestFileDescriptor(destination) {\n    const fd = Number(destination);\n    if (typeof destination === \"string\" && Number.isFinite(fd)) {\n        return fd;\n    }\n    // destination could be undefined if we are in a worker\n    if (destination === undefined) {\n        // This is stdout in UNIX systems\n        return 1;\n    }\n    return destination;\n}\nmodule.exports = {\n    noop,\n    buildSafeSonicBoom,\n    asChindings,\n    asJson,\n    genLog,\n    createArgsNormalizer,\n    stringify,\n    buildFormatters,\n    normalizeDestFileDescriptor\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/lib/transport.js":
/*!********************************************!*\
  !*** ./node_modules/pino/lib/transport.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { createRequire } = __webpack_require__(/*! module */ \"module\");\nconst getCallers = __webpack_require__(/*! ./caller */ \"(rsc)/./node_modules/pino/lib/caller.js\");\nconst { join, isAbsolute, sep } = __webpack_require__(/*! path */ \"path\");\nconst sleep = __webpack_require__(/*! atomic-sleep */ \"(rsc)/./node_modules/atomic-sleep/index.js\");\nconst onExit = __webpack_require__(/*! on-exit-leak-free */ \"(rsc)/./node_modules/on-exit-leak-free/index.js\");\nconst ThreadStream = __webpack_require__(/*! thread-stream */ \"(rsc)/./node_modules/thread-stream/index.js\");\nfunction setupOnExit(stream) {\n    // This is leak free, it does not leave event handlers\n    onExit.register(stream, autoEnd);\n    onExit.registerBeforeExit(stream, flush);\n    stream.on(\"close\", function() {\n        onExit.unregister(stream);\n    });\n}\nfunction buildStream(filename, workerData, workerOpts) {\n    const stream = new ThreadStream({\n        filename,\n        workerData,\n        workerOpts\n    });\n    stream.on(\"ready\", onReady);\n    stream.on(\"close\", function() {\n        process.removeListener(\"exit\", onExit);\n    });\n    process.on(\"exit\", onExit);\n    function onReady() {\n        process.removeListener(\"exit\", onExit);\n        stream.unref();\n        if (workerOpts.autoEnd !== false) {\n            setupOnExit(stream);\n        }\n    }\n    function onExit() {\n        /* istanbul ignore next */ if (stream.closed) {\n            return;\n        }\n        stream.flushSync();\n        // Apparently there is a very sporadic race condition\n        // that in certain OS would prevent the messages to be flushed\n        // because the thread might not have been created still.\n        // Unfortunately we need to sleep(100) in this case.\n        sleep(100);\n        stream.end();\n    }\n    return stream;\n}\nfunction autoEnd(stream) {\n    stream.ref();\n    stream.flushSync();\n    stream.end();\n    stream.once(\"close\", function() {\n        stream.unref();\n    });\n}\nfunction flush(stream) {\n    stream.flushSync();\n}\nfunction transport(fullOptions) {\n    const { pipeline, targets, levels, dedupe, options = {}, worker = {}, caller = getCallers() } = fullOptions;\n    // Backwards compatibility\n    const callers = typeof caller === \"string\" ? [\n        caller\n    ] : caller;\n    // This will be eventually modified by bundlers\n    const bundlerOverrides = \"__bundlerPathsOverrides\" in globalThis ? globalThis.__bundlerPathsOverrides : {};\n    let target = fullOptions.target;\n    if (target && targets) {\n        throw new Error(\"only one of target or targets can be specified\");\n    }\n    if (targets) {\n        target = bundlerOverrides[\"pino-worker\"] || join(__dirname, \"worker.js\");\n        options.targets = targets.map((dest)=>{\n            return {\n                ...dest,\n                target: fixTarget(dest.target)\n            };\n        });\n    } else if (pipeline) {\n        target = bundlerOverrides[\"pino-pipeline-worker\"] || join(__dirname, \"worker-pipeline.js\");\n        options.targets = pipeline.map((dest)=>{\n            return {\n                ...dest,\n                target: fixTarget(dest.target)\n            };\n        });\n    }\n    if (levels) {\n        options.levels = levels;\n    }\n    if (dedupe) {\n        options.dedupe = dedupe;\n    }\n    options.pinoWillSendConfig = true;\n    return buildStream(fixTarget(target), options, worker);\n    function fixTarget(origin) {\n        origin = bundlerOverrides[origin] || origin;\n        if (isAbsolute(origin) || origin.indexOf(\"file://\") === 0) {\n            return origin;\n        }\n        if (origin === \"pino/file\") {\n            return join(__dirname, \"..\", \"file.js\");\n        }\n        let fixTarget;\n        for (const filePath of callers){\n            try {\n                const context = filePath === \"node:repl\" ? process.cwd() + sep : filePath;\n                fixTarget = createRequire(context).resolve(origin);\n                break;\n            } catch (err) {\n                continue;\n            }\n        }\n        if (!fixTarget) {\n            throw new Error(`unable to determine transport target for \"${origin}\"`);\n        }\n        return fixTarget;\n    }\n}\nmodule.exports = transport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGluby9saWIvdHJhbnNwb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxhQUFhLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDbEMsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUM7QUFDM0IsTUFBTSxFQUFFRSxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsR0FBRyxFQUFFLEdBQUdKLG1CQUFPQSxDQUFDO0FBQzFDLE1BQU1LLFFBQVFMLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1NLFNBQVNOLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1PLGVBQWVQLG1CQUFPQSxDQUFDO0FBRTdCLFNBQVNRLFlBQWFDLE1BQU07SUFDMUIsc0RBQXNEO0lBQ3RESCxPQUFPSSxRQUFRLENBQUNELFFBQVFFO0lBQ3hCTCxPQUFPTSxrQkFBa0IsQ0FBQ0gsUUFBUUk7SUFFbENKLE9BQU9LLEVBQUUsQ0FBQyxTQUFTO1FBQ2pCUixPQUFPUyxVQUFVLENBQUNOO0lBQ3BCO0FBQ0Y7QUFFQSxTQUFTTyxZQUFhQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsVUFBVTtJQUNwRCxNQUFNVixTQUFTLElBQUlGLGFBQWE7UUFDOUJVO1FBQ0FDO1FBQ0FDO0lBQ0Y7SUFFQVYsT0FBT0ssRUFBRSxDQUFDLFNBQVNNO0lBQ25CWCxPQUFPSyxFQUFFLENBQUMsU0FBUztRQUNqQk8sUUFBUUMsY0FBYyxDQUFDLFFBQVFoQjtJQUNqQztJQUVBZSxRQUFRUCxFQUFFLENBQUMsUUFBUVI7SUFFbkIsU0FBU2M7UUFDUEMsUUFBUUMsY0FBYyxDQUFDLFFBQVFoQjtRQUMvQkcsT0FBT2MsS0FBSztRQUVaLElBQUlKLFdBQVdSLE9BQU8sS0FBSyxPQUFPO1lBQ2hDSCxZQUFZQztRQUNkO0lBQ0Y7SUFFQSxTQUFTSDtRQUNQLHdCQUF3QixHQUN4QixJQUFJRyxPQUFPZSxNQUFNLEVBQUU7WUFDakI7UUFDRjtRQUNBZixPQUFPZ0IsU0FBUztRQUNoQixxREFBcUQ7UUFDckQsOERBQThEO1FBQzlELHdEQUF3RDtRQUN4RCxvREFBb0Q7UUFDcERwQixNQUFNO1FBQ05JLE9BQU9pQixHQUFHO0lBQ1o7SUFFQSxPQUFPakI7QUFDVDtBQUVBLFNBQVNFLFFBQVNGLE1BQU07SUFDdEJBLE9BQU9rQixHQUFHO0lBQ1ZsQixPQUFPZ0IsU0FBUztJQUNoQmhCLE9BQU9pQixHQUFHO0lBQ1ZqQixPQUFPbUIsSUFBSSxDQUFDLFNBQVM7UUFDbkJuQixPQUFPYyxLQUFLO0lBQ2Q7QUFDRjtBQUVBLFNBQVNWLE1BQU9KLE1BQU07SUFDcEJBLE9BQU9nQixTQUFTO0FBQ2xCO0FBRUEsU0FBU0ksVUFBV0MsV0FBVztJQUM3QixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxDQUFDLENBQUMsRUFBRUMsU0FBUyxDQUFDLENBQUMsRUFBRUMsU0FBU3BDLFlBQVksRUFBRSxHQUFHNkI7SUFFaEcsMEJBQTBCO0lBQzFCLE1BQU1RLFVBQVUsT0FBT0QsV0FBVyxXQUFXO1FBQUNBO0tBQU8sR0FBR0E7SUFFeEQsK0NBQStDO0lBQy9DLE1BQU1FLG1CQUFtQiw2QkFBNkJDLGFBQWFBLFdBQVdDLHVCQUF1QixHQUFHLENBQUM7SUFFekcsSUFBSUMsU0FBU1osWUFBWVksTUFBTTtJQUUvQixJQUFJQSxVQUFVVixTQUFTO1FBQ3JCLE1BQU0sSUFBSVcsTUFBTTtJQUNsQjtJQUVBLElBQUlYLFNBQVM7UUFDWFUsU0FBU0gsZ0JBQWdCLENBQUMsY0FBYyxJQUFJckMsS0FBSzBDLFdBQVc7UUFDNURULFFBQVFILE9BQU8sR0FBR0EsUUFBUWEsR0FBRyxDQUFDLENBQUNDO1lBQzdCLE9BQU87Z0JBQ0wsR0FBR0EsSUFBSTtnQkFDUEosUUFBUUssVUFBVUQsS0FBS0osTUFBTTtZQUMvQjtRQUNGO0lBQ0YsT0FBTyxJQUFJWCxVQUFVO1FBQ25CVyxTQUFTSCxnQkFBZ0IsQ0FBQyx1QkFBdUIsSUFBSXJDLEtBQUswQyxXQUFXO1FBQ3JFVCxRQUFRSCxPQUFPLEdBQUdELFNBQVNjLEdBQUcsQ0FBQyxDQUFDQztZQUM5QixPQUFPO2dCQUNMLEdBQUdBLElBQUk7Z0JBQ1BKLFFBQVFLLFVBQVVELEtBQUtKLE1BQU07WUFDL0I7UUFDRjtJQUNGO0lBRUEsSUFBSVQsUUFBUTtRQUNWRSxRQUFRRixNQUFNLEdBQUdBO0lBQ25CO0lBRUEsSUFBSUMsUUFBUTtRQUNWQyxRQUFRRCxNQUFNLEdBQUdBO0lBQ25CO0lBRUFDLFFBQVFhLGtCQUFrQixHQUFHO0lBRTdCLE9BQU9oQyxZQUFZK0IsVUFBVUwsU0FBU1AsU0FBU0M7SUFFL0MsU0FBU1csVUFBV0UsTUFBTTtRQUN4QkEsU0FBU1YsZ0JBQWdCLENBQUNVLE9BQU8sSUFBSUE7UUFFckMsSUFBSTlDLFdBQVc4QyxXQUFXQSxPQUFPQyxPQUFPLENBQUMsZUFBZSxHQUFHO1lBQ3pELE9BQU9EO1FBQ1Q7UUFFQSxJQUFJQSxXQUFXLGFBQWE7WUFDMUIsT0FBTy9DLEtBQUswQyxXQUFXLE1BQU07UUFDL0I7UUFFQSxJQUFJRztRQUVKLEtBQUssTUFBTUksWUFBWWIsUUFBUztZQUM5QixJQUFJO2dCQUNGLE1BQU1jLFVBQVVELGFBQWEsY0FDekI5QixRQUFRZ0MsR0FBRyxLQUFLakQsTUFDaEIrQztnQkFFSkosWUFBWWhELGNBQWNxRCxTQUFTRSxPQUFPLENBQUNMO2dCQUMzQztZQUNGLEVBQUUsT0FBT00sS0FBSztnQkFFWjtZQUNGO1FBQ0Y7UUFFQSxJQUFJLENBQUNSLFdBQVc7WUFDZCxNQUFNLElBQUlKLE1BQU0sQ0FBQywwQ0FBMEMsRUFBRU0sT0FBTyxDQUFDLENBQUM7UUFDeEU7UUFFQSxPQUFPRjtJQUNUO0FBQ0Y7QUFFQVMsT0FBT0MsT0FBTyxHQUFHNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZWN0YXItYWRtaW4tdjEvLi9ub2RlX21vZHVsZXMvcGluby9saWIvdHJhbnNwb3J0LmpzPzU2MTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgY3JlYXRlUmVxdWlyZSB9ID0gcmVxdWlyZSgnbW9kdWxlJylcbmNvbnN0IGdldENhbGxlcnMgPSByZXF1aXJlKCcuL2NhbGxlcicpXG5jb25zdCB7IGpvaW4sIGlzQWJzb2x1dGUsIHNlcCB9ID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCBzbGVlcCA9IHJlcXVpcmUoJ2F0b21pYy1zbGVlcCcpXG5jb25zdCBvbkV4aXQgPSByZXF1aXJlKCdvbi1leGl0LWxlYWstZnJlZScpXG5jb25zdCBUaHJlYWRTdHJlYW0gPSByZXF1aXJlKCd0aHJlYWQtc3RyZWFtJylcblxuZnVuY3Rpb24gc2V0dXBPbkV4aXQgKHN0cmVhbSkge1xuICAvLyBUaGlzIGlzIGxlYWsgZnJlZSwgaXQgZG9lcyBub3QgbGVhdmUgZXZlbnQgaGFuZGxlcnNcbiAgb25FeGl0LnJlZ2lzdGVyKHN0cmVhbSwgYXV0b0VuZClcbiAgb25FeGl0LnJlZ2lzdGVyQmVmb3JlRXhpdChzdHJlYW0sIGZsdXNoKVxuXG4gIHN0cmVhbS5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgb25FeGl0LnVucmVnaXN0ZXIoc3RyZWFtKVxuICB9KVxufVxuXG5mdW5jdGlvbiBidWlsZFN0cmVhbSAoZmlsZW5hbWUsIHdvcmtlckRhdGEsIHdvcmtlck9wdHMpIHtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFRocmVhZFN0cmVhbSh7XG4gICAgZmlsZW5hbWUsXG4gICAgd29ya2VyRGF0YSxcbiAgICB3b3JrZXJPcHRzXG4gIH0pXG5cbiAgc3RyZWFtLm9uKCdyZWFkeScsIG9uUmVhZHkpXG4gIHN0cmVhbS5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcignZXhpdCcsIG9uRXhpdClcbiAgfSlcblxuICBwcm9jZXNzLm9uKCdleGl0Jywgb25FeGl0KVxuXG4gIGZ1bmN0aW9uIG9uUmVhZHkgKCkge1xuICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ2V4aXQnLCBvbkV4aXQpXG4gICAgc3RyZWFtLnVucmVmKClcblxuICAgIGlmICh3b3JrZXJPcHRzLmF1dG9FbmQgIT09IGZhbHNlKSB7XG4gICAgICBzZXR1cE9uRXhpdChzdHJlYW0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25FeGl0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmIChzdHJlYW0uY2xvc2VkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc3RyZWFtLmZsdXNoU3luYygpXG4gICAgLy8gQXBwYXJlbnRseSB0aGVyZSBpcyBhIHZlcnkgc3BvcmFkaWMgcmFjZSBjb25kaXRpb25cbiAgICAvLyB0aGF0IGluIGNlcnRhaW4gT1Mgd291bGQgcHJldmVudCB0aGUgbWVzc2FnZXMgdG8gYmUgZmx1c2hlZFxuICAgIC8vIGJlY2F1c2UgdGhlIHRocmVhZCBtaWdodCBub3QgaGF2ZSBiZWVuIGNyZWF0ZWQgc3RpbGwuXG4gICAgLy8gVW5mb3J0dW5hdGVseSB3ZSBuZWVkIHRvIHNsZWVwKDEwMCkgaW4gdGhpcyBjYXNlLlxuICAgIHNsZWVwKDEwMClcbiAgICBzdHJlYW0uZW5kKClcbiAgfVxuXG4gIHJldHVybiBzdHJlYW1cbn1cblxuZnVuY3Rpb24gYXV0b0VuZCAoc3RyZWFtKSB7XG4gIHN0cmVhbS5yZWYoKVxuICBzdHJlYW0uZmx1c2hTeW5jKClcbiAgc3RyZWFtLmVuZCgpXG4gIHN0cmVhbS5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzdHJlYW0udW5yZWYoKVxuICB9KVxufVxuXG5mdW5jdGlvbiBmbHVzaCAoc3RyZWFtKSB7XG4gIHN0cmVhbS5mbHVzaFN5bmMoKVxufVxuXG5mdW5jdGlvbiB0cmFuc3BvcnQgKGZ1bGxPcHRpb25zKSB7XG4gIGNvbnN0IHsgcGlwZWxpbmUsIHRhcmdldHMsIGxldmVscywgZGVkdXBlLCBvcHRpb25zID0ge30sIHdvcmtlciA9IHt9LCBjYWxsZXIgPSBnZXRDYWxsZXJzKCkgfSA9IGZ1bGxPcHRpb25zXG5cbiAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgY29uc3QgY2FsbGVycyA9IHR5cGVvZiBjYWxsZXIgPT09ICdzdHJpbmcnID8gW2NhbGxlcl0gOiBjYWxsZXJcblxuICAvLyBUaGlzIHdpbGwgYmUgZXZlbnR1YWxseSBtb2RpZmllZCBieSBidW5kbGVyc1xuICBjb25zdCBidW5kbGVyT3ZlcnJpZGVzID0gJ19fYnVuZGxlclBhdGhzT3ZlcnJpZGVzJyBpbiBnbG9iYWxUaGlzID8gZ2xvYmFsVGhpcy5fX2J1bmRsZXJQYXRoc092ZXJyaWRlcyA6IHt9XG5cbiAgbGV0IHRhcmdldCA9IGZ1bGxPcHRpb25zLnRhcmdldFxuXG4gIGlmICh0YXJnZXQgJiYgdGFyZ2V0cykge1xuICAgIHRocm93IG5ldyBFcnJvcignb25seSBvbmUgb2YgdGFyZ2V0IG9yIHRhcmdldHMgY2FuIGJlIHNwZWNpZmllZCcpXG4gIH1cblxuICBpZiAodGFyZ2V0cykge1xuICAgIHRhcmdldCA9IGJ1bmRsZXJPdmVycmlkZXNbJ3Bpbm8td29ya2VyJ10gfHwgam9pbihfX2Rpcm5hbWUsICd3b3JrZXIuanMnKVxuICAgIG9wdGlvbnMudGFyZ2V0cyA9IHRhcmdldHMubWFwKChkZXN0KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZXN0LFxuICAgICAgICB0YXJnZXQ6IGZpeFRhcmdldChkZXN0LnRhcmdldClcbiAgICAgIH1cbiAgICB9KVxuICB9IGVsc2UgaWYgKHBpcGVsaW5lKSB7XG4gICAgdGFyZ2V0ID0gYnVuZGxlck92ZXJyaWRlc1sncGluby1waXBlbGluZS13b3JrZXInXSB8fCBqb2luKF9fZGlybmFtZSwgJ3dvcmtlci1waXBlbGluZS5qcycpXG4gICAgb3B0aW9ucy50YXJnZXRzID0gcGlwZWxpbmUubWFwKChkZXN0KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZXN0LFxuICAgICAgICB0YXJnZXQ6IGZpeFRhcmdldChkZXN0LnRhcmdldClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaWYgKGxldmVscykge1xuICAgIG9wdGlvbnMubGV2ZWxzID0gbGV2ZWxzXG4gIH1cblxuICBpZiAoZGVkdXBlKSB7XG4gICAgb3B0aW9ucy5kZWR1cGUgPSBkZWR1cGVcbiAgfVxuXG4gIG9wdGlvbnMucGlub1dpbGxTZW5kQ29uZmlnID0gdHJ1ZVxuXG4gIHJldHVybiBidWlsZFN0cmVhbShmaXhUYXJnZXQodGFyZ2V0KSwgb3B0aW9ucywgd29ya2VyKVxuXG4gIGZ1bmN0aW9uIGZpeFRhcmdldCAob3JpZ2luKSB7XG4gICAgb3JpZ2luID0gYnVuZGxlck92ZXJyaWRlc1tvcmlnaW5dIHx8IG9yaWdpblxuXG4gICAgaWYgKGlzQWJzb2x1dGUob3JpZ2luKSB8fCBvcmlnaW4uaW5kZXhPZignZmlsZTovLycpID09PSAwKSB7XG4gICAgICByZXR1cm4gb3JpZ2luXG4gICAgfVxuXG4gICAgaWYgKG9yaWdpbiA9PT0gJ3Bpbm8vZmlsZScpIHtcbiAgICAgIHJldHVybiBqb2luKF9fZGlybmFtZSwgJy4uJywgJ2ZpbGUuanMnKVxuICAgIH1cblxuICAgIGxldCBmaXhUYXJnZXRcblxuICAgIGZvciAoY29uc3QgZmlsZVBhdGggb2YgY2FsbGVycykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGZpbGVQYXRoID09PSAnbm9kZTpyZXBsJ1xuICAgICAgICAgID8gcHJvY2Vzcy5jd2QoKSArIHNlcFxuICAgICAgICAgIDogZmlsZVBhdGhcblxuICAgICAgICBmaXhUYXJnZXQgPSBjcmVhdGVSZXF1aXJlKGNvbnRleHQpLnJlc29sdmUob3JpZ2luKVxuICAgICAgICBicmVha1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIFNpbGVudCBjYXRjaFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZml4VGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBkZXRlcm1pbmUgdHJhbnNwb3J0IHRhcmdldCBmb3IgXCIke29yaWdpbn1cImApXG4gICAgfVxuXG4gICAgcmV0dXJuIGZpeFRhcmdldFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNwb3J0XG4iXSwibmFtZXMiOlsiY3JlYXRlUmVxdWlyZSIsInJlcXVpcmUiLCJnZXRDYWxsZXJzIiwiam9pbiIsImlzQWJzb2x1dGUiLCJzZXAiLCJzbGVlcCIsIm9uRXhpdCIsIlRocmVhZFN0cmVhbSIsInNldHVwT25FeGl0Iiwic3RyZWFtIiwicmVnaXN0ZXIiLCJhdXRvRW5kIiwicmVnaXN0ZXJCZWZvcmVFeGl0IiwiZmx1c2giLCJvbiIsInVucmVnaXN0ZXIiLCJidWlsZFN0cmVhbSIsImZpbGVuYW1lIiwid29ya2VyRGF0YSIsIndvcmtlck9wdHMiLCJvblJlYWR5IiwicHJvY2VzcyIsInJlbW92ZUxpc3RlbmVyIiwidW5yZWYiLCJjbG9zZWQiLCJmbHVzaFN5bmMiLCJlbmQiLCJyZWYiLCJvbmNlIiwidHJhbnNwb3J0IiwiZnVsbE9wdGlvbnMiLCJwaXBlbGluZSIsInRhcmdldHMiLCJsZXZlbHMiLCJkZWR1cGUiLCJvcHRpb25zIiwid29ya2VyIiwiY2FsbGVyIiwiY2FsbGVycyIsImJ1bmRsZXJPdmVycmlkZXMiLCJnbG9iYWxUaGlzIiwiX19idW5kbGVyUGF0aHNPdmVycmlkZXMiLCJ0YXJnZXQiLCJFcnJvciIsIl9fZGlybmFtZSIsIm1hcCIsImRlc3QiLCJmaXhUYXJnZXQiLCJwaW5vV2lsbFNlbmRDb25maWciLCJvcmlnaW4iLCJpbmRleE9mIiwiZmlsZVBhdGgiLCJjb250ZXh0IiwiY3dkIiwicmVzb2x2ZSIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/lib/transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pino/pino.js":
/*!***********************************!*\
  !*** ./node_modules/pino/pino.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint no-prototype-builtins: 0 */ const os = __webpack_require__(/*! os */ \"os\");\nconst stdSerializers = __webpack_require__(/*! pino-std-serializers */ \"(rsc)/./node_modules/pino-std-serializers/index.js\");\nconst caller = __webpack_require__(/*! ./lib/caller */ \"(rsc)/./node_modules/pino/lib/caller.js\");\nconst redaction = __webpack_require__(/*! ./lib/redaction */ \"(rsc)/./node_modules/pino/lib/redaction.js\");\nconst time = __webpack_require__(/*! ./lib/time */ \"(rsc)/./node_modules/pino/lib/time.js\");\nconst proto = __webpack_require__(/*! ./lib/proto */ \"(rsc)/./node_modules/pino/lib/proto.js\");\nconst symbols = __webpack_require__(/*! ./lib/symbols */ \"(rsc)/./node_modules/pino/lib/symbols.js\");\nconst { configure } = __webpack_require__(/*! safe-stable-stringify */ \"(rsc)/./node_modules/safe-stable-stringify/index.js\");\nconst { assertDefaultLevelFound, mappings, genLsCache, genLevelComparison, assertLevelComparison } = __webpack_require__(/*! ./lib/levels */ \"(rsc)/./node_modules/pino/lib/levels.js\");\nconst { DEFAULT_LEVELS, SORTING_ORDER } = __webpack_require__(/*! ./lib/constants */ \"(rsc)/./node_modules/pino/lib/constants.js\");\nconst { createArgsNormalizer, asChindings, buildSafeSonicBoom, buildFormatters, stringify, normalizeDestFileDescriptor, noop } = __webpack_require__(/*! ./lib/tools */ \"(rsc)/./node_modules/pino/lib/tools.js\");\nconst { version } = __webpack_require__(/*! ./lib/meta */ \"(rsc)/./node_modules/pino/lib/meta.js\");\nconst { chindingsSym, redactFmtSym, serializersSym, timeSym, timeSliceIndexSym, streamSym, stringifySym, stringifySafeSym, stringifiersSym, setLevelSym, endSym, formatOptsSym, messageKeySym, errorKeySym, nestedKeySym, mixinSym, levelCompSym, useOnlyCustomLevelsSym, formattersSym, hooksSym, nestedKeyStrSym, mixinMergeStrategySym, msgPrefixSym } = symbols;\nconst { epochTime, nullTime } = time;\nconst { pid } = process;\nconst hostname = os.hostname();\nconst defaultErrorSerializer = stdSerializers.err;\nconst defaultOptions = {\n    level: \"info\",\n    levelComparison: SORTING_ORDER.ASC,\n    levels: DEFAULT_LEVELS,\n    messageKey: \"msg\",\n    errorKey: \"err\",\n    nestedKey: null,\n    enabled: true,\n    base: {\n        pid,\n        hostname\n    },\n    serializers: Object.assign(Object.create(null), {\n        err: defaultErrorSerializer\n    }),\n    formatters: Object.assign(Object.create(null), {\n        bindings (bindings) {\n            return bindings;\n        },\n        level (label, number) {\n            return {\n                level: number\n            };\n        }\n    }),\n    hooks: {\n        logMethod: undefined\n    },\n    timestamp: epochTime,\n    name: undefined,\n    redact: null,\n    customLevels: null,\n    useOnlyCustomLevels: false,\n    depthLimit: 5,\n    edgeLimit: 100\n};\nconst normalize = createArgsNormalizer(defaultOptions);\nconst serializers = Object.assign(Object.create(null), stdSerializers);\nfunction pino(...args) {\n    const instance = {};\n    const { opts, stream } = normalize(instance, caller(), ...args);\n    const { redact, crlf, serializers, timestamp, messageKey, errorKey, nestedKey, base, name, level, customLevels, levelComparison, mixin, mixinMergeStrategy, useOnlyCustomLevels, formatters, hooks, depthLimit, edgeLimit, onChild, msgPrefix } = opts;\n    const stringifySafe = configure({\n        maximumDepth: depthLimit,\n        maximumBreadth: edgeLimit\n    });\n    const allFormatters = buildFormatters(formatters.level, formatters.bindings, formatters.log);\n    const stringifyFn = stringify.bind({\n        [stringifySafeSym]: stringifySafe\n    });\n    const stringifiers = redact ? redaction(redact, stringifyFn) : {};\n    const formatOpts = redact ? {\n        stringify: stringifiers[redactFmtSym]\n    } : {\n        stringify: stringifyFn\n    };\n    const end = \"}\" + (crlf ? \"\\r\\n\" : \"\\n\");\n    const coreChindings = asChindings.bind(null, {\n        [chindingsSym]: \"\",\n        [serializersSym]: serializers,\n        [stringifiersSym]: stringifiers,\n        [stringifySym]: stringify,\n        [stringifySafeSym]: stringifySafe,\n        [formattersSym]: allFormatters\n    });\n    let chindings = \"\";\n    if (base !== null) {\n        if (name === undefined) {\n            chindings = coreChindings(base);\n        } else {\n            chindings = coreChindings(Object.assign({}, base, {\n                name\n            }));\n        }\n    }\n    const time = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;\n    const timeSliceIndex = time().indexOf(\":\") + 1;\n    if (useOnlyCustomLevels && !customLevels) throw Error(\"customLevels is required if useOnlyCustomLevels is set true\");\n    if (mixin && typeof mixin !== \"function\") throw Error(`Unknown mixin type \"${typeof mixin}\" - expected \"function\"`);\n    if (msgPrefix && typeof msgPrefix !== \"string\") throw Error(`Unknown msgPrefix type \"${typeof msgPrefix}\" - expected \"string\"`);\n    assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);\n    const levels = mappings(customLevels, useOnlyCustomLevels);\n    if (typeof stream.emit === \"function\") {\n        stream.emit(\"message\", {\n            code: \"PINO_CONFIG\",\n            config: {\n                levels,\n                messageKey,\n                errorKey\n            }\n        });\n    }\n    assertLevelComparison(levelComparison);\n    const levelCompFunc = genLevelComparison(levelComparison);\n    Object.assign(instance, {\n        levels,\n        [levelCompSym]: levelCompFunc,\n        [useOnlyCustomLevelsSym]: useOnlyCustomLevels,\n        [streamSym]: stream,\n        [timeSym]: time,\n        [timeSliceIndexSym]: timeSliceIndex,\n        [stringifySym]: stringify,\n        [stringifySafeSym]: stringifySafe,\n        [stringifiersSym]: stringifiers,\n        [endSym]: end,\n        [formatOptsSym]: formatOpts,\n        [messageKeySym]: messageKey,\n        [errorKeySym]: errorKey,\n        [nestedKeySym]: nestedKey,\n        // protect against injection\n        [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : \"\",\n        [serializersSym]: serializers,\n        [mixinSym]: mixin,\n        [mixinMergeStrategySym]: mixinMergeStrategy,\n        [chindingsSym]: chindings,\n        [formattersSym]: allFormatters,\n        [hooksSym]: hooks,\n        silent: noop,\n        onChild,\n        [msgPrefixSym]: msgPrefix\n    });\n    Object.setPrototypeOf(instance, proto());\n    genLsCache(instance);\n    instance[setLevelSym](level);\n    return instance;\n}\nmodule.exports = pino;\nmodule.exports.destination = (dest = process.stdout.fd)=>{\n    if (typeof dest === \"object\") {\n        dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);\n        return buildSafeSonicBoom(dest);\n    } else {\n        return buildSafeSonicBoom({\n            dest: normalizeDestFileDescriptor(dest),\n            minLength: 0\n        });\n    }\n};\nmodule.exports.transport = __webpack_require__(/*! ./lib/transport */ \"(rsc)/./node_modules/pino/lib/transport.js\");\nmodule.exports.multistream = __webpack_require__(/*! ./lib/multistream */ \"(rsc)/./node_modules/pino/lib/multistream.js\");\nmodule.exports.levels = mappings();\nmodule.exports.stdSerializers = serializers;\nmodule.exports.stdTimeFunctions = Object.assign({}, time);\nmodule.exports.symbols = symbols;\nmodule.exports.version = version;\n// Enables default and name export with TypeScript and Babel\nmodule.exports[\"default\"] = pino;\nmodule.exports.pino = pino;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pino/pino.js\n");

/***/ })

};
;